!function(Q,U){"object"==typeof exports&&"object"==typeof module?module.exports=U():"function"==typeof define&&define.amd?define([],U):"object"==typeof exports?exports["@joskii/jflow"]=U():Q["@joskii/jflow"]=U()}(self,(function(){return(()=>{"use strict";var __webpack_modules__={406:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{eval('// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  "BaseLink": () => (/* reexport */ base_link),\n  "BezierLink": () => (/* reexport */ bezier_link),\n  "Capsule": () => (/* reexport */ capsule),\n  "CapsuleGroup": () => (/* reexport */ CapsuleGroup),\n  "CapsuleVertical": () => (/* reexport */ capsule_vertical),\n  "CapsuleVerticalGroup": () => (/* reexport */ CapsuleVerticalGroup),\n  "Diamond": () => (/* reexport */ diamond),\n  "DiamondGroup": () => (/* reexport */ DiamondGroup),\n  "DiamondVerticalGroup": () => (/* reexport */ DiamondVerticalGroup),\n  "Group": () => (/* reexport */ Group),\n  "GroupFactory": () => (/* reexport */ groupFactory),\n  "Icon": () => (/* reexport */ instance_image),\n  "Instance": () => (/* reexport */ instance_instance),\n  "JFLOW_MODE": () => (/* reexport */ JFLOW_MODE),\n  "JFlowEvent": () => (/* reexport */ events),\n  "LinearLayout": () => (/* reexport */ linear_layout),\n  "Link": () => (/* reexport */ instance_link),\n  "Node": () => (/* reexport */ node),\n  "NodePlaceholder": () => (/* reexport */ NodePlaceholder),\n  "Point": () => (/* reexport */ point),\n  "PointGroup": () => (/* reexport */ PointGroup),\n  "PolyLink": () => (/* reexport */ poly_link),\n  "Rectangle": () => (/* reexport */ rectangle),\n  "Rhombus": () => (/* reexport */ rhombus),\n  "RhombusGroup": () => (/* reexport */ RhombusGroup),\n  "ScrollGroup": () => (/* reexport */ scroll_group),\n  "ShadowDom": () => (/* reexport */ shadowDom),\n  "Text": () => (/* reexport */ elements_text),\n  "TextElement": () => (/* reexport */ TextElement),\n  "TextGroup": () => (/* reexport */ text_group),\n  "addReflowWork": () => (/* reexport */ dirty_work_addReflowWork),\n  "commonEventAdapter": () => (/* reexport */ commonAdapter),\n  "default": () => (/* binding */ src)\n});\n\n;// CONCATENATED MODULE: ./package.json\nconst package_namespaceObject = {"i8":"1.0.8"};\n;// CONCATENATED MODULE: ./src/core/utils/canvas.js\n/**\n * @typedef {Object} CanvasMeta\n * @property {Element} canvas - canvas 元素\n * @property {number} width - 画布宽度\n * @property {number} height - 画布高度\n * @property {number} raw_width - 画布元素宽度\n * @property {number} raw_height - 画布元素高度\n * @property {number} left - 画布距离左端距离\n * @property {number} top - 画布距离顶端距离\n * @property {Context2d} ctx - Context2d\n * @property {number} scale - 当前的像素设备比\n */\n/**\n * 创建一个 canvas 元素\n * @param  {Element} wrapper - dom元素\n * @return {CanvasMeta}\n */\nfunction createCanvas(wrapper) {\n  var canvas = document.createElement(\'canvas\');\n  var ctx = canvas.getContext(\'2d\');\n  var _wrapper$getBoundingC = wrapper.getBoundingClientRect(),\n    width = _wrapper$getBoundingC.width,\n    height = _wrapper$getBoundingC.height,\n    left = _wrapper$getBoundingC.left,\n    top = _wrapper$getBoundingC.top;\n  canvas.style.width = width + "px";\n  canvas.style.height = height + "px";\n  canvas.style.userSelect = \'none\';\n  var scale = window.devicePixelRatio;\n  canvas.width = Math.floor(width * scale);\n  canvas.height = Math.floor(height * scale);\n  if (wrapper) {\n    wrapper.style.position = \'relative\';\n    wrapper.style.overflow = \'hidden\';\n    wrapper.append(canvas);\n  }\n  return {\n    canvas: canvas,\n    width: width,\n    height: height,\n    raw_width: canvas.width,\n    raw_height: canvas.height,\n    left: left,\n    top: top,\n    ctx: ctx,\n    scale: scale\n  };\n}\nfunction canvas_resizeCanvas(canvas, wrapper) {\n  var _wrapper$getBoundingC2 = wrapper.getBoundingClientRect(),\n    width = _wrapper$getBoundingC2.width,\n    height = _wrapper$getBoundingC2.height,\n    left = _wrapper$getBoundingC2.left,\n    top = _wrapper$getBoundingC2.top;\n  canvas.style.width = width + "px";\n  canvas.style.height = height + "px";\n  var scale = window.devicePixelRatio;\n  canvas.width = Math.floor(width * scale);\n  canvas.height = Math.floor(height * scale);\n  return {\n    width: width,\n    height: height,\n    raw_width: canvas.width,\n    raw_height: canvas.height\n  };\n}\nvar caheCanvas = document.createElement(\'canvas\');\ncaheCanvas.width = 1;\ncaheCanvas.height = 1;\nvar caheCanvasctx = caheCanvas.getContext(\'2d\');\nvar scale = window.devicePixelRatio;\ncaheCanvasctx.scale(scale, scale);\n\n/**\n * 在离线canvas上绘制元素\n * @param  {render} render - 绘图函数\n */\nfunction requestCacheCanvas(render) {\n  caheCanvasctx.clearRect(0, 0, 5, 5);\n  caheCanvasctx.save();\n  render(caheCanvasctx);\n  caheCanvasctx.restore();\n  caheCanvasctx.clearRect(0, 0, 5, 5);\n}\nfunction listenOnDevicePixelRatio(callback, destroyHandler) {\n  var target = matchMedia("(resolution: ".concat(window.devicePixelRatio, "dppx)"));\n  function onChange() {\n    console.log("devicePixelRatio changed: " + window.devicePixelRatio);\n    callback(window.devicePixelRatio);\n    listenOnDevicePixelRatio(callback, destroyHandler);\n  }\n  destroyHandler(function () {\n    console.log(\'remove devicePixelRatio event handler\');\n    target.removeEventListener("change", onChange, {\n      once: true\n    });\n  });\n  target.addEventListener("change", onChange, {\n    once: true\n  });\n}\n;// CONCATENATED MODULE: ./node_modules/bezier-js/src/utils.js\n\n\n// math-inlining.\nconst { abs, cos, sin, acos, atan2, sqrt, pow } = Math;\n\n// cube root function yielding real roots\nfunction crt(v) {\n  return v < 0 ? -pow(-v, 1 / 3) : pow(v, 1 / 3);\n}\n\n// trig constants\nconst pi = Math.PI,\n  tau = 2 * pi,\n  quart = pi / 2,\n  // float precision significant decimal\n  epsilon = 0.000001,\n  // extremas used in bbox calculation and similar algorithms\n  nMax = Number.MAX_SAFE_INTEGER || 9007199254740991,\n  nMin = Number.MIN_SAFE_INTEGER || -9007199254740991,\n  // a zero coordinate, which is surprisingly useful\n  ZERO = { x: 0, y: 0, z: 0 };\n\n// Bezier utility functions\nconst utils = {\n  // Legendre-Gauss abscissae with n=24 (x_i values, defined at i=n as the roots of the nth order Legendre polynomial Pn(x))\n  Tvalues: [\n    -0.0640568928626056260850430826247450385909,\n    0.0640568928626056260850430826247450385909,\n    -0.1911188674736163091586398207570696318404,\n    0.1911188674736163091586398207570696318404,\n    -0.3150426796961633743867932913198102407864,\n    0.3150426796961633743867932913198102407864,\n    -0.4337935076260451384870842319133497124524,\n    0.4337935076260451384870842319133497124524,\n    -0.5454214713888395356583756172183723700107,\n    0.5454214713888395356583756172183723700107,\n    -0.6480936519369755692524957869107476266696,\n    0.6480936519369755692524957869107476266696,\n    -0.7401241915785543642438281030999784255232,\n    0.7401241915785543642438281030999784255232,\n    -0.8200019859739029219539498726697452080761,\n    0.8200019859739029219539498726697452080761,\n    -0.8864155270044010342131543419821967550873,\n    0.8864155270044010342131543419821967550873,\n    -0.9382745520027327585236490017087214496548,\n    0.9382745520027327585236490017087214496548,\n    -0.9747285559713094981983919930081690617411,\n    0.9747285559713094981983919930081690617411,\n    -0.9951872199970213601799974097007368118745,\n    0.9951872199970213601799974097007368118745,\n  ],\n\n  // Legendre-Gauss weights with n=24 (w_i values, defined by a function linked to in the Bezier primer article)\n  Cvalues: [\n    0.1279381953467521569740561652246953718517,\n    0.1279381953467521569740561652246953718517,\n    0.1258374563468282961213753825111836887264,\n    0.1258374563468282961213753825111836887264,\n    0.121670472927803391204463153476262425607,\n    0.121670472927803391204463153476262425607,\n    0.1155056680537256013533444839067835598622,\n    0.1155056680537256013533444839067835598622,\n    0.1074442701159656347825773424466062227946,\n    0.1074442701159656347825773424466062227946,\n    0.0976186521041138882698806644642471544279,\n    0.0976186521041138882698806644642471544279,\n    0.086190161531953275917185202983742667185,\n    0.086190161531953275917185202983742667185,\n    0.0733464814110803057340336152531165181193,\n    0.0733464814110803057340336152531165181193,\n    0.0592985849154367807463677585001085845412,\n    0.0592985849154367807463677585001085845412,\n    0.0442774388174198061686027482113382288593,\n    0.0442774388174198061686027482113382288593,\n    0.0285313886289336631813078159518782864491,\n    0.0285313886289336631813078159518782864491,\n    0.0123412297999871995468056670700372915759,\n    0.0123412297999871995468056670700372915759,\n  ],\n\n  arcfn: function (t, derivativeFn) {\n    const d = derivativeFn(t);\n    let l = d.x * d.x + d.y * d.y;\n    if (typeof d.z !== "undefined") {\n      l += d.z * d.z;\n    }\n    return sqrt(l);\n  },\n\n  compute: function (t, points, _3d) {\n    // shortcuts\n    if (t === 0) {\n      points[0].t = 0;\n      return points[0];\n    }\n\n    const order = points.length - 1;\n\n    if (t === 1) {\n      points[order].t = 1;\n      return points[order];\n    }\n\n    const mt = 1 - t;\n    let p = points;\n\n    // constant?\n    if (order === 0) {\n      points[0].t = t;\n      return points[0];\n    }\n\n    // linear?\n    if (order === 1) {\n      const ret = {\n        x: mt * p[0].x + t * p[1].x,\n        y: mt * p[0].y + t * p[1].y,\n        t: t,\n      };\n      if (_3d) {\n        ret.z = mt * p[0].z + t * p[1].z;\n      }\n      return ret;\n    }\n\n    // quadratic/cubic curve?\n    if (order < 4) {\n      let mt2 = mt * mt,\n        t2 = t * t,\n        a,\n        b,\n        c,\n        d = 0;\n      if (order === 2) {\n        p = [p[0], p[1], p[2], ZERO];\n        a = mt2;\n        b = mt * t * 2;\n        c = t2;\n      } else if (order === 3) {\n        a = mt2 * mt;\n        b = mt2 * t * 3;\n        c = mt * t2 * 3;\n        d = t * t2;\n      }\n      const ret = {\n        x: a * p[0].x + b * p[1].x + c * p[2].x + d * p[3].x,\n        y: a * p[0].y + b * p[1].y + c * p[2].y + d * p[3].y,\n        t: t,\n      };\n      if (_3d) {\n        ret.z = a * p[0].z + b * p[1].z + c * p[2].z + d * p[3].z;\n      }\n      return ret;\n    }\n\n    // higher order curves: use de Casteljau\'s computation\n    const dCpts = JSON.parse(JSON.stringify(points));\n    while (dCpts.length > 1) {\n      for (let i = 0; i < dCpts.length - 1; i++) {\n        dCpts[i] = {\n          x: dCpts[i].x + (dCpts[i + 1].x - dCpts[i].x) * t,\n          y: dCpts[i].y + (dCpts[i + 1].y - dCpts[i].y) * t,\n        };\n        if (typeof dCpts[i].z !== "undefined") {\n          dCpts[i] = dCpts[i].z + (dCpts[i + 1].z - dCpts[i].z) * t;\n        }\n      }\n      dCpts.splice(dCpts.length - 1, 1);\n    }\n    dCpts[0].t = t;\n    return dCpts[0];\n  },\n\n  computeWithRatios: function (t, points, ratios, _3d) {\n    const mt = 1 - t,\n      r = ratios,\n      p = points;\n\n    let f1 = r[0],\n      f2 = r[1],\n      f3 = r[2],\n      f4 = r[3],\n      d;\n\n    // spec for linear\n    f1 *= mt;\n    f2 *= t;\n\n    if (p.length === 2) {\n      d = f1 + f2;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y) / d,\n        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z) / d,\n        t: t,\n      };\n    }\n\n    // upgrade to quadratic\n    f1 *= mt;\n    f2 *= 2 * mt;\n    f3 *= t * t;\n\n    if (p.length === 3) {\n      d = f1 + f2 + f3;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y) / d,\n        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z) / d,\n        t: t,\n      };\n    }\n\n    // upgrade to cubic\n    f1 *= mt;\n    f2 *= 1.5 * mt;\n    f3 *= 3 * mt;\n    f4 *= t * t * t;\n\n    if (p.length === 4) {\n      d = f1 + f2 + f3 + f4;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x + f4 * p[3].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y + f4 * p[3].y) / d,\n        z: !_3d\n          ? false\n          : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z + f4 * p[3].z) / d,\n        t: t,\n      };\n    }\n  },\n\n  derive: function (points, _3d) {\n    const dpoints = [];\n    for (let p = points, d = p.length, c = d - 1; d > 1; d--, c--) {\n      const list = [];\n      for (let j = 0, dpt; j < c; j++) {\n        dpt = {\n          x: c * (p[j + 1].x - p[j].x),\n          y: c * (p[j + 1].y - p[j].y),\n        };\n        if (_3d) {\n          dpt.z = c * (p[j + 1].z - p[j].z);\n        }\n        list.push(dpt);\n      }\n      dpoints.push(list);\n      p = list;\n    }\n    return dpoints;\n  },\n\n  between: function (v, m, M) {\n    return (\n      (m <= v && v <= M) ||\n      utils.approximately(v, m) ||\n      utils.approximately(v, M)\n    );\n  },\n\n  approximately: function (a, b, precision) {\n    return abs(a - b) <= (precision || epsilon);\n  },\n\n  length: function (derivativeFn) {\n    const z = 0.5,\n      len = utils.Tvalues.length;\n\n    let sum = 0;\n\n    for (let i = 0, t; i < len; i++) {\n      t = z * utils.Tvalues[i] + z;\n      sum += utils.Cvalues[i] * utils.arcfn(t, derivativeFn);\n    }\n    return z * sum;\n  },\n\n  map: function (v, ds, de, ts, te) {\n    const d1 = de - ds,\n      d2 = te - ts,\n      v2 = v - ds,\n      r = v2 / d1;\n    return ts + d2 * r;\n  },\n\n  lerp: function (r, v1, v2) {\n    const ret = {\n      x: v1.x + r * (v2.x - v1.x),\n      y: v1.y + r * (v2.y - v1.y),\n    };\n    if (v1.z !== undefined && v2.z !== undefined) {\n      ret.z = v1.z + r * (v2.z - v1.z);\n    }\n    return ret;\n  },\n\n  pointToString: function (p) {\n    let s = p.x + "/" + p.y;\n    if (typeof p.z !== "undefined") {\n      s += "/" + p.z;\n    }\n    return s;\n  },\n\n  pointsToString: function (points) {\n    return "[" + points.map(utils.pointToString).join(", ") + "]";\n  },\n\n  copy: function (obj) {\n    return JSON.parse(JSON.stringify(obj));\n  },\n\n  angle: function (o, v1, v2) {\n    const dx1 = v1.x - o.x,\n      dy1 = v1.y - o.y,\n      dx2 = v2.x - o.x,\n      dy2 = v2.y - o.y,\n      cross = dx1 * dy2 - dy1 * dx2,\n      dot = dx1 * dx2 + dy1 * dy2;\n    return atan2(cross, dot);\n  },\n\n  // round as string, to avoid rounding errors\n  round: function (v, d) {\n    const s = "" + v;\n    const pos = s.indexOf(".");\n    return parseFloat(s.substring(0, pos + 1 + d));\n  },\n\n  dist: function (p1, p2) {\n    const dx = p1.x - p2.x,\n      dy = p1.y - p2.y;\n    return sqrt(dx * dx + dy * dy);\n  },\n\n  closest: function (LUT, point) {\n    let mdist = pow(2, 63),\n      mpos,\n      d;\n    LUT.forEach(function (p, idx) {\n      d = utils.dist(point, p);\n      if (d < mdist) {\n        mdist = d;\n        mpos = idx;\n      }\n    });\n    return { mdist: mdist, mpos: mpos };\n  },\n\n  abcratio: function (t, n) {\n    // see ratio(t) note on http://pomax.github.io/bezierinfo/#abc\n    if (n !== 2 && n !== 3) {\n      return false;\n    }\n    if (typeof t === "undefined") {\n      t = 0.5;\n    } else if (t === 0 || t === 1) {\n      return t;\n    }\n    const bottom = pow(t, n) + pow(1 - t, n),\n      top = bottom - 1;\n    return abs(top / bottom);\n  },\n\n  projectionratio: function (t, n) {\n    // see u(t) note on http://pomax.github.io/bezierinfo/#abc\n    if (n !== 2 && n !== 3) {\n      return false;\n    }\n    if (typeof t === "undefined") {\n      t = 0.5;\n    } else if (t === 0 || t === 1) {\n      return t;\n    }\n    const top = pow(1 - t, n),\n      bottom = pow(t, n) + top;\n    return top / bottom;\n  },\n\n  lli8: function (x1, y1, x2, y2, x3, y3, x4, y4) {\n    const nx =\n        (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n      ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n      d = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n    if (d == 0) {\n      return false;\n    }\n    return { x: nx / d, y: ny / d };\n  },\n\n  lli4: function (p1, p2, p3, p4) {\n    const x1 = p1.x,\n      y1 = p1.y,\n      x2 = p2.x,\n      y2 = p2.y,\n      x3 = p3.x,\n      y3 = p3.y,\n      x4 = p4.x,\n      y4 = p4.y;\n    return utils.lli8(x1, y1, x2, y2, x3, y3, x4, y4);\n  },\n\n  lli: function (v1, v2) {\n    return utils.lli4(v1, v1.c, v2, v2.c);\n  },\n\n  makeline: function (p1, p2) {\n    const x1 = p1.x,\n      y1 = p1.y,\n      x2 = p2.x,\n      y2 = p2.y,\n      dx = (x2 - x1) / 3,\n      dy = (y2 - y1) / 3;\n    return new Bezier(\n      x1,\n      y1,\n      x1 + dx,\n      y1 + dy,\n      x1 + 2 * dx,\n      y1 + 2 * dy,\n      x2,\n      y2\n    );\n  },\n\n  findbbox: function (sections) {\n    let mx = nMax,\n      my = nMax,\n      MX = nMin,\n      MY = nMin;\n    sections.forEach(function (s) {\n      const bbox = s.bbox();\n      if (mx > bbox.x.min) mx = bbox.x.min;\n      if (my > bbox.y.min) my = bbox.y.min;\n      if (MX < bbox.x.max) MX = bbox.x.max;\n      if (MY < bbox.y.max) MY = bbox.y.max;\n    });\n    return {\n      x: { min: mx, mid: (mx + MX) / 2, max: MX, size: MX - mx },\n      y: { min: my, mid: (my + MY) / 2, max: MY, size: MY - my },\n    };\n  },\n\n  shapeintersections: function (\n    s1,\n    bbox1,\n    s2,\n    bbox2,\n    curveIntersectionThreshold\n  ) {\n    if (!utils.bboxoverlap(bbox1, bbox2)) return [];\n    const intersections = [];\n    const a1 = [s1.startcap, s1.forward, s1.back, s1.endcap];\n    const a2 = [s2.startcap, s2.forward, s2.back, s2.endcap];\n    a1.forEach(function (l1) {\n      if (l1.virtual) return;\n      a2.forEach(function (l2) {\n        if (l2.virtual) return;\n        const iss = l1.intersects(l2, curveIntersectionThreshold);\n        if (iss.length > 0) {\n          iss.c1 = l1;\n          iss.c2 = l2;\n          iss.s1 = s1;\n          iss.s2 = s2;\n          intersections.push(iss);\n        }\n      });\n    });\n    return intersections;\n  },\n\n  makeshape: function (forward, back, curveIntersectionThreshold) {\n    const bpl = back.points.length;\n    const fpl = forward.points.length;\n    const start = utils.makeline(back.points[bpl - 1], forward.points[0]);\n    const end = utils.makeline(forward.points[fpl - 1], back.points[0]);\n    const shape = {\n      startcap: start,\n      forward: forward,\n      back: back,\n      endcap: end,\n      bbox: utils.findbbox([start, forward, back, end]),\n    };\n    shape.intersections = function (s2) {\n      return utils.shapeintersections(\n        shape,\n        shape.bbox,\n        s2,\n        s2.bbox,\n        curveIntersectionThreshold\n      );\n    };\n    return shape;\n  },\n\n  getminmax: function (curve, d, list) {\n    if (!list) return { min: 0, max: 0 };\n    let min = nMax,\n      max = nMin,\n      t,\n      c;\n    if (list.indexOf(0) === -1) {\n      list = [0].concat(list);\n    }\n    if (list.indexOf(1) === -1) {\n      list.push(1);\n    }\n    for (let i = 0, len = list.length; i < len; i++) {\n      t = list[i];\n      c = curve.get(t);\n      if (c[d] < min) {\n        min = c[d];\n      }\n      if (c[d] > max) {\n        max = c[d];\n      }\n    }\n    return { min: min, mid: (min + max) / 2, max: max, size: max - min };\n  },\n\n  align: function (points, line) {\n    const tx = line.p1.x,\n      ty = line.p1.y,\n      a = -atan2(line.p2.y - ty, line.p2.x - tx),\n      d = function (v) {\n        return {\n          x: (v.x - tx) * cos(a) - (v.y - ty) * sin(a),\n          y: (v.x - tx) * sin(a) + (v.y - ty) * cos(a),\n        };\n      };\n    return points.map(d);\n  },\n\n  roots: function (points, line) {\n    line = line || { p1: { x: 0, y: 0 }, p2: { x: 1, y: 0 } };\n\n    const order = points.length - 1;\n    const aligned = utils.align(points, line);\n    const reduce = function (t) {\n      return 0 <= t && t <= 1;\n    };\n\n    if (order === 2) {\n      const a = aligned[0].y,\n        b = aligned[1].y,\n        c = aligned[2].y,\n        d = a - 2 * b + c;\n      if (d !== 0) {\n        const m1 = -sqrt(b * b - a * c),\n          m2 = -a + b,\n          v1 = -(m1 + m2) / d,\n          v2 = -(-m1 + m2) / d;\n        return [v1, v2].filter(reduce);\n      } else if (b !== c && d === 0) {\n        return [(2 * b - c) / (2 * b - 2 * c)].filter(reduce);\n      }\n      return [];\n    }\n\n    // see http://www.trans4mind.com/personal_development/mathematics/polynomials/cubicAlgebra.htm\n    const pa = aligned[0].y,\n      pb = aligned[1].y,\n      pc = aligned[2].y,\n      pd = aligned[3].y;\n\n    let d = -pa + 3 * pb - 3 * pc + pd,\n      a = 3 * pa - 6 * pb + 3 * pc,\n      b = -3 * pa + 3 * pb,\n      c = pa;\n\n    if (utils.approximately(d, 0)) {\n      // this is not a cubic curve.\n      if (utils.approximately(a, 0)) {\n        // in fact, this is not a quadratic curve either.\n        if (utils.approximately(b, 0)) {\n          // in fact in fact, there are no solutions.\n          return [];\n        }\n        // linear solution:\n        return [-c / b].filter(reduce);\n      }\n      // quadratic solution:\n      const q = sqrt(b * b - 4 * a * c),\n        a2 = 2 * a;\n      return [(q - b) / a2, (-b - q) / a2].filter(reduce);\n    }\n\n    // at this point, we know we need a cubic solution:\n\n    a /= d;\n    b /= d;\n    c /= d;\n\n    const p = (3 * b - a * a) / 3,\n      p3 = p / 3,\n      q = (2 * a * a * a - 9 * a * b + 27 * c) / 27,\n      q2 = q / 2,\n      discriminant = q2 * q2 + p3 * p3 * p3;\n\n    let u1, v1, x1, x2, x3;\n    if (discriminant < 0) {\n      const mp3 = -p / 3,\n        mp33 = mp3 * mp3 * mp3,\n        r = sqrt(mp33),\n        t = -q / (2 * r),\n        cosphi = t < -1 ? -1 : t > 1 ? 1 : t,\n        phi = acos(cosphi),\n        crtr = crt(r),\n        t1 = 2 * crtr;\n      x1 = t1 * cos(phi / 3) - a / 3;\n      x2 = t1 * cos((phi + tau) / 3) - a / 3;\n      x3 = t1 * cos((phi + 2 * tau) / 3) - a / 3;\n      return [x1, x2, x3].filter(reduce);\n    } else if (discriminant === 0) {\n      u1 = q2 < 0 ? crt(-q2) : -crt(q2);\n      x1 = 2 * u1 - a / 3;\n      x2 = -u1 - a / 3;\n      return [x1, x2].filter(reduce);\n    } else {\n      const sd = sqrt(discriminant);\n      u1 = crt(-q2 + sd);\n      v1 = crt(q2 + sd);\n      return [u1 - v1 - a / 3].filter(reduce);\n    }\n  },\n\n  droots: function (p) {\n    // quadratic roots are easy\n    if (p.length === 3) {\n      const a = p[0],\n        b = p[1],\n        c = p[2],\n        d = a - 2 * b + c;\n      if (d !== 0) {\n        const m1 = -sqrt(b * b - a * c),\n          m2 = -a + b,\n          v1 = -(m1 + m2) / d,\n          v2 = -(-m1 + m2) / d;\n        return [v1, v2];\n      } else if (b !== c && d === 0) {\n        return [(2 * b - c) / (2 * (b - c))];\n      }\n      return [];\n    }\n\n    // linear roots are even easier\n    if (p.length === 2) {\n      const a = p[0],\n        b = p[1];\n      if (a !== b) {\n        return [a / (a - b)];\n      }\n      return [];\n    }\n\n    return [];\n  },\n\n  curvature: function (t, d1, d2, _3d, kOnly) {\n    let num,\n      dnm,\n      adk,\n      dk,\n      k = 0,\n      r = 0;\n\n    //\n    // We\'re using the following formula for curvature:\n    //\n    //              x\'y" - y\'x"\n    //   k(t) = ------------------\n    //           (x\'² + y\'²)^(3/2)\n    //\n    // from https://en.wikipedia.org/wiki/Radius_of_curvature#Definition\n    //\n    // With it corresponding 3D counterpart:\n    //\n    //          sqrt( (y\'z" - y"z\')² + (z\'x" - z"x\')² + (x\'y" - x"y\')²)\n    //   k(t) = -------------------------------------------------------\n    //                     (x\'² + y\'² + z\'²)^(3/2)\n    //\n\n    const d = utils.compute(t, d1);\n    const dd = utils.compute(t, d2);\n    const qdsum = d.x * d.x + d.y * d.y;\n\n    if (_3d) {\n      num = sqrt(\n        pow(d.y * dd.z - dd.y * d.z, 2) +\n          pow(d.z * dd.x - dd.z * d.x, 2) +\n          pow(d.x * dd.y - dd.x * d.y, 2)\n      );\n      dnm = pow(qdsum + d.z * d.z, 3 / 2);\n    } else {\n      num = d.x * dd.y - d.y * dd.x;\n      dnm = pow(qdsum, 3 / 2);\n    }\n\n    if (num === 0 || dnm === 0) {\n      return { k: 0, r: 0 };\n    }\n\n    k = num / dnm;\n    r = dnm / num;\n\n    // We\'re also computing the derivative of kappa, because\n    // there is value in knowing the rate of change for the\n    // curvature along the curve. And we\'re just going to\n    // ballpark it based on an epsilon.\n    if (!kOnly) {\n      // compute k\'(t) based on the interval before, and after it,\n      // to at least try to not introduce forward/backward pass bias.\n      const pk = utils.curvature(t - 0.001, d1, d2, _3d, true).k;\n      const nk = utils.curvature(t + 0.001, d1, d2, _3d, true).k;\n      dk = (nk - k + (k - pk)) / 2;\n      adk = (abs(nk - k) + abs(k - pk)) / 2;\n    }\n\n    return { k: k, r: r, dk: dk, adk: adk };\n  },\n\n  inflections: function (points) {\n    if (points.length < 4) return [];\n\n    // FIXME: TODO: add in inflection abstraction for quartic+ curves?\n\n    const p = utils.align(points, { p1: points[0], p2: points.slice(-1)[0] }),\n      a = p[2].x * p[1].y,\n      b = p[3].x * p[1].y,\n      c = p[1].x * p[2].y,\n      d = p[3].x * p[2].y,\n      v1 = 18 * (-3 * a + 2 * b + 3 * c - d),\n      v2 = 18 * (3 * a - b - 3 * c),\n      v3 = 18 * (c - a);\n\n    if (utils.approximately(v1, 0)) {\n      if (!utils.approximately(v2, 0)) {\n        let t = -v3 / v2;\n        if (0 <= t && t <= 1) return [t];\n      }\n      return [];\n    }\n\n    const trm = v2 * v2 - 4 * v1 * v3,\n      sq = Math.sqrt(trm),\n      d2 = 2 * v1;\n\n    if (utils.approximately(d2, 0)) return [];\n\n    return [(sq - v2) / d2, -(v2 + sq) / d2].filter(function (r) {\n      return 0 <= r && r <= 1;\n    });\n  },\n\n  bboxoverlap: function (b1, b2) {\n    const dims = ["x", "y"],\n      len = dims.length;\n\n    for (let i = 0, dim, l, t, d; i < len; i++) {\n      dim = dims[i];\n      l = b1[dim].mid;\n      t = b2[dim].mid;\n      d = (b1[dim].size + b2[dim].size) / 2;\n      if (abs(l - t) >= d) return false;\n    }\n    return true;\n  },\n\n  expandbox: function (bbox, _bbox) {\n    if (_bbox.x.min < bbox.x.min) {\n      bbox.x.min = _bbox.x.min;\n    }\n    if (_bbox.y.min < bbox.y.min) {\n      bbox.y.min = _bbox.y.min;\n    }\n    if (_bbox.z && _bbox.z.min < bbox.z.min) {\n      bbox.z.min = _bbox.z.min;\n    }\n    if (_bbox.x.max > bbox.x.max) {\n      bbox.x.max = _bbox.x.max;\n    }\n    if (_bbox.y.max > bbox.y.max) {\n      bbox.y.max = _bbox.y.max;\n    }\n    if (_bbox.z && _bbox.z.max > bbox.z.max) {\n      bbox.z.max = _bbox.z.max;\n    }\n    bbox.x.mid = (bbox.x.min + bbox.x.max) / 2;\n    bbox.y.mid = (bbox.y.min + bbox.y.max) / 2;\n    if (bbox.z) {\n      bbox.z.mid = (bbox.z.min + bbox.z.max) / 2;\n    }\n    bbox.x.size = bbox.x.max - bbox.x.min;\n    bbox.y.size = bbox.y.max - bbox.y.min;\n    if (bbox.z) {\n      bbox.z.size = bbox.z.max - bbox.z.min;\n    }\n  },\n\n  pairiteration: function (c1, c2, curveIntersectionThreshold) {\n    const c1b = c1.bbox(),\n      c2b = c2.bbox(),\n      r = 100000,\n      threshold = curveIntersectionThreshold || 0.5;\n\n    if (\n      c1b.x.size + c1b.y.size < threshold &&\n      c2b.x.size + c2b.y.size < threshold\n    ) {\n      return [\n        (((r * (c1._t1 + c1._t2)) / 2) | 0) / r +\n          "/" +\n          (((r * (c2._t1 + c2._t2)) / 2) | 0) / r,\n      ];\n    }\n\n    let cc1 = c1.split(0.5),\n      cc2 = c2.split(0.5),\n      pairs = [\n        { left: cc1.left, right: cc2.left },\n        { left: cc1.left, right: cc2.right },\n        { left: cc1.right, right: cc2.right },\n        { left: cc1.right, right: cc2.left },\n      ];\n\n    pairs = pairs.filter(function (pair) {\n      return utils.bboxoverlap(pair.left.bbox(), pair.right.bbox());\n    });\n\n    let results = [];\n\n    if (pairs.length === 0) return results;\n\n    pairs.forEach(function (pair) {\n      results = results.concat(\n        utils.pairiteration(pair.left, pair.right, threshold)\n      );\n    });\n\n    results = results.filter(function (v, i) {\n      return results.indexOf(v) === i;\n    });\n\n    return results;\n  },\n\n  getccenter: function (p1, p2, p3) {\n    const dx1 = p2.x - p1.x,\n      dy1 = p2.y - p1.y,\n      dx2 = p3.x - p2.x,\n      dy2 = p3.y - p2.y,\n      dx1p = dx1 * cos(quart) - dy1 * sin(quart),\n      dy1p = dx1 * sin(quart) + dy1 * cos(quart),\n      dx2p = dx2 * cos(quart) - dy2 * sin(quart),\n      dy2p = dx2 * sin(quart) + dy2 * cos(quart),\n      // chord midpoints\n      mx1 = (p1.x + p2.x) / 2,\n      my1 = (p1.y + p2.y) / 2,\n      mx2 = (p2.x + p3.x) / 2,\n      my2 = (p2.y + p3.y) / 2,\n      // midpoint offsets\n      mx1n = mx1 + dx1p,\n      my1n = my1 + dy1p,\n      mx2n = mx2 + dx2p,\n      my2n = my2 + dy2p,\n      // intersection of these lines:\n      arc = utils.lli8(mx1, my1, mx1n, my1n, mx2, my2, mx2n, my2n),\n      r = utils.dist(arc, p1);\n\n    // arc start/end values, over mid point:\n    let s = atan2(p1.y - arc.y, p1.x - arc.x),\n      m = atan2(p2.y - arc.y, p2.x - arc.x),\n      e = atan2(p3.y - arc.y, p3.x - arc.x),\n      _;\n\n    // determine arc direction (cw/ccw correction)\n    if (s < e) {\n      // if s<m<e, arc(s, e)\n      // if m<s<e, arc(e, s + tau)\n      // if s<e<m, arc(e, s + tau)\n      if (s > m || m > e) {\n        s += tau;\n      }\n      if (s > e) {\n        _ = e;\n        e = s;\n        s = _;\n      }\n    } else {\n      // if e<m<s, arc(e, s)\n      // if m<e<s, arc(s, e + tau)\n      // if e<s<m, arc(s, e + tau)\n      if (e < m && m < s) {\n        _ = e;\n        e = s;\n        s = _;\n      } else {\n        e += tau;\n      }\n    }\n    // assign and done.\n    arc.s = s;\n    arc.e = e;\n    arc.r = r;\n    return arc;\n  },\n\n  numberSort: function (a, b) {\n    return a - b;\n  },\n};\n\n\n\n;// CONCATENATED MODULE: ./node_modules/bezier-js/src/poly-bezier.js\n\n\n/**\n * Poly Bezier\n * @param {[type]} curves [description]\n */\nclass PolyBezier {\n  constructor(curves) {\n    this.curves = [];\n    this._3d = false;\n    if (!!curves) {\n      this.curves = curves;\n      this._3d = this.curves[0]._3d;\n    }\n  }\n\n  valueOf() {\n    return this.toString();\n  }\n\n  toString() {\n    return (\n      "[" +\n      this.curves\n        .map(function (curve) {\n          return utils.pointsToString(curve.points);\n        })\n        .join(", ") +\n      "]"\n    );\n  }\n\n  addCurve(curve) {\n    this.curves.push(curve);\n    this._3d = this._3d || curve._3d;\n  }\n\n  length() {\n    return this.curves\n      .map(function (v) {\n        return v.length();\n      })\n      .reduce(function (a, b) {\n        return a + b;\n      });\n  }\n\n  curve(idx) {\n    return this.curves[idx];\n  }\n\n  bbox() {\n    const c = this.curves;\n    var bbox = c[0].bbox();\n    for (var i = 1; i < c.length; i++) {\n      utils.expandbox(bbox, c[i].bbox());\n    }\n    return bbox;\n  }\n\n  offset(d) {\n    const offset = [];\n    this.curves.forEach(function (v) {\n      offset.push(...v.offset(d));\n    });\n    return new PolyBezier(offset);\n  }\n}\n\n\n\n;// CONCATENATED MODULE: ./node_modules/bezier-js/src/bezier.js\n/**\n  A javascript Bezier curve library by Pomax.\n\n  Based on http://pomax.github.io/bezierinfo\n\n  This code is MIT licensed.\n**/\n\n\n\n\n// math-inlining.\nconst { abs: bezier_abs, min, max, cos: bezier_cos, sin: bezier_sin, acos: bezier_acos, sqrt: bezier_sqrt } = Math;\nconst bezier_pi = Math.PI;\n// a zero coordinate, which is surprisingly useful\nconst bezier_ZERO = { x: 0, y: 0, z: 0 };\n\n/**\n * Bezier curve constructor.\n *\n * ...docs pending...\n */\nclass Bezier {\n  constructor(coords) {\n    let args =\n      coords && coords.forEach ? coords : Array.from(arguments).slice();\n    let coordlen = false;\n\n    if (typeof args[0] === "object") {\n      coordlen = args.length;\n      const newargs = [];\n      args.forEach(function (point) {\n        ["x", "y", "z"].forEach(function (d) {\n          if (typeof point[d] !== "undefined") {\n            newargs.push(point[d]);\n          }\n        });\n      });\n      args = newargs;\n    }\n\n    let higher = false;\n    const len = args.length;\n\n    if (coordlen) {\n      if (coordlen > 4) {\n        if (arguments.length !== 1) {\n          throw new Error(\n            "Only new Bezier(point[]) is accepted for 4th and higher order curves"\n          );\n        }\n        higher = true;\n      }\n    } else {\n      if (len !== 6 && len !== 8 && len !== 9 && len !== 12) {\n        if (arguments.length !== 1) {\n          throw new Error(\n            "Only new Bezier(point[]) is accepted for 4th and higher order curves"\n          );\n        }\n      }\n    }\n\n    const _3d = (this._3d =\n      (!higher && (len === 9 || len === 12)) ||\n      (coords && coords[0] && typeof coords[0].z !== "undefined"));\n\n    const points = (this.points = []);\n    for (let idx = 0, step = _3d ? 3 : 2; idx < len; idx += step) {\n      var point = {\n        x: args[idx],\n        y: args[idx + 1],\n      };\n      if (_3d) {\n        point.z = args[idx + 2];\n      }\n      points.push(point);\n    }\n    const order = (this.order = points.length - 1);\n\n    const dims = (this.dims = ["x", "y"]);\n    if (_3d) dims.push("z");\n    this.dimlen = dims.length;\n\n    const aligned = utils.align(points, { p1: points[0], p2: points[order] });\n    this._linear = !aligned.some((p) => bezier_abs(p.y) > 0.0001);\n\n    this._lut = [];\n\n    this._t1 = 0;\n    this._t2 = 1;\n    this.update();\n  }\n\n  static quadraticFromPoints(p1, p2, p3, t) {\n    if (typeof t === "undefined") {\n      t = 0.5;\n    }\n    // shortcuts, although they\'re really dumb\n    if (t === 0) {\n      return new Bezier(p2, p2, p3);\n    }\n    if (t === 1) {\n      return new Bezier(p1, p2, p2);\n    }\n    // real fitting.\n    const abc = Bezier.getABC(2, p1, p2, p3, t);\n    return new Bezier(p1, abc.A, p3);\n  }\n\n  static cubicFromPoints(S, B, E, t, d1) {\n    if (typeof t === "undefined") {\n      t = 0.5;\n    }\n    const abc = Bezier.getABC(3, S, B, E, t);\n    if (typeof d1 === "undefined") {\n      d1 = utils.dist(B, abc.C);\n    }\n    const d2 = (d1 * (1 - t)) / t;\n\n    const selen = utils.dist(S, E),\n      lx = (E.x - S.x) / selen,\n      ly = (E.y - S.y) / selen,\n      bx1 = d1 * lx,\n      by1 = d1 * ly,\n      bx2 = d2 * lx,\n      by2 = d2 * ly;\n    // derivation of new hull coordinates\n    const e1 = { x: B.x - bx1, y: B.y - by1 },\n      e2 = { x: B.x + bx2, y: B.y + by2 },\n      A = abc.A,\n      v1 = { x: A.x + (e1.x - A.x) / (1 - t), y: A.y + (e1.y - A.y) / (1 - t) },\n      v2 = { x: A.x + (e2.x - A.x) / t, y: A.y + (e2.y - A.y) / t },\n      nc1 = { x: S.x + (v1.x - S.x) / t, y: S.y + (v1.y - S.y) / t },\n      nc2 = {\n        x: E.x + (v2.x - E.x) / (1 - t),\n        y: E.y + (v2.y - E.y) / (1 - t),\n      };\n    // ...done\n    return new Bezier(S, nc1, nc2, E);\n  }\n\n  static getUtils() {\n    return utils;\n  }\n\n  getUtils() {\n    return Bezier.getUtils();\n  }\n\n  static get PolyBezier() {\n    return PolyBezier;\n  }\n\n  valueOf() {\n    return this.toString();\n  }\n\n  toString() {\n    return utils.pointsToString(this.points);\n  }\n\n  toSVG() {\n    if (this._3d) return false;\n    const p = this.points,\n      x = p[0].x,\n      y = p[0].y,\n      s = ["M", x, y, this.order === 2 ? "Q" : "C"];\n    for (let i = 1, last = p.length; i < last; i++) {\n      s.push(p[i].x);\n      s.push(p[i].y);\n    }\n    return s.join(" ");\n  }\n\n  setRatios(ratios) {\n    if (ratios.length !== this.points.length) {\n      throw new Error("incorrect number of ratio values");\n    }\n    this.ratios = ratios;\n    this._lut = []; //  invalidate any precomputed LUT\n  }\n\n  verify() {\n    const print = this.coordDigest();\n    if (print !== this._print) {\n      this._print = print;\n      this.update();\n    }\n  }\n\n  coordDigest() {\n    return this.points\n      .map(function (c, pos) {\n        return "" + pos + c.x + c.y + (c.z ? c.z : 0);\n      })\n      .join("");\n  }\n\n  update() {\n    // invalidate any precomputed LUT\n    this._lut = [];\n    this.dpoints = utils.derive(this.points, this._3d);\n    this.computedirection();\n  }\n\n  computedirection() {\n    const points = this.points;\n    const angle = utils.angle(points[0], points[this.order], points[1]);\n    this.clockwise = angle > 0;\n  }\n\n  length() {\n    return utils.length(this.derivative.bind(this));\n  }\n\n  static getABC(order = 2, S, B, E, t = 0.5) {\n    const u = utils.projectionratio(t, order),\n      um = 1 - u,\n      C = {\n        x: u * S.x + um * E.x,\n        y: u * S.y + um * E.y,\n      },\n      s = utils.abcratio(t, order),\n      A = {\n        x: B.x + (B.x - C.x) / s,\n        y: B.y + (B.y - C.y) / s,\n      };\n    return { A, B, C, S, E };\n  }\n\n  getABC(t, B) {\n    B = B || this.get(t);\n    let S = this.points[0];\n    let E = this.points[this.order];\n    return Bezier.getABC(this.order, S, B, E, t);\n  }\n\n  getLUT(steps) {\n    this.verify();\n    steps = steps || 100;\n    if (this._lut.length === steps) {\n      return this._lut;\n    }\n    this._lut = [];\n    // We want a range from 0 to 1 inclusive, so\n    // we decrement and then use <= rather than <:\n    steps--;\n    for (let i = 0, p, t; i < steps; i++) {\n      t = i / (steps - 1);\n      p = this.compute(t);\n      p.t = t;\n      this._lut.push(p);\n    }\n    return this._lut;\n  }\n\n  on(point, error) {\n    error = error || 5;\n    const lut = this.getLUT(),\n      hits = [];\n    for (let i = 0, c, t = 0; i < lut.length; i++) {\n      c = lut[i];\n      if (utils.dist(c, point) < error) {\n        hits.push(c);\n        t += i / lut.length;\n      }\n    }\n    if (!hits.length) return false;\n    return (t /= hits.length);\n  }\n\n  project(point) {\n    // step 1: coarse check\n    const LUT = this.getLUT(),\n      l = LUT.length - 1,\n      closest = utils.closest(LUT, point),\n      mpos = closest.mpos,\n      t1 = (mpos - 1) / l,\n      t2 = (mpos + 1) / l,\n      step = 0.1 / l;\n\n    // step 2: fine check\n    let mdist = closest.mdist,\n      t = t1,\n      ft = t,\n      p;\n    mdist += 1;\n    for (let d; t < t2 + step; t += step) {\n      p = this.compute(t);\n      d = utils.dist(point, p);\n      if (d < mdist) {\n        mdist = d;\n        ft = t;\n      }\n    }\n    ft = ft < 0 ? 0 : ft > 1 ? 1 : ft;\n    p = this.compute(ft);\n    p.t = ft;\n    p.d = mdist;\n    return p;\n  }\n\n  get(t) {\n    return this.compute(t);\n  }\n\n  point(idx) {\n    return this.points[idx];\n  }\n\n  compute(t) {\n    if (this.ratios) {\n      return utils.computeWithRatios(t, this.points, this.ratios, this._3d);\n    }\n    return utils.compute(t, this.points, this._3d, this.ratios);\n  }\n\n  raise() {\n    const p = this.points,\n      np = [p[0]],\n      k = p.length;\n    for (let i = 1, pi, pim; i < k; i++) {\n      pi = p[i];\n      pim = p[i - 1];\n      np[i] = {\n        x: ((k - i) / k) * pi.x + (i / k) * pim.x,\n        y: ((k - i) / k) * pi.y + (i / k) * pim.y,\n      };\n    }\n    np[k] = p[k - 1];\n    return new Bezier(np);\n  }\n\n  derivative(t) {\n    return utils.compute(t, this.dpoints[0], this._3d);\n  }\n\n  dderivative(t) {\n    return utils.compute(t, this.dpoints[1], this._3d);\n  }\n\n  align() {\n    let p = this.points;\n    return new Bezier(utils.align(p, { p1: p[0], p2: p[p.length - 1] }));\n  }\n\n  curvature(t) {\n    return utils.curvature(t, this.dpoints[0], this.dpoints[1], this._3d);\n  }\n\n  inflections() {\n    return utils.inflections(this.points);\n  }\n\n  normal(t) {\n    return this._3d ? this.__normal3(t) : this.__normal2(t);\n  }\n\n  __normal2(t) {\n    const d = this.derivative(t);\n    const q = bezier_sqrt(d.x * d.x + d.y * d.y);\n    return { x: -d.y / q, y: d.x / q };\n  }\n\n  __normal3(t) {\n    // see http://stackoverflow.com/questions/25453159\n    const r1 = this.derivative(t),\n      r2 = this.derivative(t + 0.01),\n      q1 = bezier_sqrt(r1.x * r1.x + r1.y * r1.y + r1.z * r1.z),\n      q2 = bezier_sqrt(r2.x * r2.x + r2.y * r2.y + r2.z * r2.z);\n    r1.x /= q1;\n    r1.y /= q1;\n    r1.z /= q1;\n    r2.x /= q2;\n    r2.y /= q2;\n    r2.z /= q2;\n    // cross product\n    const c = {\n      x: r2.y * r1.z - r2.z * r1.y,\n      y: r2.z * r1.x - r2.x * r1.z,\n      z: r2.x * r1.y - r2.y * r1.x,\n    };\n    const m = bezier_sqrt(c.x * c.x + c.y * c.y + c.z * c.z);\n    c.x /= m;\n    c.y /= m;\n    c.z /= m;\n    // rotation matrix\n    const R = [\n      c.x * c.x,\n      c.x * c.y - c.z,\n      c.x * c.z + c.y,\n      c.x * c.y + c.z,\n      c.y * c.y,\n      c.y * c.z - c.x,\n      c.x * c.z - c.y,\n      c.y * c.z + c.x,\n      c.z * c.z,\n    ];\n    // normal vector:\n    const n = {\n      x: R[0] * r1.x + R[1] * r1.y + R[2] * r1.z,\n      y: R[3] * r1.x + R[4] * r1.y + R[5] * r1.z,\n      z: R[6] * r1.x + R[7] * r1.y + R[8] * r1.z,\n    };\n    return n;\n  }\n\n  hull(t) {\n    let p = this.points,\n      _p = [],\n      q = [],\n      idx = 0;\n    q[idx++] = p[0];\n    q[idx++] = p[1];\n    q[idx++] = p[2];\n    if (this.order === 3) {\n      q[idx++] = p[3];\n    }\n    // we lerp between all points at each iteration, until we have 1 point left.\n    while (p.length > 1) {\n      _p = [];\n      for (let i = 0, pt, l = p.length - 1; i < l; i++) {\n        pt = utils.lerp(t, p[i], p[i + 1]);\n        q[idx++] = pt;\n        _p.push(pt);\n      }\n      p = _p;\n    }\n    return q;\n  }\n\n  split(t1, t2) {\n    // shortcuts\n    if (t1 === 0 && !!t2) {\n      return this.split(t2).left;\n    }\n    if (t2 === 1) {\n      return this.split(t1).right;\n    }\n\n    // no shortcut: use "de Casteljau" iteration.\n    const q = this.hull(t1);\n    const result = {\n      left:\n        this.order === 2\n          ? new Bezier([q[0], q[3], q[5]])\n          : new Bezier([q[0], q[4], q[7], q[9]]),\n      right:\n        this.order === 2\n          ? new Bezier([q[5], q[4], q[2]])\n          : new Bezier([q[9], q[8], q[6], q[3]]),\n      span: q,\n    };\n\n    // make sure we bind _t1/_t2 information!\n    result.left._t1 = utils.map(0, 0, 1, this._t1, this._t2);\n    result.left._t2 = utils.map(t1, 0, 1, this._t1, this._t2);\n    result.right._t1 = utils.map(t1, 0, 1, this._t1, this._t2);\n    result.right._t2 = utils.map(1, 0, 1, this._t1, this._t2);\n\n    // if we have no t2, we\'re done\n    if (!t2) {\n      return result;\n    }\n\n    // if we have a t2, split again:\n    t2 = utils.map(t2, t1, 1, 0, 1);\n    return result.right.split(t2).left;\n  }\n\n  extrema() {\n    const result = {};\n    let roots = [];\n\n    this.dims.forEach(\n      function (dim) {\n        let mfn = function (v) {\n          return v[dim];\n        };\n        let p = this.dpoints[0].map(mfn);\n        result[dim] = utils.droots(p);\n        if (this.order === 3) {\n          p = this.dpoints[1].map(mfn);\n          result[dim] = result[dim].concat(utils.droots(p));\n        }\n        result[dim] = result[dim].filter(function (t) {\n          return t >= 0 && t <= 1;\n        });\n        roots = roots.concat(result[dim].sort(utils.numberSort));\n      }.bind(this)\n    );\n\n    result.values = roots.sort(utils.numberSort).filter(function (v, idx) {\n      return roots.indexOf(v) === idx;\n    });\n\n    return result;\n  }\n\n  bbox() {\n    const extrema = this.extrema(),\n      result = {};\n    this.dims.forEach(\n      function (d) {\n        result[d] = utils.getminmax(this, d, extrema[d]);\n      }.bind(this)\n    );\n    return result;\n  }\n\n  overlaps(curve) {\n    const lbbox = this.bbox(),\n      tbbox = curve.bbox();\n    return utils.bboxoverlap(lbbox, tbbox);\n  }\n\n  offset(t, d) {\n    if (typeof d !== "undefined") {\n      const c = this.get(t),\n        n = this.normal(t);\n      const ret = {\n        c: c,\n        n: n,\n        x: c.x + n.x * d,\n        y: c.y + n.y * d,\n      };\n      if (this._3d) {\n        ret.z = c.z + n.z * d;\n      }\n      return ret;\n    }\n    if (this._linear) {\n      const nv = this.normal(0),\n        coords = this.points.map(function (p) {\n          const ret = {\n            x: p.x + t * nv.x,\n            y: p.y + t * nv.y,\n          };\n          if (p.z && nv.z) {\n            ret.z = p.z + t * nv.z;\n          }\n          return ret;\n        });\n      return [new Bezier(coords)];\n    }\n    return this.reduce().map(function (s) {\n      if (s._linear) {\n        return s.offset(t)[0];\n      }\n      return s.scale(t);\n    });\n  }\n\n  simple() {\n    if (this.order === 3) {\n      const a1 = utils.angle(this.points[0], this.points[3], this.points[1]);\n      const a2 = utils.angle(this.points[0], this.points[3], this.points[2]);\n      if ((a1 > 0 && a2 < 0) || (a1 < 0 && a2 > 0)) return false;\n    }\n    const n1 = this.normal(0);\n    const n2 = this.normal(1);\n    let s = n1.x * n2.x + n1.y * n2.y;\n    if (this._3d) {\n      s += n1.z * n2.z;\n    }\n    return bezier_abs(bezier_acos(s)) < bezier_pi / 3;\n  }\n\n  reduce() {\n    // TODO: examine these var types in more detail...\n    let i,\n      t1 = 0,\n      t2 = 0,\n      step = 0.01,\n      segment,\n      pass1 = [],\n      pass2 = [];\n    // first pass: split on extrema\n    let extrema = this.extrema().values;\n    if (extrema.indexOf(0) === -1) {\n      extrema = [0].concat(extrema);\n    }\n    if (extrema.indexOf(1) === -1) {\n      extrema.push(1);\n    }\n\n    for (t1 = extrema[0], i = 1; i < extrema.length; i++) {\n      t2 = extrema[i];\n      segment = this.split(t1, t2);\n      segment._t1 = t1;\n      segment._t2 = t2;\n      pass1.push(segment);\n      t1 = t2;\n    }\n\n    // second pass: further reduce these segments to simple segments\n    pass1.forEach(function (p1) {\n      t1 = 0;\n      t2 = 0;\n      while (t2 <= 1) {\n        for (t2 = t1 + step; t2 <= 1 + step; t2 += step) {\n          segment = p1.split(t1, t2);\n          if (!segment.simple()) {\n            t2 -= step;\n            if (bezier_abs(t1 - t2) < step) {\n              // we can never form a reduction\n              return [];\n            }\n            segment = p1.split(t1, t2);\n            segment._t1 = utils.map(t1, 0, 1, p1._t1, p1._t2);\n            segment._t2 = utils.map(t2, 0, 1, p1._t1, p1._t2);\n            pass2.push(segment);\n            t1 = t2;\n            break;\n          }\n        }\n      }\n      if (t1 < 1) {\n        segment = p1.split(t1, 1);\n        segment._t1 = utils.map(t1, 0, 1, p1._t1, p1._t2);\n        segment._t2 = p1._t2;\n        pass2.push(segment);\n      }\n    });\n    return pass2;\n  }\n\n  scale(d) {\n    const order = this.order;\n    let distanceFn = false;\n    if (typeof d === "function") {\n      distanceFn = d;\n    }\n    if (distanceFn && order === 2) {\n      return this.raise().scale(distanceFn);\n    }\n\n    // TODO: add special handling for degenerate (=linear) curves.\n    const clockwise = this.clockwise;\n    const r1 = distanceFn ? distanceFn(0) : d;\n    const r2 = distanceFn ? distanceFn(1) : d;\n    const v = [this.offset(0, 10), this.offset(1, 10)];\n    const points = this.points;\n    const np = [];\n    const o = utils.lli4(v[0], v[0].c, v[1], v[1].c);\n\n    if (!o) {\n      throw new Error("cannot scale this curve. Try reducing it first.");\n    }\n    // move all points by distance \'d\' wrt the origin \'o\'\n\n    // move end points by fixed distance along normal.\n    [0, 1].forEach(function (t) {\n      const p = (np[t * order] = utils.copy(points[t * order]));\n      p.x += (t ? r2 : r1) * v[t].n.x;\n      p.y += (t ? r2 : r1) * v[t].n.y;\n    });\n\n    if (!distanceFn) {\n      // move control points to lie on the intersection of the offset\n      // derivative vector, and the origin-through-control vector\n      [0, 1].forEach((t) => {\n        if (order === 2 && !!t) return;\n        const p = np[t * order];\n        const d = this.derivative(t);\n        const p2 = { x: p.x + d.x, y: p.y + d.y };\n        np[t + 1] = utils.lli4(p, p2, o, points[t + 1]);\n      });\n      return new Bezier(np);\n    }\n\n    // move control points by "however much necessary to\n    // ensure the correct tangent to endpoint".\n    [0, 1].forEach(function (t) {\n      if (order === 2 && !!t) return;\n      var p = points[t + 1];\n      var ov = {\n        x: p.x - o.x,\n        y: p.y - o.y,\n      };\n      var rc = distanceFn ? distanceFn((t + 1) / order) : d;\n      if (distanceFn && !clockwise) rc = -rc;\n      var m = bezier_sqrt(ov.x * ov.x + ov.y * ov.y);\n      ov.x /= m;\n      ov.y /= m;\n      np[t + 1] = {\n        x: p.x + rc * ov.x,\n        y: p.y + rc * ov.y,\n      };\n    });\n    return new Bezier(np);\n  }\n\n  outline(d1, d2, d3, d4) {\n    d2 = typeof d2 === "undefined" ? d1 : d2;\n    const reduced = this.reduce(),\n      len = reduced.length,\n      fcurves = [];\n\n    let bcurves = [],\n      p,\n      alen = 0,\n      tlen = this.length();\n\n    const graduated = typeof d3 !== "undefined" && typeof d4 !== "undefined";\n\n    function linearDistanceFunction(s, e, tlen, alen, slen) {\n      return function (v) {\n        const f1 = alen / tlen,\n          f2 = (alen + slen) / tlen,\n          d = e - s;\n        return utils.map(v, 0, 1, s + f1 * d, s + f2 * d);\n      };\n    }\n\n    // form curve oulines\n    reduced.forEach(function (segment) {\n      const slen = segment.length();\n      if (graduated) {\n        fcurves.push(\n          segment.scale(linearDistanceFunction(d1, d3, tlen, alen, slen))\n        );\n        bcurves.push(\n          segment.scale(linearDistanceFunction(-d2, -d4, tlen, alen, slen))\n        );\n      } else {\n        fcurves.push(segment.scale(d1));\n        bcurves.push(segment.scale(-d2));\n      }\n      alen += slen;\n    });\n\n    // reverse the "return" outline\n    bcurves = bcurves\n      .map(function (s) {\n        p = s.points;\n        if (p[3]) {\n          s.points = [p[3], p[2], p[1], p[0]];\n        } else {\n          s.points = [p[2], p[1], p[0]];\n        }\n        return s;\n      })\n      .reverse();\n\n    // form the endcaps as lines\n    const fs = fcurves[0].points[0],\n      fe = fcurves[len - 1].points[fcurves[len - 1].points.length - 1],\n      bs = bcurves[len - 1].points[bcurves[len - 1].points.length - 1],\n      be = bcurves[0].points[0],\n      ls = utils.makeline(bs, fs),\n      le = utils.makeline(fe, be),\n      segments = [ls].concat(fcurves).concat([le]).concat(bcurves),\n      slen = segments.length;\n\n    return new PolyBezier(segments);\n  }\n\n  outlineshapes(d1, d2, curveIntersectionThreshold) {\n    d2 = d2 || d1;\n    const outline = this.outline(d1, d2).curves;\n    const shapes = [];\n    for (let i = 1, len = outline.length; i < len / 2; i++) {\n      const shape = utils.makeshape(\n        outline[i],\n        outline[len - i],\n        curveIntersectionThreshold\n      );\n      shape.startcap.virtual = i > 1;\n      shape.endcap.virtual = i < len / 2 - 1;\n      shapes.push(shape);\n    }\n    return shapes;\n  }\n\n  intersects(curve, curveIntersectionThreshold) {\n    if (!curve) return this.selfintersects(curveIntersectionThreshold);\n    if (curve.p1 && curve.p2) {\n      return this.lineIntersects(curve);\n    }\n    if (curve instanceof Bezier) {\n      curve = curve.reduce();\n    }\n    return this.curveintersects(\n      this.reduce(),\n      curve,\n      curveIntersectionThreshold\n    );\n  }\n\n  lineIntersects(line) {\n    const mx = min(line.p1.x, line.p2.x),\n      my = min(line.p1.y, line.p2.y),\n      MX = max(line.p1.x, line.p2.x),\n      MY = max(line.p1.y, line.p2.y);\n    return utils.roots(this.points, line).filter((t) => {\n      var p = this.get(t);\n      return utils.between(p.x, mx, MX) && utils.between(p.y, my, MY);\n    });\n  }\n\n  selfintersects(curveIntersectionThreshold) {\n    // "simple" curves cannot intersect with their direct\n    // neighbour, so for each segment X we check whether\n    // it intersects [0:x-2][x+2:last].\n\n    const reduced = this.reduce(),\n      len = reduced.length - 2,\n      results = [];\n\n    for (let i = 0, result, left, right; i < len; i++) {\n      left = reduced.slice(i, i + 1);\n      right = reduced.slice(i + 2);\n      result = this.curveintersects(left, right, curveIntersectionThreshold);\n      results.push(...result);\n    }\n    return results;\n  }\n\n  curveintersects(c1, c2, curveIntersectionThreshold) {\n    const pairs = [];\n    // step 1: pair off any overlapping segments\n    c1.forEach(function (l) {\n      c2.forEach(function (r) {\n        if (l.overlaps(r)) {\n          pairs.push({ left: l, right: r });\n        }\n      });\n    });\n    // step 2: for each pairing, run through the convergence algorithm.\n    let intersections = [];\n    pairs.forEach(function (pair) {\n      const result = utils.pairiteration(\n        pair.left,\n        pair.right,\n        curveIntersectionThreshold\n      );\n      if (result.length > 0) {\n        intersections = intersections.concat(result);\n      }\n    });\n    return intersections;\n  }\n\n  arcs(errorThreshold) {\n    errorThreshold = errorThreshold || 0.5;\n    return this._iterate(errorThreshold, []);\n  }\n\n  _error(pc, np1, s, e) {\n    const q = (e - s) / 4,\n      c1 = this.get(s + q),\n      c2 = this.get(e - q),\n      ref = utils.dist(pc, np1),\n      d1 = utils.dist(pc, c1),\n      d2 = utils.dist(pc, c2);\n    return bezier_abs(d1 - ref) + bezier_abs(d2 - ref);\n  }\n\n  _iterate(errorThreshold, circles) {\n    let t_s = 0,\n      t_e = 1,\n      safety;\n    // we do a binary search to find the "good `t` closest to no-longer-good"\n    do {\n      safety = 0;\n\n      // step 1: start with the maximum possible arc\n      t_e = 1;\n\n      // points:\n      let np1 = this.get(t_s),\n        np2,\n        np3,\n        arc,\n        prev_arc;\n\n      // booleans:\n      let curr_good = false,\n        prev_good = false,\n        done;\n\n      // numbers:\n      let t_m = t_e,\n        prev_e = 1,\n        step = 0;\n\n      // step 2: find the best possible arc\n      do {\n        prev_good = curr_good;\n        prev_arc = arc;\n        t_m = (t_s + t_e) / 2;\n        step++;\n\n        np2 = this.get(t_m);\n        np3 = this.get(t_e);\n\n        arc = utils.getccenter(np1, np2, np3);\n\n        //also save the t values\n        arc.interval = {\n          start: t_s,\n          end: t_e,\n        };\n\n        let error = this._error(arc, np1, t_s, t_e);\n        curr_good = error <= errorThreshold;\n\n        done = prev_good && !curr_good;\n        if (!done) prev_e = t_e;\n\n        // this arc is fine: we can move \'e\' up to see if we can find a wider arc\n        if (curr_good) {\n          // if e is already at max, then we\'re done for this arc.\n          if (t_e >= 1) {\n            // make sure we cap at t=1\n            arc.interval.end = prev_e = 1;\n            prev_arc = arc;\n            // if we capped the arc segment to t=1 we also need to make sure that\n            // the arc\'s end angle is correct with respect to the bezier end point.\n            if (t_e > 1) {\n              let d = {\n                x: arc.x + arc.r * bezier_cos(arc.e),\n                y: arc.y + arc.r * bezier_sin(arc.e),\n              };\n              arc.e += utils.angle({ x: arc.x, y: arc.y }, d, this.get(1));\n            }\n            break;\n          }\n          // if not, move it up by half the iteration distance\n          t_e = t_e + (t_e - t_s) / 2;\n        } else {\n          // this is a bad arc: we need to move \'e\' down to find a good arc\n          t_e = t_m;\n        }\n      } while (!done && safety++ < 100);\n\n      if (safety >= 100) {\n        break;\n      }\n\n      // console.log("L835: [F] arc found", t_s, prev_e, prev_arc.x, prev_arc.y, prev_arc.s, prev_arc.e);\n\n      prev_arc = prev_arc ? prev_arc : arc;\n      circles.push(prev_arc);\n      t_s = prev_e;\n    } while (t_e < 1);\n    return circles;\n  }\n}\n\n\n\n;// CONCATENATED MODULE: ./src/core/utils/constance.js\n/**\n * 方向\n * @readonly\n * @enum {number}\n */\nvar DIRECTION = {\n  /** RIGHT */\n  RIGHT: 0,\n  /** BOTTOM */\n  BOTTOM: 1,\n  /** LEFT */\n  LEFT: 2,\n  /** TOP */\n  TOP: 3,\n  /** SELF */\n  SELF: 100\n};\nfunction nextDirection(direction, clockwise) {\n  var nextDir = (direction + (clockwise ? 1 : -1)) % 4;\n  return nextDir;\n}\nfunction oppositeDirection(direction) {\n  return (direction + 2) % 4;\n}\nvar APPROXIMATE = 6;\nvar JFLOW_MODE = {\n  DEFAULT: \'DEFAULT\',\n  LINKING: \'LINKING\'\n};\nvar LINE_DIR = {\n  FROM: \'from\',\n  TO: \'to\'\n};\n;// CONCATENATED MODULE: ./src/core/utils/functions.js\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct.bind(); } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n\n\n\n/**\n * 根据点计算最小外接矩形\n * @param {number[][]} points - 点集合\n * @return {Object} demension 宽高，坐标\n */\nfunction bounding_box(points) {\n  if (points.length === 0) {\n    return {\n      width: 1,\n      height: 1,\n      x: 0,\n      y: 0\n    };\n  }\n  var min_x = Infinity;\n  var min_y = Infinity;\n  var max_x = -Infinity;\n  var max_y = -Infinity;\n  for (var idx in points) {\n    var item = points[idx];\n    if (item[0] < min_x) {\n      min_x = item[0];\n    }\n    if (item[0] > max_x) {\n      max_x = item[0];\n    }\n    if (item[1] < min_y) {\n      min_y = item[1];\n    }\n    if (item[1] > max_y) {\n      max_y = item[1];\n    }\n  }\n  return {\n    // points: [(min_x,min_y),(max_x,min_y),(max_x,max_y),(min_x,max_y)],\n    width: Math.max(max_x - min_x, 10),\n    height: Math.max(max_y - min_y, 10),\n    x: min_x,\n    y: min_y\n  };\n}\nfunction sqr(x) {\n  return x * x;\n}\nfunction dist2(v, w) {\n  return sqr(v[0] - w[0]) + sqr(v[1] - w[1]);\n}\n\n// p - point\n// v - start point of segment\n// w - end point of segment\nfunction distToSegmentSquared(p, v, w) {\n  var l2 = dist2(v, w);\n  if (l2 === 0) return dist2(p, v);\n  var t = ((p[0] - v[0]) * (w[0] - v[0]) + (p[1] - v[1]) * (w[1] - v[1])) / l2;\n  t = Math.max(0, Math.min(1, t));\n  return dist2(p, [v[0] + t * (w[0] - v[0]), v[1] + t * (w[1] - v[1])]);\n}\nfunction minIntersectionBetweenNodes(dmsfrom, dmsto) {\n  var meta = {\n    fromDir: null,\n    fromP: null,\n    toDir: null,\n    toP: null,\n    distMin: Infinity\n  };\n  Object.keys(dmsfrom).forEach(function (df) {\n    if (+df === DIRECTION.SELF) {\n      return;\n    }\n    var pf = dmsfrom[df];\n    Object.keys(dmsto).forEach(function (dt) {\n      if (+dt === DIRECTION.SELF) {\n        return;\n      }\n      var pt = dmsto[dt];\n      var dist = dist2(pf, pt);\n      if (dist < meta.distMin) {\n        Object.assign(meta, {\n          distMin: dist,\n          fromDir: +df,\n          fromP: pf,\n          toDir: +dt,\n          toP: pt\n        });\n      }\n    });\n  });\n  return meta;\n}\n\n// export function bezierPoints(p1, p2, start_dir = DIRECTION.TOP, end_dir = DIRECTION.TOP, anticlock = false) {\n//     const isSameDirection = start_dir === end_dir;\n//     const isVerticalStart = [DIRECTION.TOP, DIRECTION.BOTTOM].includes(start_dir);   \n//     const isVerticalEnd = [DIRECTION.TOP, DIRECTION.BOTTOM].includes(end_dir);\n//     const arrowspan = [DIRECTION.TOP, DIRECTION.LEFT].includes(end_dir) ? -5 : 5;\n//     const endX = isVerticalEnd ? p2[0] : p2[0] + arrowspan;\n//     const endY = isVerticalEnd ? p2[1] + arrowspan : p2[1];\n//     if(isSameDirection) {\n//         let span = Math.abs(isVerticalStart ? (endY - p1[1]) : (endX - p1[0]))\n//         span = Math.min(span, 50);\n//         const symb = [DIRECTION.RIGHT, DIRECTION.BOTTOM].includes(end_dir)\n//         span = symb ? span : - span;\n//         const cp1 = isVerticalStart ? [p1[0], p1[1] + span] : [p1[0] + span, p1[1]];\n//         const cp2 = isVerticalEnd ? [endX, endY + span] : [endX + span, endY];\n//         return [ \n//             ...cp1,\n//             ...cp2,\n//             endX, endY ];\n//     }\n//     let spanStart = (anticlock ? -5 : 1) * (isVerticalStart ? (endY - p1[1]) / 2 : (endX - p1[0]) / 2)\n//     let spanEnd = (anticlock ? -4 : 1) * (isVerticalEnd ? (p1[1] - endY) / 2 : (p1[0] - endX) / 2)\n//     let u1 = spanStart / Math.abs(spanStart);\n//     spanStart = u1 * Math.min(Math.abs(spanStart), 50);\n//     let u2 = spanEnd / Math.abs(spanEnd);\n//     spanEnd = u2 * Math.min(Math.abs(spanEnd), 50);\n//     const cp1 = isVerticalStart ? [p1[0], p1[1] + spanStart] : [p1[0] + spanStart, p1[1]];\n//     const cp2 = isVerticalEnd ? [endX, endY + spanEnd] : [endX + spanEnd, endY];\n//     return [ \n//         ...cp1,\n//         ...cp2,\n//         endX, endY ];\n// }\nfunction _resolveControlPoint(p, dir, spanx, spany) {\n  if (dir === DIRECTION.TOP) {\n    return [p[0], p[1] - spany];\n  }\n  if (dir === DIRECTION.BOTTOM) {\n    return [p[0], p[1] + spany];\n  }\n  if (dir === DIRECTION.LEFT) {\n    return [p[0] - spanx, p[1]];\n  }\n  if (dir === DIRECTION.RIGHT) {\n    return [p[0] + spanx, p[1]];\n  }\n}\nfunction bezierPoints(p1, p2) {\n  var start_dir = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DIRECTION.TOP;\n  var end_dir = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DIRECTION.TOP;\n  var minSpanX = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  var minSpanY = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n  var spanx = Math.max(Math.abs((p1[0] - p2[0]) / 2), minSpanX);\n  var spany = Math.max(Math.abs((p1[1] - p2[1]) / 2), minSpanY);\n  var cp1 = _resolveControlPoint(p1, start_dir, spanx, spany);\n  var cp2 = _resolveControlPoint(p2, end_dir, spanx, spany);\n  var arrowspan = [DIRECTION.TOP, DIRECTION.LEFT].includes(end_dir) ? -5 : 5;\n  var isVerticalEnd = [DIRECTION.TOP, DIRECTION.BOTTOM].includes(end_dir);\n  var endX = isVerticalEnd ? p2[0] : p2[0] + arrowspan;\n  var endY = isVerticalEnd ? p2[1] + arrowspan : p2[1];\n  return [].concat(_toConsumableArray(cp1), _toConsumableArray(cp2), [endX, endY]);\n}\nfunction bezierPoint(t, P) {\n  var q = 1 - t;\n  var x = q * q * q * P[0] + 3 * q * q * t * P[2] + 3 * q * t * t * P[4] + t * t * t * P[6];\n  var y = q * q * q * P[1] + 3 * q * q * t * P[3] + 3 * q * t * t * P[5] + t * t * t * P[7];\n  var u = q * q * (P[2] - P[0]) + 2 * t * q * (P[4] - P[2]) + t * t * (P[6] - P[4]);\n  var v = q * q * (P[3] - P[1]) + 2 * t * q * (P[5] - P[3]) + t * t * (P[7] - P[5]);\n  var angle = Math.atan2(v, u);\n  // console.log(angle * 180)\n  // if(angle < 0) {\n  //     angle = Math.PI + angle;\n  // }\n  return [x, y, angle];\n}\n\n// export function bezierPoints(p1, p2, start_vec, end_vec) {\n\n// }\n\nfunction distToBezierSegmentSquared(p, points) {\n  var b = _construct(Bezier, _toConsumableArray(points));\n  var point = b.project({\n    x: p[0],\n    y: p[1]\n  });\n  var d = dist2(p, [point.x, point.y]);\n  return d;\n}\nfunction getBezierAngle(t, sx, sy, cp1x, cp1y, cp2x, cp2y, ex, ey) {\n  var dx = Math.pow(1 - t, 2) * (cp1x - sx) + 2 * t * (1 - t) * (cp2x - cp1x) + t * t * (ex - cp2x);\n  var dy = Math.pow(1 - t, 2) * (cp1y - sy) + 2 * t * (1 - t) * (cp2y - cp1y) + t * t * (ey - cp2y);\n  return -Math.atan2(dx, dy) + 0.5 * Math.PI;\n}\nfunction getInstanceHeight(instance) {\n  var rect = instance.getBoundingRect();\n  // let min_y = Infinity;\n  // let max_y = -Infinity;\n  // let min_x = Infinity;\n  // let max_x = -Infinity;\n  // rect.forEach(point => {\n  //     max_y = Math.max(max_y, point[1]);\n  //     min_y = Math.min(min_y, point[1]);\n  //     max_x = Math.max(max_x, point[0]);\n  //     min_x = Math.min(min_x, point[0]);\n  // });\n  return {\n    height: rect[3] - rect[1],\n    width: rect[2] - rect[0]\n  };\n}\nfunction polylinePoints(points, p1, p2) {\n  var start_dir = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DIRECTION.TOP;\n  var end_dir = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : DIRECTION.TOP;\n  var minSpanX = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 10;\n  var minSpanY = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 10;\n  var isSelf = arguments.length > 7 ? arguments[7] : undefined;\n  var dirSpan = Math.abs(start_dir - end_dir);\n  // const spanx = Math.max(Math.abs((p1[0] - p2[0])/2), minSpanX);\n  // const spany = Math.max(Math.abs((p1[1] - p2[1])/2), minSpanY);\n  var isVerticalStart = start_dir === DIRECTION.TOP || start_dir === DIRECTION.BOTTOM;\n  points.length = 0;\n  switch (dirSpan) {\n    case 0:\n      // 都按向右好了\n      if (start_dir === DIRECTION.TOP) {\n        var y = Math.min(p1[1], p2[1]);\n        var yp = y - minSpanY;\n        points.push([p1[0], yp]);\n        points.push([p2[0], yp]);\n      }\n      if (start_dir === DIRECTION.BOTTOM) {\n        var _y = Math.max(p1[1], p2[1]);\n        var _yp = _y + minSpanY;\n        points.push([p1[0], _yp]);\n        points.push([p2[0], _yp]);\n      }\n      if (start_dir === DIRECTION.LEFT) {\n        var x = Math.min(p1[0], p2[0]);\n        var xp = x - minSpanX;\n        points.push([xp, p1[1]]);\n        points.push([xp, p2[1]]);\n      }\n      if (start_dir === DIRECTION.RIGHT) {\n        var _x = Math.max(p1[0], p2[0]);\n        var _xp = _x + minSpanX;\n        points.push([_xp, p1[1]]);\n        points.push([_xp, p2[1]]);\n      }\n      break;\n    case 1:\n    case 3:\n      if (isSelf) {\n        if (!isVerticalStart) {\n          points.push([p1[0] + minSpanX, p1[1]]);\n          points.push([p1[0] + minSpanX, p2[1] + minSpanY]);\n          points.push([p2[0], p2[1] + minSpanY]);\n        } else {\n          points.push([p1[0], p1[1] + minSpanY]);\n          points.push([p2[0] + minSpanX, p1[1] + minSpanY]);\n          points.push([p2[0] + minSpanX, p2[1]]);\n        }\n      } else {\n        var point = isVerticalStart ? [p1[0], p2[1]] : [p2[0], p1[1]];\n        points.push(point);\n      }\n      break;\n    case 2:\n      var pmiddle = [(p1[0] - p2[0]) / 2 + p2[0], (p1[1] - p2[1]) / 2 + p2[1]];\n      if (isVerticalStart) {\n        points.push([p1[0], pmiddle[1]]);\n        points.push([p2[0], pmiddle[1]]);\n      } else {\n        points.push([pmiddle[0], p1[1]]);\n        points.push([pmiddle[0], p2[1]]);\n      }\n      break;\n    default:\n      break;\n  }\n  points.unshift(p1);\n  points.push(p2);\n}\nfunction minusVec(p1, p2) {\n  return [p1[0] - p2[0], p1[1] - p2[1]];\n}\nfunction absVec(vec) {\n  return Math.sqrt(vec[0] * vec[0] + vec[1] * vec[1]);\n}\nfunction scaleVec(vec, scale) {\n  return [vec[0] * scale, vec[1] * scale];\n}\nfunction makeRadiusFromVector(pbefore, p, pnext, radius) {\n  var vec1 = minusVec(p, pbefore);\n  var vec2 = minusVec(p, pnext);\n  var absVec1 = absVec(vec1);\n  var absVec2 = absVec(vec2);\n  if (!absVec1 || !absVec2) {\n    return {\n      p1: null,\n      p2: null\n    };\n  }\n  var r1 = scaleVec(vec1, radius / absVec1);\n  var r2 = scaleVec(vec2, radius / absVec2);\n  return {\n    p1: minusVec(p, r1),\n    p2: minusVec(p, r2)\n  };\n}\n// 矩形重叠计算\nfunction doOverlap(rec1, rec2) {\n  if (rec1[0] == rec1[2] || rec1[1] == rec1[3] || rec2[0] == rec2[2] || rec2[1] == rec2[3]) {\n    // the line cannot have positive overlap\n    return false;\n  }\n  return !(rec1[2] <= rec2[0] ||\n  // left\n  rec1[3] <= rec2[1] ||\n  // bottom\n  rec1[0] >= rec2[2] ||\n  // right\n  rec1[1] >= rec2[3]); // top\n}\n\nfunction isPolyLineIntersectionRectange(polyline, rect) {\n  var p = polyline[0];\n  var l = polyline.length;\n  var i = 1;\n  var _rect = _slicedToArray(rect, 4),\n    l0 = _rect[0],\n    l1 = _rect[1],\n    r0 = _rect[2],\n    r1 = _rect[3];\n  while (i < l) {\n    var cp = polyline[i];\n    if (p[0] === cp[0]) {\n      // vertical\n      if (p[0] < r0 && p[0] > l0 && !(p[1] > r1 && cp[1] > r1 || p[1] < l1 && cp[1] < l1)) {\n        return true;\n      }\n    } else {\n      // horizontal\n      if (p[1] < r1 && p[1] > l1 && !(p[0] > r0 && cp[0] > r0 || p[0] < l0 && cp[0] < l0)) {\n        return true;\n      }\n    }\n    p = cp;\n    i++;\n  }\n  return false;\n}\nfunction debounce(func) {\n  var _this = this;\n  var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;\n  var timer;\n  return function () {\n    clearTimeout(timer);\n    timer = setTimeout(function () {\n      func.call(_this);\n    }, timeout);\n  };\n}\nfunction compareBoundingbox(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\nfunction copyBoundingbox(a, b) {\n  a[0] = b[0];\n  a[1] = b[1];\n  a[2] = b[2];\n  a[3] = b[3];\n}\n;// CONCATENATED MODULE: ./src/core/instance/instance.js\nfunction _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) instance_setPrototypeOf(subClass, superClass); }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = instance_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return instance_construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return instance_setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }\nfunction instance_construct(Parent, args, Class) { if (instance_isNativeReflectConstruct()) { instance_construct = Reflect.construct.bind(); } else { instance_construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) instance_setPrototypeOf(instance, Class.prototype); return instance; }; } return instance_construct.apply(null, arguments); }\nfunction instance_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }\nfunction instance_setPrototypeOf(o, p) { instance_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return instance_setPrototypeOf(o, p); }\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n// import { setUniqueId, getUniqueId } from \'../utils/functions\';\n// import { nextDirection } from \'../utils/constance\';\n// const margin = 5;\nvar ishitKey = Symbol(\'ishit\');\nvar isInViewBox = Symbol(\'isInViewBox\');\n/**\n * @typedef Instance~Configs\n * @type {object}\n * @property {number} borderWidth      - 边的宽度 默认是 2\n * @property {string} borderColor      - 边框颜色 默认 black\n * @property {string} color            - 填充颜色 默认 white\n * @property {string} shadowColor      - 阴影颜色\n * @property {string} shadowBlur       - 阴影扩散范围\n * @property {string} shadowOffsetX    - 阴影偏移 X\n * @property {string} shadowOffsetX    - 阴影偏移 Y\n */\n\n/** \n * 图中的最小单元\n * @constructor Instance\n * @extends EventTarget\n * @param {Instance~Configs} configs - 最小单元的一些通用属性配置\n */\nvar Instance = /*#__PURE__*/function (_EventTarget) {\n  _inherits(Instance, _EventTarget);\n  var _super = _createSuper(Instance);\n  function Instance() {\n    var _this;\n    var configs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _classCallCheck(this, Instance);\n    _this = _super.call(this);\n    Object.assign(_assertThisInitialized(_this), configs);\n    // this.anchor = configs.anchor || [0, 0];\n    // this.belongs = undefined;\n    /** @member {boolean}      - 元素可见 默认 true */\n    _this.visible = true;\n    // this._jflow = undefined;\n    _this._belongs = undefined;\n    _this[ishitKey] = false;\n\n    /** @member {number}      - 边的宽度 默认是 0 */\n    _this.borderWidth = configs.borderWidth || 0;\n    /** @member {string}     - 边框颜色 默认 transparent */\n    _this.borderColor = configs.borderColor || \'transparent\';\n    /** @member {string}     - 填充颜色 默认 transparent */\n    _this.backgroundColor = configs.backgroundColor || \'transparent\';\n    /** @member {string}     - 阴影颜色 空就不显示阴影 */\n    _this.shadowColor = configs.shadowColor;\n    /** @member {string}     - 阴影扩散范围 默认 5 */\n    _this.shadowBlur = configs.shadowBlur || 5;\n    /** @member {string}     - 阴影偏移 X */\n    _this.shadowOffsetX = configs.shadowOffsetX || 0;\n    /** @member {string}     - 阴影偏移 Y */\n    _this.shadowOffsetY = configs.shadowOffsetY || 0;\n    /** @member {number}     - 透明度 */\n    _this.opacity = configs.opacity || 1;\n    _this._boundingrect = [0, 0, 0, 0];\n    return _this;\n  }\n  /**\n   * @member {boolean} - 当前单元选中状态\n   */\n  _createClass(Instance, [{\n    key: "_isTargeting",\n    get: function get() {\n      return this === (this._jflow._target.instance || this._jflow._target.link);\n    }\n    /**\n     * @member {boolean} - 当前单元移动状态\n     */\n  }, {\n    key: "_isMoving",\n    get: function get() {\n      return this === this._jflow._getMovingTarget() && this._jflow._target.status.movingState; // 移动了之后才能被当做移动状态\n    }\n    /**\n     * @member {boolean}  - 当前单元碰撞检测状态\n     */\n  }, {\n    key: "_isHit",\n    get: function get() {\n      return this[ishitKey];\n    }\n    /**\n     * @member {JFlow}  - canvas上 jflow 实体\n     */,\n    set: function set(ishit) {\n      if (this[ishitKey] !== ishit) {\n        /**\n         * 鼠标移入事件\n         *\n         * @event Instance#mouseenter\n         * @type {object}\n         * @property {Instance} instance      - 移入的对象 \n         */\n        /**\n         * 鼠标移出事件\n         *\n         * @event Instance#mouseleave\n         * @type {object}\n         * @property {Instance} instance      - 移入的对象 \n         */\n        this.dispatchEvent(new CustomEvent(ishit ? \'mouseenter\' : \'mouseleave\', {\n          detail: {\n            instance: this,\n            jflow: this._jflow\n          }\n        }));\n      }\n      this[ishitKey] = ishit; // validation could be checked here such as only allowing non numerical values\n    }\n  }, {\n    key: "_jflow",\n    get: function get() {\n      if (this._jflowRoot) {\n        return this._jflowRoot;\n      }\n      if (!this._belongs) {\n        return undefined;\n      }\n      return this._belongs.uniqueName === \'jflow\' ? this._belongs : this._belongs._jflow;\n    }\n  }, {\n    key: "isInViewBox",\n    get: function get() {\n      return this[isInViewBox];\n    }\n  }, {\n    key: "_isInViewBox",\n    set: function set(val) {\n      var oldval = this[isInViewBox];\n      if (val !== oldval) {\n        if (val) {\n          this.onEnterViewbox();\n        } else {\n          this.onLeaveViewbox();\n        }\n      }\n      this[isInViewBox] = val;\n    }\n\n    /**\n     * 当节点离开可视区域的回调\n     */\n  }, {\n    key: "onEnterViewbox",\n    value: function onEnterViewbox() {\n      return;\n    }\n\n    /**\n     * 当节点离开可视区域的回调\n     */\n  }, {\n    key: "onLeaveViewbox",\n    value: function onLeaveViewbox() {\n      return;\n    }\n\n    /**\n     * 改变当前配置\n     * @param {Configs} configs - The string containing two comma-separated numbers.\n     */\n  }, {\n    key: "setConfig",\n    value: function setConfig(configs) {\n      var _this2 = this;\n      Object.keys(configs).forEach(function (k) {\n        if (configs[k] !== undefined && configs[k] !== null) {\n          _this2[k] = configs[k];\n        }\n      });\n    }\n    /**\n     * 绘制单元\n     * @param {Context2d} ctx \n     */\n  }, {\n    key: "render",\n    value: function render(ctx) {\n      throw \'require render implement\';\n    }\n    /**\n     * 判断当前单元是否被命中\n     * @param {number[]} point \n     * @return {Boolean}\n     */\n  }, {\n    key: "isHit",\n    value: function isHit(point) {\n      throw \'require isHit implement\';\n    }\n    /**\n     * 计算当前的最大外接矩形的\n     * @return {number[]} [leftx, lefty, rightx, righty]\n     */\n  }, {\n    key: "getBoundingRect",\n    value: function getBoundingRect() {\n      throw \'require getBoundingRect implement\';\n    }\n  }, {\n    key: "calculateIntersection",\n    value: function calculateIntersection() {\n      throw \'require calculateIntersection implement\';\n    }\n    /**\n     * 计算当前连线接入点的位置\n     * @return {Object} intersection 交叉点\n     * @return {number} intersection[DIRECTION.TOP] 上\n     * @return {number} intersection[DIRECTION.BOTTOM] 下\n     * @return {number} intersection[DIRECTION.LEFT] 上\n     * @return {number} intersection[DIRECTION.RIGHT] 右\n     */\n  }, {\n    key: "getIntersectionsInFourDimension",\n    value: function getIntersectionsInFourDimension() {\n      throw \'require getIntersectionsInFourDimension implement\';\n    }\n\n    /**\n     * 获取当前所在层级的坐标\n     * @return {Number[]} 坐标\n     */\n  }, {\n    key: "getCenter",\n    value: function getCenter() {\n      return this.anchor;\n    }\n    /**\n     * 获取宽高\n     * @return {Object} demension 宽高\n     * @return {number} demension.width 宽\n     * @return {number} demension.height 高\n     */\n  }, {\n    key: "getBoundingDimension",\n    value: function getBoundingDimension() {\n      var rect = instance.getBoundingRect();\n      var min_y = Infinity;\n      var max_y = -Infinity;\n      var min_x = Infinity;\n      var max_x = -Infinity;\n      rect.forEach(function (point) {\n        max_y = Math.max(max_y, point[1]);\n        min_y = Math.min(min_y, point[1]);\n        max_x = Math.max(max_x, point[0]);\n        min_x = Math.min(min_x, point[0]);\n      });\n      return {\n        height: max_y - min_y,\n        width: max_x - min_x\n      };\n    }\n    /**\n     * 冒泡事件\n     * @param {JFlowEvent} customEvent 自定义事件\n     */\n  }, {\n    key: "bubbleEvent",\n    value: function bubbleEvent(customEvent) {\n      customEvent.detail.currentTarget = this;\n      this.dispatchEvent(customEvent);\n      if (customEvent.detail.bubbles) {\n        if (this._belongs.bubbleEvent) {\n          this._belongs.bubbleEvent(customEvent);\n        } else {\n          this._belongs.dispatchEvent(customEvent);\n        }\n      }\n    }\n    /**\n     * 反算回页面的像素坐标\n     * @param {Number[]} point\n     * @return {Number[]} 世界坐标\n     */\n  }, {\n    key: "calculateToRealWorld",\n    value: function calculateToRealWorld(point) {\n      if (this._belongs && this._belongs.calculateToRealWorld) {\n        return this._belongs.calculateToRealWorld(point);\n      } else {\n        return point;\n      }\n    }\n  }, {\n    key: "calculateToRealWorldWithPointer",\n    value: function calculateToRealWorldWithPointer(outpoint, inpoint) {\n      if (this._belongs && this._belongs.calculateToRealWorldWithPointer) {\n        this._belongs.calculateToRealWorldWithPointer(outpoint, inpoint);\n      }\n    }\n  }, {\n    key: "calculateToRealWorldWithScalar",\n    value: function calculateToRealWorldWithScalar(length) {\n      return this._jflow.scale * length;\n    }\n\n    /**\n     * 从当前布局中删除虚拟布局节点\n     */\n    // removeFromLayoutSource() {\n    //     if(this._layoutNode) {\n    //         this._layoutNode.remove();\n    //     }\n    // }\n  }, {\n    key: "recalculateUp",\n    value: function recalculateUp() {\n      if (this._belongs) {\n        this._belongs.recalculateUp();\n      }\n    }\n  }, {\n    key: "destroy",\n    value: function destroy() {\n      // this._belongs = undefined;\n      // this.removeEventListener();\n    }\n  }]);\n  return Instance;\n}( /*#__PURE__*/_wrapNativeSuper(EventTarget));\n/* harmony default export */ const instance_instance = (Instance);\n;// CONCATENATED MODULE: ./src/core/dirty-work/dirty-work.js\nfunction dirty_work_slicedToArray(arr, i) { return dirty_work_arrayWithHoles(arr) || dirty_work_iterableToArrayLimit(arr, i) || dirty_work_unsupportedIterableToArray(arr, i) || dirty_work_nonIterableRest(); }\nfunction dirty_work_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction dirty_work_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return dirty_work_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return dirty_work_arrayLikeToArray(o, minLen); }\nfunction dirty_work_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction dirty_work_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction dirty_work_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nvar queue = [];\nvar clearQueue = [];\nvar queueSet = new WeakSet();\nvar checkWork = function checkWork(target) {\n  return queueSet.has(target);\n};\nvar getStackPath = function getStackPath(node) {\n  var t = node;\n  var exp = 1;\n  var p = \'\';\n  while (t && t._belongs) {\n    var idx = t._belongs._stack.findIndex(function (n) {\n      return n === t;\n    });\n    p = idx + (p && \'.\' + p);\n    t = t._belongs;\n  }\n  return p;\n};\nvar sortByPath = function sortByPath() {\n  var map = new WeakMap();\n  queue.sort(function (a, b) {\n    var apath = map.get(a);\n    if (apath === undefined) {\n      apath = getStackPath(a);\n      map.set(a, apath);\n    }\n    var bpath = map.get(b);\n    if (bpath === undefined) {\n      bpath = getStackPath(b);\n      map.set(b, bpath);\n    }\n    var _a = apath.split(\'.\');\n    var _b = bpath.split(\'.\');\n    if (_a.length < _b.length) {\n      return 1;\n    }\n    if (_a.length > _b.length) {\n      return -1;\n    }\n    for (var i = 0; i < _a.length; i++) {\n      var _p = +_a[i];\n      var _q = +_b[i];\n      if (_p < _q) {\n        return 1;\n      }\n      if (_p > _q) {\n        return -1;\n      }\n    }\n    return 0;\n  });\n};\nvar addClearSourceWork = function addClearSourceWork(jflow, source) {\n  clearQueue.push([jflow, source]);\n};\n\n// work is sync function!!\nvar dirty_work_addReflowWork = function addReflowWork(target, parent) {\n  if (target.doRecalculate) {\n    if (!queueSet.has(target)) {\n      queue.push(target);\n      queueSet.add(target);\n    }\n  }\n  if (parent && parent.doRecalculate && !queueSet.has(parent)) {\n    queue.push(parent);\n    queueSet.add(parent);\n  }\n\n  // if(target.doRecalculate) {\n  //     if(!checkWork(target)) {\n  //         queue.push(target);\n  //         queueSet.add(target);\n  //     }\n  // }  \n  // if(parent) {\n  //     if(checkWork(parent)) {\n  //         const idx = queue.findIndex(p => p === parent);\n  //         queue.splice(idx, 1);\n  //         queue.push(parent);\n  //     } else {\n  //         queue.push(parent);\n  //         queueSet.add(parent);\n  //     }\n\n  // }\n  flush();\n};\nvar inFlush = false;\nvar flush = function flush() {\n  if (inFlush) {\n    return;\n  }\n  inFlush = true;\n  requestAnimationFrame(function () {\n    var roots = new Set();\n    sortByPath();\n    while (queue.length) {\n      var target = queue.shift();\n      if (target.doRecalculate && target._jflow) {\n        target.doRecalculate();\n        roots.add(target._jflow);\n      }\n      // console.log(target.width, target.height)\n    }\n\n    while (clearQueue.length) {\n      var _clearQueue$shift = clearQueue.shift(),\n        _clearQueue$shift2 = dirty_work_slicedToArray(_clearQueue$shift, 2),\n        jflow = _clearQueue$shift2[0],\n        source = _clearQueue$shift2[1];\n      if (!jflow.getRenderNodeBySource(source)) {\n        jflow.clearSource(source);\n      }\n    }\n    // console.log(\'-----dirty---flush-----\')\n    queueSet = new WeakSet();\n    inFlush = false;\n    Array.from(roots).forEach(function (jflow) {\n      jflow._render();\n    });\n  });\n};\n;// CONCATENATED MODULE: ./src/core/instance/node.js\nfunction node_typeof(obj) { "@babel/helpers - typeof"; return node_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, node_typeof(obj); }\nfunction node_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction node_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, node_toPropertyKey(descriptor.key), descriptor); } }\nfunction node_createClass(Constructor, protoProps, staticProps) { if (protoProps) node_defineProperties(Constructor.prototype, protoProps); if (staticProps) node_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction node_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) node_setPrototypeOf(subClass, superClass); }\nfunction node_setPrototypeOf(o, p) { node_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return node_setPrototypeOf(o, p); }\nfunction node_createSuper(Derived) { var hasNativeReflectConstruct = node_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = node_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = node_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return node_possibleConstructorReturn(this, result); }; }\nfunction node_possibleConstructorReturn(self, call) { if (call && (node_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return node_assertThisInitialized(self); }\nfunction node_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction node_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction node_getPrototypeOf(o) { node_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return node_getPrototypeOf(o); }\nfunction _defineProperty(obj, key, value) { key = node_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction node_toPropertyKey(arg) { var key = node_toPrimitive(arg, "string"); return node_typeof(key) === "symbol" ? key : String(key); }\nfunction node_toPrimitive(input, hint) { if (node_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (node_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\n/**\n * 绝对定位 配置， 绝对定位不受布局影响，相对于当前组来定位\n * @typedef {object} Node~AbsolutePosition \n * @property {number} top       - 上距离\n * @property {number} bottom    - 下距离\n * @property {number} right     - 右距离\n * @property {number} left      - 左距离\n */\n/**\n * Node 配置\n * @typedef {Instance~Configs} Node~Configs \n * @property {number[]} anchor - 坐标\n * @property {Node~AbsolutePosition} absolutePosition - 绝对定位位置\n */\n/**\n * 节点基类\n * @constructor Node\n * @extends Instance\n * @param {Node~Configs} configs - 节点配置\n */\nvar Node = /*#__PURE__*/function (_Instance) {\n  node_inherits(Node, _Instance);\n  var _super = node_createSuper(Node);\n  function Node() {\n    var _this;\n    var configs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    node_classCallCheck(this, Node);\n    _this = _super.call(this, configs);\n    _defineProperty(node_assertThisInitialized(_this), "INSTANCE_TYPE", \'NODE\');\n    _this._rawConfigs = configs;\n    // for layout\n    /** @member {number[]} */\n    _this.anchor = configs.anchor || [0, 0];\n    /** @member {Node~AbsolutePosition} */\n    _this.absolutePosition = configs.absolutePosition;\n    return _this;\n  }\n  node_createClass(Node, [{\n    key: "nextSibling",\n    get: function get() {\n      var _this2 = this;\n      if (!this._belongs) {\n        return null;\n      }\n      var stack = this._belongs._stack;\n      var idx = stack.findIndex(function (s) {\n        return s === _this2;\n      });\n      if (idx !== -1) {\n        return stack[idx + 1];\n      }\n      return null;\n    }\n  }, {\n    key: "setConfig",\n    value: function setConfig(configs) {\n      var _this3 = this;\n      Object.keys(configs).forEach(function (k) {\n        if (configs[k] !== undefined && configs[k] !== null) {\n          _this3[k] = configs[k];\n          _this3._rawConfigs[k] = configs[k];\n        }\n      });\n    }\n  }, {\n    key: "setAnchorX",\n    value: function setAnchorX(x) {\n      this.anchor[0] = x;\n    }\n  }, {\n    key: "setAnchorY",\n    value: function setAnchorY(y) {\n      this.anchor[1] = y;\n    }\n  }, {\n    key: "setAnchor",\n    value: function setAnchor(x, y) {\n      this.anchor[0] = x;\n      this.anchor[1] = y;\n    }\n  }, {\n    key: "beforeRender",\n    value: function beforeRender() {\n      return doOverlap(this._belongs._getViewBox(), this.getBoundingRect());\n    }\n  }, {\n    key: "addReflowWork",\n    value: function addReflowWork() {\n      dirty_work_addReflowWork(this, this._belongs);\n    }\n\n    /**\n     * 克隆当前节点.\n     * @return {Node} 当前节点的副本\n     */\n  }, {\n    key: "clone",\n    value: function clone() {\n      var C = this.constructor;\n      var t = new C(this._rawConfigs);\n      t.visible = this.visible;\n      return t;\n    }\n  }]);\n  return Node;\n}(instance_instance);\n/* harmony default export */ const node = (Node);\n;// CONCATENATED MODULE: ./src/core/instance/ghostNode.js\nfunction ghostNode_typeof(obj) { "@babel/helpers - typeof"; return ghostNode_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, ghostNode_typeof(obj); }\nfunction ghostNode_defineProperty(obj, key, value) { key = ghostNode_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction ghostNode_slicedToArray(arr, i) { return ghostNode_arrayWithHoles(arr) || ghostNode_iterableToArrayLimit(arr, i) || ghostNode_unsupportedIterableToArray(arr, i) || ghostNode_nonIterableRest(); }\nfunction ghostNode_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction ghostNode_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return ghostNode_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return ghostNode_arrayLikeToArray(o, minLen); }\nfunction ghostNode_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction ghostNode_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction ghostNode_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction ghostNode_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction ghostNode_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, ghostNode_toPropertyKey(descriptor.key), descriptor); } }\nfunction ghostNode_createClass(Constructor, protoProps, staticProps) { if (protoProps) ghostNode_defineProperties(Constructor.prototype, protoProps); if (staticProps) ghostNode_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction ghostNode_toPropertyKey(arg) { var key = ghostNode_toPrimitive(arg, "string"); return ghostNode_typeof(key) === "symbol" ? key : String(key); }\nfunction ghostNode_toPrimitive(input, hint) { if (ghostNode_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (ghostNode_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction ghostNode_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) ghostNode_setPrototypeOf(subClass, superClass); }\nfunction ghostNode_setPrototypeOf(o, p) { ghostNode_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return ghostNode_setPrototypeOf(o, p); }\nfunction ghostNode_createSuper(Derived) { var hasNativeReflectConstruct = ghostNode_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = ghostNode_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = ghostNode_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return ghostNode_possibleConstructorReturn(this, result); }; }\nfunction ghostNode_possibleConstructorReturn(self, call) { if (call && (ghostNode_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return ghostNode_assertThisInitialized(self); }\nfunction ghostNode_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction ghostNode_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction ghostNode_getPrototypeOf(o) { ghostNode_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return ghostNode_getPrototypeOf(o); }\n\n\nvar GhostNode = /*#__PURE__*/function (_Node) {\n  ghostNode_inherits(GhostNode, _Node);\n  var _super = ghostNode_createSuper(GhostNode);\n  function GhostNode(configs) {\n    ghostNode_classCallCheck(this, GhostNode);\n    return _super.call(this, configs);\n  }\n  ghostNode_createClass(GhostNode, [{\n    key: "render",\n    value: function render(ctx) {}\n  }, {\n    key: "isHit",\n    value: function isHit(point) {\n      return false;\n    }\n  }, {\n    key: "calculateIntersection",\n    value: function calculateIntersection(point) {\n      return this.anchor;\n    }\n  }, {\n    key: "getBoundingRect",\n    value: function getBoundingRect() {\n      var _this$anchor = ghostNode_slicedToArray(this.anchor, 2),\n        x2 = _this$anchor[0],\n        y2 = _this$anchor[1];\n      return [x2, y2, x2, y2];\n    }\n  }, {\n    key: "getBoundingDimension",\n    value: function getBoundingDimension() {\n      return {\n        width: 0,\n        height: 0\n      };\n    }\n  }, {\n    key: "getIntersectionsInFourDimension",\n    value: function getIntersectionsInFourDimension() {\n      var _ref;\n      var _this$anchor2 = ghostNode_slicedToArray(this.anchor, 2),\n        x2 = _this$anchor2[0],\n        y2 = _this$anchor2[1];\n      return _ref = {}, ghostNode_defineProperty(_ref, DIRECTION.RIGHT, [x2 + 1, y2]), ghostNode_defineProperty(_ref, DIRECTION.LEFT, [x2 - 1, y2]), ghostNode_defineProperty(_ref, DIRECTION.BOTTOM, [x2, y2 + 1]), ghostNode_defineProperty(_ref, DIRECTION.TOP, [x2, y2 - 1]), _ref;\n    }\n  }]);\n  return GhostNode;\n}(node);\n/* harmony default export */ const ghostNode = (GhostNode);\n;// CONCATENATED MODULE: ./src/core/instance/nodeWeakMap.js\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { nodeWeakMap_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction nodeWeakMap_defineProperty(obj, key, value) { key = nodeWeakMap_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction nodeWeakMap_typeof(obj) { "@babel/helpers - typeof"; return nodeWeakMap_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, nodeWeakMap_typeof(obj); }\nfunction nodeWeakMap_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction nodeWeakMap_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, nodeWeakMap_toPropertyKey(descriptor.key), descriptor); } }\nfunction nodeWeakMap_createClass(Constructor, protoProps, staticProps) { if (protoProps) nodeWeakMap_defineProperties(Constructor.prototype, protoProps); if (staticProps) nodeWeakMap_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction nodeWeakMap_toPropertyKey(arg) { var key = nodeWeakMap_toPrimitive(arg, "string"); return nodeWeakMap_typeof(key) === "symbol" ? key : String(key); }\nfunction nodeWeakMap_toPrimitive(input, hint) { if (nodeWeakMap_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (nodeWeakMap_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction getMapObject() {\n  return {\n    layoutNode: undefined,\n    jflowNode: undefined,\n    jflowlinks: [],\n    jflowFromLinks: new Set(),\n    jflowToLinks: new Set()\n  };\n}\nvar NodeWeakMap = /*#__PURE__*/function () {\n  function NodeWeakMap() {\n    nodeWeakMap_classCallCheck(this, NodeWeakMap);\n    this._map = new Map();\n  }\n  nodeWeakMap_createClass(NodeWeakMap, [{\n    key: "get",\n    value: function get(source) {\n      return this._map.get(source);\n    }\n  }, {\n    key: "set",\n    value: function set(source) {\n      var obj = getMapObject();\n      this._map.set(source, obj);\n      return obj;\n    }\n  }, {\n    key: "has",\n    value: function has(source) {\n      return this._map.has(source);\n    }\n  }, {\n    key: "delete",\n    value: function _delete(source) {\n      this._map["delete"](source);\n    }\n  }, {\n    key: "clear",\n    value: function clear() {\n      this._map.clear();\n    }\n  }]);\n  return NodeWeakMap;\n}();\nvar NodeWeakMapMixin = {\n  initNodeWeakMap: function initNodeWeakMap() {\n    this.source_Layout_Render_NodeMap = new NodeWeakMap();\n  },\n  getRenderNodeBySource: function getRenderNodeBySource(source) {\n    var mapping = this.source_Layout_Render_NodeMap.get(source);\n    if (mapping) {\n      return mapping.jflowNode;\n    }\n    return undefined;\n  },\n  removeRenderNodeBySource: function removeRenderNodeBySource(source, instance) {\n    var map = this.source_Layout_Render_NodeMap;\n    var obj = map.get(source);\n    if (obj && obj.jflowNode === instance) {\n      obj.jflowNode = undefined;\n    }\n    if (obj && obj.jflowFromLinks.size === 0 && obj.jflowToLinks.size === 0) {\n      this.source_Layout_Render_NodeMap["delete"](source);\n    }\n  },\n  getLayoutNodeBySource: function getLayoutNodeBySource(source) {\n    var mapping = this.source_Layout_Render_NodeMap.get(source);\n    if (mapping) {\n      return mapping.layoutNode;\n    }\n    return undefined;\n  },\n  getSourceRenderMeta: function getSourceRenderMeta(source) {\n    var map = this.source_Layout_Render_NodeMap;\n    var _meta = map.get(source);\n    if (!_meta) {\n      return null;\n    }\n    return _objectSpread(_objectSpread({}, _meta), {}, {\n      jflowFromLinks: Array.from(_meta.jflowFromLinks),\n      jflowToLinks: Array.from(_meta.jflowToLinks)\n    });\n  },\n  _getMap: function _getMap(source) {\n    if (!source) {\n      return null;\n    }\n    var map = this.source_Layout_Render_NodeMap;\n    var obj;\n    if (map.has(source)) {\n      obj = map.get(source);\n    } else {\n      obj = map.set(source);\n    }\n    return obj;\n  },\n  setLayoutNodeBySource: function setLayoutNodeBySource(source, layoutNode) {\n    var obj = this._getMap(source);\n    obj.layoutNode = layoutNode;\n  },\n  setRenderNodeBySource: function setRenderNodeBySource(source, instance) {\n    var obj = this._getMap(source);\n    obj.jflowNode = instance;\n    if (obj.jflowFromLinks.size > 0) {\n      obj.jflowFromLinks.forEach(function (link) {\n        link.from = instance;\n      });\n    }\n    if (obj.jflowToLinks.size > 0) {\n      obj.jflowToLinks.forEach(function (link) {\n        link.to = instance;\n      });\n    }\n  },\n  addLinkNodeBySource: function addLinkNodeBySource(sourceFrom, sourceTo, link) {\n    var obj = this._getMap(sourceFrom);\n    obj.jflowFromLinks.add(link);\n    obj = this._getMap(sourceTo);\n    obj.jflowToLinks.add(link);\n  },\n  removeLinkNodeBySource: function removeLinkNodeBySource(sourceFrom, sourceTo, link) {\n    var map = this.source_Layout_Render_NodeMap;\n    var obj = map.get(sourceFrom);\n    if (obj) {\n      obj.jflowFromLinks["delete"](link);\n      if (obj.jflowFromLinks.size === 0 && obj.jflowToLinks.size === 0 && !obj.jflowNode) {\n        this.source_Layout_Render_NodeMap["delete"](sourceFrom);\n      }\n    }\n    obj = map.get(sourceTo);\n    if (obj) {\n      obj.jflowToLinks["delete"](link);\n      if (obj.jflowFromLinks.size === 0 && obj.jflowToLinks.size === 0 && !obj.jflowNode) {\n        this.source_Layout_Render_NodeMap["delete"](sourceTo);\n      }\n    }\n  },\n  changeLinkNodeBySource: function changeLinkNodeBySource(prevSource, nextSource, link, dir) {\n    var obj = this._getMap(prevSource);\n    if (obj) {\n      if (dir === \'from\') {\n        obj.jflowFromLinks["delete"](link);\n      }\n      if (dir === \'to\') {\n        obj.jflowToLinks["delete"](link);\n      }\n    }\n    obj = this._getMap(nextSource);\n    if (obj) {\n      if (dir === \'from\') {\n        obj.jflowFromLinks.add(link);\n        if (obj.jflowNode) {\n          link.from = obj.jflowNode;\n        }\n      }\n      if (dir === \'to\') {\n        obj.jflowToLinks.add(link);\n        if (obj.jflowNode) {\n          link.to = obj.jflowNode;\n        }\n      }\n    }\n  },\n  changeNodeBySource: function changeNodeBySource(prevSource, nextSource, instance) {\n    if (prevSource && nextSource) {\n      var oldobj = this._getMap(prevSource);\n      var newobj = this._getMap(nextSource);\n      newobj.jflowNode = instance;\n      oldobj.jflowFromLinks.forEach(function (link) {\n        newobj.jflowFromLinks.add(link);\n      });\n      oldobj.jflowToLinks.forEach(function (link) {\n        newobj.jflowFromLinks.add(link);\n      });\n      newobj.jflowFromLinks.forEach(function (link) {\n        link.from = instance;\n      });\n      newobj.jflowToLinks.forEach(function (link) {\n        link.to = instance;\n      });\n      this.source_Layout_Render_NodeMap["delete"](prevSource);\n    }\n  }\n};\n/* harmony default export */ const nodeWeakMap = ((/* unused pure expression or super */ null && (NodeWeakMap)));\n;// CONCATENATED MODULE: ./src/core/instance/stack.js\nfunction stack_typeof(obj) { "@babel/helpers - typeof"; return stack_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, stack_typeof(obj); }\nfunction stack_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction stack_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, stack_toPropertyKey(descriptor.key), descriptor); } }\nfunction stack_createClass(Constructor, protoProps, staticProps) { if (protoProps) stack_defineProperties(Constructor.prototype, protoProps); if (staticProps) stack_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction stack_toPropertyKey(arg) { var key = stack_toPrimitive(arg, "string"); return stack_typeof(key) === "symbol" ? key : String(key); }\nfunction stack_toPrimitive(input, hint) { if (stack_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (stack_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = stack_getPrototypeOf(object); if (object === null) break; } return object; }\nfunction stack_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) stack_setPrototypeOf(subClass, superClass); }\nfunction stack_createSuper(Derived) { var hasNativeReflectConstruct = stack_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = stack_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = stack_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return stack_possibleConstructorReturn(this, result); }; }\nfunction stack_possibleConstructorReturn(self, call) { if (call && (stack_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return stack_assertThisInitialized(self); }\nfunction stack_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction stack_wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; stack_wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !stack_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return stack_construct(Class, arguments, stack_getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return stack_setPrototypeOf(Wrapper, Class); }; return stack_wrapNativeSuper(Class); }\nfunction stack_construct(Parent, args, Class) { if (stack_isNativeReflectConstruct()) { stack_construct = Reflect.construct.bind(); } else { stack_construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) stack_setPrototypeOf(instance, Class.prototype); return instance; }; } return stack_construct.apply(null, arguments); }\nfunction stack_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction stack_isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }\nfunction stack_setPrototypeOf(o, p) { stack_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return stack_setPrototypeOf(o, p); }\nfunction stack_getPrototypeOf(o) { stack_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return stack_getPrototypeOf(o); }\n// import { NodePlaceholder } from \'./node-placeholder\';\n/**\n * 绘图栈\n * @extends Array\n */\nvar InstanceStack = /*#__PURE__*/function (_Array) {\n  stack_inherits(InstanceStack, _Array);\n  var _super = stack_createSuper(InstanceStack);\n  function InstanceStack() {\n    var _this;\n    stack_classCallCheck(this, InstanceStack);\n    _this = _super.call(this);\n    _this._currentHit = null;\n    return _this;\n  }\n  stack_createClass(InstanceStack, [{\n    key: "forEach",\n    value: function forEach(cb) {\n      return _get(stack_getPrototypeOf(InstanceStack.prototype), "forEach", this).call(this, function (i, idx) {\n        if (i.type === \'NODE_PLACEHOLDER\') {\n          return;\n        }\n        cb(i, idx);\n      });\n    }\n  }, {\n    key: "filter",\n    value: function filter(cb) {\n      return Array.from(_get(stack_getPrototypeOf(InstanceStack.prototype), "filter", this).call(this, function (i, idx) {\n        if (i.type === \'NODE_PLACEHOLDER\') {\n          return false;\n        }\n        return cb(i, idx);\n      }));\n    }\n  }, {\n    key: "slice",\n    value: function slice() {\n      return Array.from(_get(stack_getPrototypeOf(InstanceStack.prototype), "filter", this).call(this, function (i, idx) {\n        return i.type !== \'NODE_PLACEHOLDER\';\n      }));\n    }\n  }, {\n    key: "superfilter",\n    value: function superfilter(cb) {\n      return _get(stack_getPrototypeOf(InstanceStack.prototype), "filter", this).call(this, function (i, idx) {\n        return cb(i, idx);\n      });\n    }\n    /**\n     * 绘制当前栈\n     * @param {Context2d} ctx - canvas context2d\n     */\n  }, {\n    key: "render",\n    value: function render(ctx, condition) {\n      var movingTarget;\n      this.forEach(function (instance) {\n        if (instance._isMoving) {\n          movingTarget = instance;\n          return;\n        }\n        if (instance.visible && (!condition || condition(instance))) {\n          if (instance.beforeRender) {\n            if (!instance.beforeRender(ctx)) {\n              return;\n            }\n          }\n          ctx.save();\n          instance.render(ctx);\n          ctx.restore();\n        }\n      });\n      if (movingTarget) {\n        ctx.save();\n        // if(movingTarget.reflow && !movingTarget._reflowed) {\n        //     movingTarget.reflow();\n        //     movingTarget._reflowed = true;\n        // }\n        movingTarget.render(ctx);\n        ctx.restore();\n      }\n    }\n  }, {\n    key: "resetHitStatus",\n    value: function resetHitStatus() {\n      this._currentHit = null;\n      this.forEach(function (i) {\n        if (i._stack) {\n          i._stack.resetHitStatus();\n        }\n        i._isHit = false;\n      });\n    }\n\n    /**\n     * 碰撞对象过滤条件\n     * @name InstanceStack~InstanceFilter\n     * @function\n     * @param {Instance} instance - 当前对象\n    */\n    /**\n     * 碰撞检测\n     * @param {number[]} point - 碰撞点\n     * @param {InstanceStack~InstanceFilter} condition - 碰撞对象过滤条件\n     * @return {Instance}\n     */\n  }, {\n    key: "checkHit",\n    value: function checkHit(point, condition, currentConstraint) {\n      var i = this.length - 1;\n      while (i >= 0) {\n        var instance = this[i];\n        if (instance.type === \'NODE_PLACEHOLDER\') {\n          i--;\n          continue;\n        }\n        if (instance.visible && !instance.ignoreHit) {\n          if (condition && condition(instance)) {\n            i--;\n            continue;\n          }\n          if (currentConstraint && !currentConstraint(instance)) {\n            i--;\n            continue;\n          }\n          var ishit = instance.isHit(point, condition);\n          if (ishit) {\n            if (this._currentHit !== instance) {\n              if (this._currentHit) {\n                this._currentHit._isHit = false;\n              }\n              instance._isHit = true;\n              this._currentHit = instance;\n            }\n            if (typeof ishit !== \'boolean\') {\n              return ishit;\n            }\n            return instance;\n          } else {\n            instance._isHit = false;\n          }\n        }\n        i--;\n      }\n      if (this._currentHit) {\n        this._currentHit._isHit = false;\n      }\n      this._currentHit = null;\n      return null;\n    }\n    /**\n     * 获取当前层栈的最小外接矩形\n     * @return {number[][]} - 外接矩形坐标\n     */\n  }, {\n    key: "getBoundingRectPoints",\n    value: function getBoundingRectPoints() {\n      var points = [];\n      this.forEach(function (instance) {\n        if (instance.visible && !instance.absolutePosition) {\n          var rect = instance.getBoundingRect();\n          points.push([rect[0], rect[1]]);\n          points.push([rect[2], rect[3]]);\n        }\n      });\n      return points;\n    }\n\n    /**\n     * 获取当前层栈的锚点矩形\n     * @return {number[][]} - 锚点矩形坐标\n     */\n  }, {\n    key: "getAnchorRectPoints",\n    value: function getAnchorRectPoints() {\n      var points = [];\n      this.forEach(function (instance) {\n        if (instance.visible && !instance.absolutePosition) {\n          points.push(instance.anchor);\n        }\n      });\n      return points;\n    }\n  }]);\n  return InstanceStack;\n}( /*#__PURE__*/stack_wrapNativeSuper(Array));\n/* harmony default export */ const stack = (InstanceStack);\n;// CONCATENATED MODULE: ./src/core/instance/stackMixin.js\n\n\n\n// import { setUniqueId, getUniqueId } from \'../utils/functions\';\n/**\n * 对象栈 mixin 用于方便控制节点栈和连线栈\n *\n * @mixin\n */\nvar StackMixin = {\n  /** @property {Node[]}          - 对象数组 */\n  instances: [],\n  /** @property {BaseLink[]}      - 连线数组 */\n  links: [],\n  /** @property {InstanceStack}       - 对象栈 */\n  _stack: null,\n  /** @property {InstanceStack}       - 连线栈 */\n  _linkStack: null,\n  /**\n   * 初始化对象栈\n   * @param {JflowConfigs} configs - 配置\n   */\n  initStack: function initStack() {\n    var _this = this;\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      data = _ref.data;\n    this._stack = new stack();\n    this._linkStack = new stack();\n    if (!data) return;\n    this.instances = data.instances;\n    this.links = data.links;\n    this.instances.forEach(function (i) {\n      _this._stack.push(i);\n      i._belongs = _this;\n    });\n    this.links.forEach(function (link) {\n      _this._linkStack.push(link);\n      link._belongs = _this;\n    });\n  },\n  /**\n   * 加入节点对象\n   * @param {Node} instance - 节点对象\n   */\n  addToStack: function addToStack(instance) {\n    // console.log(\'-----addToStack----\', instance)\n    instance._belongs = this;\n    this._stack.push(instance);\n    dirty_work_addReflowWork(instance, this);\n    // this.recalculate()\n  },\n  insertToStackBefore: function insertToStackBefore(instance, anchorNode) {\n    // console.log(\'-----insertToStackBefore----\')\n    if (instance._belongs) {\n      instance._belongs.removeFromStack(instance);\n    }\n    instance._belongs = this;\n    var idx = this._stack.findIndex(function (s) {\n      return s === anchorNode;\n    });\n    if (idx !== -1) {\n      this._stack.splice(idx, 0, instance);\n      dirty_work_addReflowWork(instance, this);\n    } else {\n      this.addToStack(instance);\n    }\n  },\n  /**\n   * 替换对象\n   * @param {Instance} target - 被替换的对象\n   * @param {Instance} instance - 替换对象\n   */\n  replaceFromStack: function replaceFromStack(target, instance) {\n    var index = this._stack.findIndex(function (i) {\n      return i === target;\n    });\n    this._stack.splice(index, 1, instance);\n    target._belongs = null;\n    instance._belongs = this;\n    // this.recalculate()\n  },\n  /**\n   * 加入连线对象\n   * @param {BaseLink} instance - 连线对象\n   */\n  addToLinkStack: function addToLinkStack(link) {\n    if (this._linkStack.find(function (l) {\n      return l === link;\n    })) {\n      return;\n    }\n    link._belongs = this;\n    this._linkStack.push(link);\n  },\n  /**\n   * 删除节点对象\n   * @param {Node} target - 节点对象\n   */\n  removeFromStack: function removeFromStack(target) {\n    // console.log(\'-----removeFromStack----\')\n    // this.removeLinkOnInstance(target);\n    var index = this._stack.findIndex(function (i) {\n      return i === target;\n    });\n    if (index !== -1) {\n      this._stack.splice(index, 1);\n      dirty_work_addReflowWork(this);\n    }\n    // this.recalculate()\n  },\n  /**\n   * 删除连线对象\n   * @param {Node} target - 连线对象\n   */\n  removeFromLinkStack: function removeFromLinkStack(target) {\n    var index = this._linkStack.findIndex(function (i) {\n      return i === target;\n    });\n    if (index !== -1) {\n      this._linkStack.splice(index, 1);\n    }\n  },\n  emptyLink: function emptyLink() {\n    this._linkStack = new stack();\n  },\n  /**\n   * 重置当前栈中对象的位置\n   */\n  resetChildrenPosition: function resetChildrenPosition() {\n    this._stack.forEach(function (i) {\n      i.anchor = [0, 0];\n    });\n  },\n  addInstanceToLink: function addInstanceToLink(targetLink, instance) {\n    this.addToStack(instance);\n    var from = targetLink.from,\n      to = targetLink.to;\n    var index = this._linkStack.findIndex(function (l) {\n      return l === targetLink;\n    });\n    var _constuctor = targetLink.__proto__.constructor;\n    var l1 = new _constuctor({\n      from: from,\n      to: instance\n    });\n    l1._belongs = this;\n    var l2 = new _constuctor({\n      from: instance,\n      to: to\n    });\n    l2._belongs = this;\n    this._linkStack.splice(index, 1, l1, l2);\n  },\n  /**\n   * 循环当前栈中节点\n   * @property {stackIteratorCallback} 循环访问栈中每个节点\n   */\n  interateNodeStack: function interateNodeStack(callback) {\n    this._stack.forEach(function (instance) {\n      callback(instance);\n    });\n  }\n  /**\n  * 循环访问栈中每个节点\n  * @callback stackIteratorCallback\n  * @param {Node} instance 栈中节点\n  */\n};\n/* harmony default export */ const stackMixin = (StackMixin);\n;// CONCATENATED MODULE: ./src/core/instance/layoutMixin.js\n/**\n * Layout mixin 配置\n * @typedef {Object} LayoutMixin~LayoutConfigs\n * @property {Layout} layout             - 布局对象 \n */\n/**\n * 布局 mixin 用于注册和方便控制布局\n *\n * @mixin\n */\nvar LayoutMixin = {\n  /** @property {Layout}      - 布局对象 */\n  _layout: null,\n  /**\n   * 初始化布局\n   * @param {LayoutMixin~LayoutConfigs} configs - 配置\n   */\n  initLayout: function initLayout() {\n    var configs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this._layout = configs.layout;\n  },\n  /**\n   * 从当前层出发，向上层递归重排\n   */\n  recalculateUp: function recalculateUp() {\n    var _this$_belongs;\n    // console.log(\'----recalculateUp----\')\n    var dirty = true;\n    if (this.getBoundingDimension) {\n      var _this$getBoundingDime = this.getBoundingDimension(),\n        wold = _this$getBoundingDime.width,\n        hold = _this$getBoundingDime.height;\n      if (this.resetChildrenPosition) {\n        this.resetChildrenPosition();\n      }\n      if (this._getBoundingGroupRect) {\n        this._getBoundingGroupRect();\n      }\n      this.reflow();\n      if (this._getBoundingGroupRect) {\n        this._getBoundingGroupRect();\n      }\n      var _this$getBoundingDime2 = this.getBoundingDimension(),\n        wnow = _this$getBoundingDime2.width,\n        hnow = _this$getBoundingDime2.height;\n      dirty = wold !== wnow || hold !== hnow;\n    } else {\n      this.reflow();\n    }\n    if (this._belongs && dirty) {\n      this._belongs.recalculateUp();\n    }\n    if (!dirty || ((_this$_belongs = this._belongs) === null || _this$_belongs === void 0 ? void 0 : _this$_belongs.uniqueName) === \'jflow\') {\n      this.recalculateDown();\n    }\n  },\n  recalculateDown: function recalculateDown() {\n    if (this._layout && this._layout.reflowAfter) {\n      this._layout.reflowAfter(this);\n    }\n    this._stack.forEach(function (instance) {\n      if (instance.recalculateDown) {\n        instance.recalculateDown();\n      }\n    });\n  },\n  /**\n   * 重新计算布局，相当于浏览器里面重排，并重算当前布局下的最小外接矩形\n   */\n  recalculate: function recalculate() {\n    // console.log(\'----recalculate----\')\n    this.reflow();\n    if (this._getBoundingGroupRect) {\n      this._getBoundingGroupRect();\n    }\n  },\n  /**\n   * 布局静态检查\n   * @param {Instance} instance - 检查单元\n   * @return {Boolean} - 检查结果 \n   */\n  staticCheck: function staticCheck(instance) {\n    if (this._layout) {\n      return this._layout.staticCheck(instance, this);\n    }\n    return false;\n  },\n  /**\n   * 重新计算布局，相当于浏览器里面重排\n   */\n  reflow: function reflow() {\n    if (this._layout) {\n      this._layout.reflow(this);\n    }\n  }\n};\n/* harmony default export */ const layoutMixin = (LayoutMixin);\n;// CONCATENATED MODULE: ./src/core/instance/messageMixin.js\n/**\n * 消息 mixin 用于给Jflow传递消息\n *\n * @mixin\n */\nvar MessageMixin = {\n  _message: null,\n  /**\n   * 发送消息\n   * @param {Object} msg - 消息体\n   */\n  sendMessage: function sendMessage(msg) {\n    this._message = msg;\n  },\n  /**\n   * 接收消息\n   * @return {Object} msg - 消息体\n   */\n  consumeMessage: function consumeMessage() {\n    var msg = this._message;\n    this._message = null;\n    return msg;\n  },\n  readMessage: function readMessage() {\n    return this._message;\n  }\n};\n/* harmony default export */ const messageMixin = (MessageMixin);\n;// CONCATENATED MODULE: ./src/core/anime/animeMixin.js\n/* harmony default export */ const animeMixin = ({\n  initAnime: function initAnime() {\n    this.anime_queue = [];\n    this.__animeClock__ = undefined;\n    // this.animeclock = undefined;\n    // this.frameRendered = false;\n  },\n  // setAnimeClock(time) {\n  //     if(time !== this.animeclock) {\n  //         this.frameRendered = false;\n  //         this.animeclock = time;\n  //     }\n  // },\n  // hasAnimeAndFrameRendered() {\n  //     return this.anime_queue.length && this.frameRendered;\n  // },\n  // setFrameRendered() {\n  //     if(this.anime_queue.length) {\n  //         this.frameRendered = true;\n  //     }\n  // },\n  requestJFlowAnime: function requestJFlowAnime(frameCallBack) {\n    var meta = this.enqueueAnime(frameCallBack);\n    this._runAnime();\n    return meta;\n  },\n  enqueueAnime: function enqueueAnime(callback) {\n    var _this = this;\n    var animeMeta = {\n      start: undefined,\n      callback: callback,\n      cancel: function cancel() {\n        _this._cancelAnime(animeMeta);\n        _this._render();\n      }\n    };\n    this.anime_queue.push(animeMeta);\n    return animeMeta;\n  },\n  _cancelAnime: function _cancelAnime(meta) {\n    var idx = this.anime_queue.findIndex(function (m) {\n      return m === meta;\n    });\n    ~idx && this.anime_queue.splice(idx, 1);\n  },\n  runAnime: function runAnime() {\n    this._runAnime();\n    // requestAnimationFrame(this._runAnime.bind(this));\n  },\n  _runAnime: function _runAnime() {\n    var _this2 = this;\n    if (this.anime_queue.length) {\n      requestAnimationFrame(function () {\n        _this2.scheduleRender();\n        _this2._runAnime();\n      });\n      // requestAnimationFrame(this._runAnime.bind(this))\n    }\n  },\n  runAnimeFrame: function runAnimeFrame() {\n    this.anime_queue.forEach(function (meta) {\n      var timestamp = Date.now();\n      if (!meta.start) {\n        meta.start = timestamp;\n      }\n      var elapsed = timestamp - meta.start;\n      meta.callback(elapsed);\n    });\n  }\n});\n;// CONCATENATED MODULE: ./src/core/miniMap/minimap-mixin.js\nfunction minimap_mixin_slicedToArray(arr, i) { return minimap_mixin_arrayWithHoles(arr) || minimap_mixin_iterableToArrayLimit(arr, i) || minimap_mixin_unsupportedIterableToArray(arr, i) || minimap_mixin_nonIterableRest(); }\nfunction minimap_mixin_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction minimap_mixin_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return minimap_mixin_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return minimap_mixin_arrayLikeToArray(o, minLen); }\nfunction minimap_mixin_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction minimap_mixin_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction minimap_mixin_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/* harmony default export */ const minimap_mixin = ({\n  // 传入一个别的 context2d 来绘制\n  captureMap: function captureMap(wrapper, _ref) {\n    var _this = this;\n    var _ref$padding = _ref.padding,\n      padding = _ref$padding === void 0 ? 0 : _ref$padding,\n      _ref$placement = _ref.placement,\n      placement = _ref$placement === void 0 ? \'normal\' : _ref$placement;\n    this._getBoundingGroupRect();\n    var _this$bounding_box = this.bounding_box,\n      p_width = _this$bounding_box.width,\n      p_height = _this$bounding_box.height,\n      p_x = _this$bounding_box.x,\n      p_y = _this$bounding_box.y;\n    var miniMap = this.miniMap;\n    if (!miniMap) {\n      this.miniMap = createCanvas(wrapper);\n      var _this$miniMap = this.miniMap,\n        _width = _this$miniMap.width,\n        _height = _this$miniMap.height,\n        _raw_width = _this$miniMap.raw_width,\n        _raw_height = _this$miniMap.raw_height;\n      this.addEventListener(\'zoompan\', function () {\n        _this._renderMap && _this._renderMap();\n      });\n      var pressDown = false;\n      this.miniMap.canvas.addEventListener(\'pointerdown\', function (event) {\n        var offsetX = event.offsetX,\n          offsetY = event.offsetY,\n          deltaX = event.deltaX,\n          deltaY = event.deltaY;\n        pressDown = true;\n        _this._onMoveMap && _this._onMoveMap(offsetX, offsetY);\n      });\n      this.miniMap.canvas.addEventListener(\'pointermove\', function (event) {\n        var offsetX = event.offsetX,\n          offsetY = event.offsetY,\n          deltaX = event.deltaX,\n          deltaY = event.deltaY;\n        if (pressDown) {\n          _this._onMoveMap && _this._onMoveMap(offsetX, offsetY);\n        }\n        if (offsetY < 5 || offsetX < 5 || offsetX > _width - 5 || offsetY > _height - 5) {\n          pressDown = false;\n        }\n      });\n      this.miniMap.canvas.addEventListener(\'pointerup\', function () {\n        pressDown = false;\n      });\n      var caheCanvas = document.createElement(\'canvas\');\n      caheCanvas.width = _raw_width;\n      caheCanvas.height = _raw_height;\n      this.cacheMinimapCtx = caheCanvas.getContext(\'2d\');\n    }\n    var _this$miniMap2 = this.miniMap,\n      width = _this$miniMap2.width,\n      height = _this$miniMap2.height,\n      raw_width = _this$miniMap2.raw_width,\n      raw_height = _this$miniMap2.raw_height,\n      left = _this$miniMap2.left,\n      top = _this$miniMap2.top,\n      scale = _this$miniMap2.scale,\n      ctx = _this$miniMap2.ctx;\n    var pad2 = padding * 2;\n    var pad = padding;\n    var r1 = (width - pad2) / p_width;\n    var r2 = (height - pad2) / p_height;\n    var r = Math.min(r1, r2);\n    var m_x = 0;\n    var m_y = 0;\n    if (placement === \'center\') {\n      m_y = (height - p_height * r) / 2 - p_y * r;\n      m_x = (width - p_width * r) / 2 - p_x * r;\n    } else {\n      if (r1 < r2) {\n        m_y = (height - p_height * r) / 2 - p_y * r;\n        m_x = pad;\n      } else {\n        m_x = (width - p_width * r) / 2 - p_x * r;\n        m_y = pad;\n      }\n    }\n    var cachectx = this.cacheMinimapCtx;\n    cachectx.setTransform();\n    cachectx.clearRect(0, 0, raw_width, raw_height);\n    cachectx.scale(scale, scale);\n    cachectx.transform(r, 0, 0, r, m_x, m_y);\n    // ctx.fillStyle = \'red\';\n    // ctx.arc( 30, 30, 100, 0, 2*Math.PI);\n    // ctx.fill()\n    // debugger\n    var br = [0, 0, 0, 0];\n    if (this.NodeRenderTop) {\n      this._linkStack.render(cachectx, function (link) {\n        link.isInViewBox(br);\n        return true;\n      });\n      // this._linkStack.render(cachectx);\n      this._stack.render(cachectx);\n    } else {\n      this._stack.render(cachectx);\n      this._linkStack.render(cachectx, function (link) {\n        link.isInViewBox(br);\n        return true;\n      });\n    }\n    var _cacheMapImageData = cachectx.getImageData(0, 0, raw_width, raw_height);\n    this._renderMap = function () {\n      ctx.save();\n      ctx.setTransform();\n      ctx.clearRect(0, 0, raw_width, raw_height);\n      // if(!i) {\n      ctx.scale(scale, scale);\n      ctx.putImageData(_cacheMapImageData, 0, 0);\n      ctx.transform(r, 0, 0, r, m_x, m_y);\n      var _this$_getViewBox = _this._getViewBox(),\n        _this$_getViewBox2 = minimap_mixin_slicedToArray(_this$_getViewBox, 4),\n        x = _this$_getViewBox2[0],\n        y = _this$_getViewBox2[1],\n        t = _this$_getViewBox2[2],\n        d = _this$_getViewBox2[3];\n      ctx.beginPath();\n      ctx.rect(x, y, t - x, d - y);\n      ctx.setTransform();\n      ctx.rect(0, 0, raw_width, raw_height);\n      ctx.clip("evenodd");\n      ctx.fillStyle = \'rgba(0,0,0,0.4)\';\n      ctx.fillRect(0, 0, raw_width, raw_height);\n      ctx.restore();\n      // }\n    };\n\n    this._renderMap();\n    this._onMoveMap = function (offsetX, offsetY) {\n      var _this$_getViewBox3 = _this._getViewBox(),\n        _this$_getViewBox4 = minimap_mixin_slicedToArray(_this$_getViewBox3, 4),\n        x = _this$_getViewBox4[0],\n        y = _this$_getViewBox4[1],\n        t = _this$_getViewBox4[2],\n        d = _this$_getViewBox4[3];\n      // const w = t-x;\n      var a = (t - x) / 2 + x;\n      var b = (d - y) / 2 + y;\n      var p = [a * r + m_x, b * r + m_y];\n      _this._recalculatePosition((p[0] - offsetX) / r * _this.scale, (p[1] - offsetY) / r * _this.scale);\n      _this._render();\n      _this._renderMap();\n    };\n    // this._render(ctx);\n  }\n});\n;// CONCATENATED MODULE: ./src/core/events/index.js\nfunction events_typeof(obj) { "@babel/helpers - typeof"; return events_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, events_typeof(obj); }\nfunction events_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction events_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? events_ownKeys(Object(source), !0).forEach(function (key) { events_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : events_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction events_defineProperty(obj, key, value) { key = events_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction events_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, events_toPropertyKey(descriptor.key), descriptor); } }\nfunction events_createClass(Constructor, protoProps, staticProps) { if (protoProps) events_defineProperties(Constructor.prototype, protoProps); if (staticProps) events_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction events_toPropertyKey(arg) { var key = events_toPrimitive(arg, "string"); return events_typeof(key) === "symbol" ? key : String(key); }\nfunction events_toPrimitive(input, hint) { if (events_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (events_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction events_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction events_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) events_setPrototypeOf(subClass, superClass); }\nfunction events_createSuper(Derived) { var hasNativeReflectConstruct = events_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = events_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = events_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return events_possibleConstructorReturn(this, result); }; }\nfunction events_possibleConstructorReturn(self, call) { if (call && (events_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return events_assertThisInitialized(self); }\nfunction events_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction events_wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; events_wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !events_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return events_construct(Class, arguments, events_getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return events_setPrototypeOf(Wrapper, Class); }; return events_wrapNativeSuper(Class); }\nfunction events_construct(Parent, args, Class) { if (events_isNativeReflectConstruct()) { events_construct = Reflect.construct.bind(); } else { events_construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) events_setPrototypeOf(instance, Class.prototype); return instance; }; } return events_construct.apply(null, arguments); }\nfunction events_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction events_isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }\nfunction events_setPrototypeOf(o, p) { events_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return events_setPrototypeOf(o, p); }\nfunction events_getPrototypeOf(o) { events_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return events_getPrototypeOf(o); }\n/**\n * JFlow 抛出事件\n * @extends CustomEvent\n * @property {Event}  originEvent      - 原始事件\n * @property {Instance} target         - 事件触发对象\n * @property {JFlow} jflow             - JFlow 对象\n * @property {boolean} bubbles         - 冒泡标识\n */\nvar JFlowEvent = /*#__PURE__*/function (_CustomEvent) {\n  events_inherits(JFlowEvent, _CustomEvent);\n  var _super = events_createSuper(JFlowEvent);\n  function JFlowEvent(event) {\n    var configs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    events_classCallCheck(this, JFlowEvent);\n    var detail = events_objectSpread(events_objectSpread({}, configs), {}, {\n      originEvent: configs.event,\n      target: configs.target,\n      jflow: configs.jflow,\n      bubbles: configs.bubbles || false\n    });\n    return _super.call(this, event, {\n      detail: detail\n    });\n  }\n  return events_createClass(JFlowEvent);\n}( /*#__PURE__*/events_wrapNativeSuper(CustomEvent));\n/* harmony default export */ const events = (JFlowEvent);\n;// CONCATENATED MODULE: ./src/core/scrollbar/scrollbarMixin.js\nfunction scrollbarMixin_typeof(obj) { "@babel/helpers - typeof"; return scrollbarMixin_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, scrollbarMixin_typeof(obj); }\nfunction scrollbarMixin_slicedToArray(arr, i) { return scrollbarMixin_arrayWithHoles(arr) || scrollbarMixin_iterableToArrayLimit(arr, i) || scrollbarMixin_unsupportedIterableToArray(arr, i) || scrollbarMixin_nonIterableRest(); }\nfunction scrollbarMixin_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction scrollbarMixin_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return scrollbarMixin_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return scrollbarMixin_arrayLikeToArray(o, minLen); }\nfunction scrollbarMixin_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction scrollbarMixin_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction scrollbarMixin_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction scrollbarMixin_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction scrollbarMixin_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, scrollbarMixin_toPropertyKey(descriptor.key), descriptor); } }\nfunction scrollbarMixin_createClass(Constructor, protoProps, staticProps) { if (protoProps) scrollbarMixin_defineProperties(Constructor.prototype, protoProps); if (staticProps) scrollbarMixin_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction scrollbarMixin_toPropertyKey(arg) { var key = scrollbarMixin_toPrimitive(arg, "string"); return scrollbarMixin_typeof(key) === "symbol" ? key : String(key); }\nfunction scrollbarMixin_toPrimitive(input, hint) { if (scrollbarMixin_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (scrollbarMixin_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\nvar ScrollBar = /*#__PURE__*/function () {\n  function ScrollBar(dir) {\n    var configs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    scrollbarMixin_classCallCheck(this, ScrollBar);\n    this.anchor = [0, 0];\n    this.width = configs.barWidth || 4;\n    this.height = configs.barWidth || 4;\n    this.barMarginX = 0;\n    this.barMarginY = 0;\n    this.dir = dir;\n    this.plainColor = configs.plainColor || \'rgba(0, 0, 0, 0.15)\';\n    this.focusColor = configs.focusColor || \'rgba(0, 0, 0, 0.25)\';\n    this.isFocus = false;\n  }\n  scrollbarMixin_createClass(ScrollBar, [{\n    key: "render",\n    value: function render(ctx) {\n      var _this$anchor = scrollbarMixin_slicedToArray(this.anchor, 2),\n        x = _this$anchor[0],\n        y = _this$anchor[1];\n      ctx.save();\n      ctx.beginPath();\n      if (this.dir === \'x\') {\n        var radius = this.height / 2;\n        var cy = y + radius;\n        var by = y + this.height;\n        var rc = x + this.width - this.barMarginX * 2 - radius;\n        var lc = x + this.barMarginX + radius;\n        ctx.moveTo(lc, by);\n        ctx.arc(lc, cy, radius, Math.PI / 2, Math.PI / 2 * 3);\n        ctx.lineTo(rc, y);\n        ctx.arc(rc, cy, radius, -Math.PI / 2, Math.PI / 2);\n        ctx.closePath();\n      } else {\n        var _radius = this.width / 2;\n        var tc = y + this.barMarginY + _radius;\n        var bc = y + this.height - this.barMarginY * 2 - _radius;\n        var cx = x + _radius;\n        var rx = x + this.width;\n        ctx.moveTo(x, tc);\n        ctx.arc(cx, tc, _radius, -Math.PI, 0);\n        ctx.lineTo(rx, bc);\n        ctx.arc(cx, bc, _radius, 0, Math.PI);\n        ctx.closePath();\n      }\n      //   ctx.rect(\n      // x + this.barMarginX,\n      // y + this.barMarginY,\n      // this.width - this.barMarginX*2,\n      // this.height - this.barMarginY*2);\n\n      ctx.fillStyle = this.isFocus ? this.focusColor : this.plainColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }, {\n    key: "isHit",\n    value: function isHit(point) {\n      var anchor = this.anchor;\n      var w = this.width;\n      var h = this.height;\n      return point[0] > anchor[0] - 5 && point[0] < anchor[0] + w + 5 && point[1] > anchor[1] - 5 && point[1] < anchor[1] + h + 5;\n    }\n  }]);\n  return ScrollBar;\n}();\n/* harmony default export */ const scrollbarMixin = ({\n  initScrollBar: function initScrollBar() {\n    var _this = this;\n    var configs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var barColor = configs.barColor,\n      barFocusColor = configs.barFocusColor,\n      barMarginX = configs.barMarginX,\n      barMarginY = configs.barMarginY,\n      barWidth = configs.barWidth;\n    this._scrollbarEnable = true;\n    this._scrollbarX = new ScrollBar(\'x\', {\n      plainColor: barColor,\n      focusColor: barFocusColor,\n      barWidth: barWidth\n    });\n    this._scrollbarX.barMarginX = barMarginX || 5;\n    this._scrollbarY = new ScrollBar(\'y\', {\n      plainColor: barColor,\n      focusColor: barFocusColor,\n      barWidth: barWidth\n    });\n    this._scrollbarY.barMarginY = barMarginY || 5;\n    this._scrollBarStatus = {\n      dragging: false,\n      target: null,\n      xscale: undefined,\n      yscale: undefined,\n      barInitX: 0,\n      barInitY: 0\n    };\n    this.stopZoompanWatch = false;\n    this.addEventListener(\'zoompan\', function () {\n      if (!_this.stopZoompanWatch) {\n        _this.scrollBarOnPanAndZoom();\n      }\n    });\n    this.scrollBarOnPanAndZoom();\n    this.canvas.addEventListener(\'pointerdown\', function (e) {\n      var offsetX = e.offsetX,\n        offsetY = e.offsetY,\n        clientX = e.clientX,\n        clientY = e.clientY;\n      _this.onScrollbarPressStart(offsetX, offsetY, clientX, clientY);\n    });\n  },\n  checkScrollDragging: function checkScrollDragging() {\n    return this._scrollBarStatus && this._scrollBarStatus.dragging;\n  },\n  onScrollbarPressStart: function onScrollbarPressStart(offsetX, offsetY, clientX, clientY) {\n    var _this2 = this;\n    this.stopZoompanWatch = true;\n    var xhit = this._scrollbarX.isHit([offsetX, offsetY]);\n    if (xhit) {\n      Object.assign(this._scrollBarStatus, {\n        dragging: true,\n        target: this._scrollbarX,\n        barStartX: this._scrollbarX.anchor[0],\n        barInitX: clientX\n      });\n    }\n    var yhit = this._scrollbarY.isHit([offsetX, offsetY]);\n    if (yhit) {\n      Object.assign(this._scrollBarStatus, {\n        dragging: true,\n        target: this._scrollbarY,\n        barStartY: this._scrollbarY.anchor[1],\n        barInitY: clientY\n      });\n    }\n    var f = function (e) {\n      var offsetX = e.offsetX,\n        offsetY = e.offsetY,\n        clientX = e.clientX,\n        clientY = e.clientY;\n      _this2.onDraggingScrollbar(offsetX, offsetY, clientX, clientY);\n    }.bind(this);\n    document.addEventListener(\'pointermove\', f);\n    var t = function (e) {\n      Object.assign(_this2._scrollBarStatus, {\n        dragging: false,\n        target: null,\n        x: undefined,\n        y: undefined\n      });\n      document.removeEventListener(\'pointermove\', f);\n      document.removeEventListener(\'pointerup\', t);\n      _this2.canvas.removeEventListener(\'pointerup\', t);\n      _this2.stopZoompanWatch = false;\n    }.bind(this);\n    this.canvas.addEventListener(\'pointerup\', t, {\n      once: true\n    });\n    document.addEventListener(\'pointerup\', t, {\n      once: true\n    });\n  },\n  onDraggingScrollbar: function onDraggingScrollbar(offsetX, offsetY, clientX, clientY) {\n    if (this._scrollbarEnable && this._scrollBarStatus.dragging) {\n      var _this$_scrollBarStatu = this._scrollBarStatus,\n        target = _this$_scrollBarStatu.target,\n        barInitX = _this$_scrollBarStatu.barInitX,\n        barStartX = _this$_scrollBarStatu.barStartX,\n        barInitY = _this$_scrollBarStatu.barInitY,\n        barStartY = _this$_scrollBarStatu.barStartY,\n        xscale = _this$_scrollBarStatu.xscale,\n        yscale = _this$_scrollBarStatu.yscale,\n        scollbarHeight = _this$_scrollBarStatu.scollbarHeight,\n        scollbarWidth = _this$_scrollBarStatu.scollbarWidth,\n        realR = _this$_scrollBarStatu.realR,\n        realL = _this$_scrollBarStatu.realL,\n        realT = _this$_scrollBarStatu.realT,\n        realB = _this$_scrollBarStatu.realB;\n      var _this$canvasMeta = this.canvasMeta,\n        actual_width = _this$canvasMeta.actual_width,\n        actual_height = _this$canvasMeta.actual_height;\n      var _this$bounding_box = this.bounding_box,\n        p_x = _this$bounding_box.x,\n        p_y = _this$bounding_box.y;\n      // console.log(target.dir, realT, realB)\n      var deltaX = 0,\n        deltaY = 0;\n      if (target.dir === \'x\') {\n        deltaX = clientX - barInitX;\n        var xnew = barStartX + deltaX;\n        var q = target.anchor[0] = Math.max(Math.min(xnew, actual_width - scollbarWidth), 0);\n        var ratioInX = q / actual_width;\n        // const y = (realB - (realB - realT) * ratioInY) * this.scale\n        var ratioX = (realR - realL) * ratioInX + realL;\n        var x = (p_x - ratioX) * this.scale;\n        Object.assign(this.position, {\n          offsetX: x - p_x * this.scale,\n          x: x\n        });\n      }\n      if (target.dir === \'y\') {\n        deltaY = clientY - barInitY;\n        var ynew = barStartY + deltaY;\n        var _q = target.anchor[1] = Math.max(Math.min(ynew, actual_height - scollbarHeight), 0);\n        ;\n        var ratioInY = _q / actual_height;\n        // const y = (realB - (realB - realT) * ratioInY) * this.scale\n        var ratioY = (realB - realT) * ratioInY + realT;\n        var y = (p_y - ratioY) * this.scale;\n        Object.assign(this.position, {\n          offsetY: y - p_y * this.scale,\n          y: y\n        });\n      }\n      this.dispatchEvent(new events(\'zoompan\', {\n        deltaX: deltaX,\n        deltaY: deltaY\n      }));\n      this.scheduleRender();\n      return true;\n    }\n    return false;\n  },\n  checkScrollBarHover: function checkScrollBarHover(offsetX, offsetY) {\n    if (this._scrollbarEnable) {\n      var xhit = this._scrollbarX.isHit([offsetX, offsetY]);\n      if (xhit) {\n        // this._scrollBarStatus.hoverTarget = this._scrollbarX;\n        if (!this._scrollbarX.isFocus) {\n          this._scrollbarX.isFocus = true;\n          this.scheduleRender();\n        }\n        this.canvas.style.cursor = \'default\';\n        return true;\n      }\n      var yhit = this._scrollbarY.isHit([offsetX, offsetY]);\n      if (yhit) {\n        // this._scrollBarStatus.hoverTarget = this._scrollbarY;\n        if (!this._scrollbarY.isFocus) {\n          this._scrollbarY.isFocus = true;\n          this.scheduleRender();\n        }\n        this.canvas.style.cursor = \'default\';\n        return true;\n      }\n    }\n    return false;\n  },\n  resetScrollBarHover: function resetScrollBarHover() {\n    if (this._scrollbarEnable) {\n      if (this._scrollbarY.isFocus || this._scrollbarX.isFocus) {\n        this._scrollbarY.isFocus = false;\n        this._scrollbarX.isFocus = false;\n        this.scheduleRender();\n      }\n    }\n  },\n  _getScrollViewBoundingbox: function _getScrollViewBoundingbox() {\n    var padding = 120;\n    var _this$bounding_box2 = this.bounding_box,\n      p_width = _this$bounding_box2.width,\n      p_height = _this$bounding_box2.height,\n      p_x = _this$bounding_box2.x,\n      p_y = _this$bounding_box2.y;\n    var p = padding;\n    var p2 = padding * 2;\n    return {\n      width: p_width + p2,\n      height: p_height + p2,\n      x: p_x - p,\n      y: p_y - p\n    };\n  },\n  scrollBarOnPanAndZoom: function scrollBarOnPanAndZoom() {\n    if (!this._scrollbarEnable || this._scrollBarStatus.dragging) {\n      return;\n    }\n    var _this$_getScrollViewB = this._getScrollViewBoundingbox(),\n      p_width = _this$_getScrollViewB.width,\n      p_height = _this$_getScrollViewB.height,\n      p_x = _this$_getScrollViewB.x,\n      p_y = _this$_getScrollViewB.y;\n    var _this$_getViewBox = this._getViewBox(),\n      _this$_getViewBox2 = scrollbarMixin_slicedToArray(_this$_getViewBox, 4),\n      x = _this$_getViewBox2[0],\n      y = _this$_getViewBox2[1],\n      r = _this$_getViewBox2[2],\n      b = _this$_getViewBox2[3];\n    var realR = Math.max(r, p_x + p_width);\n    var realL = Math.min(x, p_x);\n    var realT = Math.min(y, p_y);\n    var realB = Math.max(b, p_y + p_height);\n    var vw = r - x;\n    var vh = b - y;\n    var _this$canvasMeta2 = this.canvasMeta,\n      actual_width = _this$canvasMeta2.actual_width,\n      actual_height = _this$canvasMeta2.actual_height;\n    var xscale = vw / (realR - realL);\n    if (xscale < 1) {\n      var scollbarWidth = actual_width * xscale;\n      var anchorX = (x - realL) * xscale * this.scale;\n      this._scrollbarX.anchor = [anchorX, actual_height - 10];\n      this._scrollbarX.width = scollbarWidth;\n      this._scrollBarStatus.scollbarWidth = scollbarWidth;\n    }\n    var yscale = vh / (realB - realT);\n    if (yscale < 1) {\n      var scollbarHeight = actual_height * yscale;\n      var anchorY = (y - realT) * yscale * this.scale;\n      this._scrollbarY.anchor = [actual_width - 10, anchorY];\n      this._scrollbarY.height = scollbarHeight;\n      this._scrollBarStatus.scollbarHeight = scollbarHeight;\n    }\n    Object.assign(this._scrollBarStatus, {\n      yscale: yscale,\n      xscale: xscale,\n      realR: realR,\n      realL: realL,\n      realT: realT,\n      realB: realB\n    });\n  },\n  resetScollBarStatus: function resetScollBarStatus() {\n    if (this._scrollbarEnable) {\n      Object.assign(this._scrollBarStatus, {\n        dragging: false,\n        target: null,\n        x: undefined,\n        y: undefined\n      });\n    }\n  },\n  renderScrollBar: function renderScrollBar(ctx) {\n    if (this._scrollbarEnable) {\n      ctx.setTransform();\n      ctx.scale(this.dpr, this.dpr);\n      var _this$_scrollBarStatu2 = this._scrollBarStatus,\n        xscale = _this$_scrollBarStatu2.xscale,\n        yscale = _this$_scrollBarStatu2.yscale;\n      if (xscale < 1) {\n        this._scrollbarX.render(ctx);\n      }\n      if (yscale < 1) {\n        this._scrollbarY.render(ctx);\n      }\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/core/flow/schedule.js\n/* harmony default export */ const schedule = ({\n  toggleRender: function toggleRender(val) {\n    this.__renderstop__ = !val;\n  },\n  initSchedule: function initSchedule() {\n    this.__clock__ = undefined;\n  },\n  scheduleRender: function scheduleRender(callback) {\n    var _this = this;\n    requestAnimationFrame(function (timestamp) {\n      var isFirstTime = _this.__clock__ !== timestamp;\n      if (!_this.__renderstop__ && isFirstTime) {\n        _this.__render();\n      }\n      if (callback) {\n        callback(timestamp);\n      }\n      _this.__clock__ = timestamp;\n    });\n  }\n});\n;// CONCATENATED MODULE: ./src/core/events/adapter.js\nfunction adapter_typeof(obj) { "@babel/helpers - typeof"; return adapter_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, adapter_typeof(obj); }\nfunction adapter_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction adapter_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, adapter_toPropertyKey(descriptor.key), descriptor); } }\nfunction adapter_createClass(Constructor, protoProps, staticProps) { if (protoProps) adapter_defineProperties(Constructor.prototype, protoProps); if (staticProps) adapter_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction adapter_toPropertyKey(arg) { var key = adapter_toPrimitive(arg, "string"); return adapter_typeof(key) === "symbol" ? key : String(key); }\nfunction adapter_toPrimitive(input, hint) { if (adapter_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (adapter_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n/**\n * 事件处理函数\n * @name EventAdapter~Handler\n * @function\n * @param {Event} event - 原生事件\n * @param {JFlow} jflow - 当前jflow 对象\n */\n\n/**\n * EventAdapter 对象 plugin 配置\n * @typedef {Object} EventAdapter~pluginDef\n * @property {Object} canvas - canvas 相关的事件\n * @property {EventAdapter~Handler} canvas.eventName - 注册 canvas 上的事件处理\n * @property {Object} document - document 相关的事件\n * @property {EventAdapter~Handler} document.eventName - 注册 document 上的事件处理\n */\n\nfunction getDefaultPlugin() {\n  var _mouseStatus = {\n    // x: undefined,\n    // y: undefined,\n    // enableClick: false,\n    pointerDown: false,\n    dirty: false\n  };\n  return {\n    canvas: {\n      wheel: function wheel(event, jflow) {\n        event.preventDefault();\n        var offsetX = event.offsetX,\n          offsetY = event.offsetY,\n          deltaX = event.deltaX,\n          deltaY = event.deltaY;\n        if (event.ctrlKey) {\n          deltaY = -deltaY;\n          jflow.zoomHandler(offsetX, offsetY, deltaX, deltaY, event);\n        } else {\n          jflow.panHandler(-deltaX, -deltaY, event);\n        }\n      },\n      pointerdown: function pointerdown(event, jflow) {\n        var offsetX = event.offsetX,\n          offsetY = event.offsetY,\n          deltaY = event.deltaY,\n          button = event.button;\n        if (button !== 0) return;\n        _mouseStatus.pointerDown = true;\n        jflow.pressStartHandler(offsetX, offsetY, event);\n      },\n      pointermove: function pointermove(event, jflow) {\n        var offsetX = event.offsetX,\n          offsetY = event.offsetY;\n        if (_mouseStatus.pointerDown) {\n          _mouseStatus.dirty = true;\n        }\n        jflow.pressMoveHandler(offsetX, offsetY, event);\n      },\n      pointerup: function pointerup(event, jflow) {\n        event.preventDefault();\n        // event.stopPropagation(); ALWAYS ENABLE PROPAGATION \n        var offsetX = event.offsetX,\n          offsetY = event.offsetY,\n          button = event.button;\n        if (button !== 0) return;\n        if (_mouseStatus.pointerDown && _mouseStatus.dirty) {\n          _mouseStatus.pointerDown = false;\n          _mouseStatus.dirty = false;\n          jflow.pressUpHanlder(false, event);\n        }\n      },\n      contextmenu: function contextmenu(event, jflow) {\n        event.preventDefault();\n        event.stopPropagation();\n        var offsetX = event.offsetX,\n          offsetY = event.offsetY;\n        jflow.contextMenuHanlder(offsetX, offsetY, event);\n      },\n      dblclick: function dblclick(event, jflow) {\n        event.preventDefault();\n        event.stopPropagation();\n        var offsetX = event.offsetX,\n          offsetY = event.offsetY;\n        jflow.dblclickHandler(offsetX, offsetY, event);\n      },\n      click: function click(event, jflow) {\n        event.preventDefault();\n        event.stopPropagation();\n        var offsetX = event.offsetX,\n          offsetY = event.offsetY;\n        if (!_mouseStatus.dirty) {\n          _mouseStatus.pointerDown = false;\n          _mouseStatus.dirty = false;\n          jflow.clickHanlder(offsetX, offsetY, event);\n        }\n      }\n    },\n    document: {\n      pointerup: function pointerup(event, jflow) {\n        jflow.pressUpHanlder(true, event);\n      }\n    }\n  };\n}\n\n/** \n * EventAdapter 对象\n * EventAdapter 通过 plugin 的形式实现多种交互方式的映射\n * @constructor EventAdapter\n */\nvar EventAdapter = /*#__PURE__*/function () {\n  function EventAdapter() {\n    var plugin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    adapter_classCallCheck(this, EventAdapter);\n    this.plugin = getDefaultPlugin();\n    this.use(plugin);\n    this.canvasHandlers = [];\n    this.documentHandlers = [];\n  }\n  adapter_createClass(EventAdapter, [{\n    key: "use",\n    value: function use() {\n      var plugin = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var ca = plugin.canvas,\n        docObj = plugin.document;\n      if (ca) {\n        for (var eventName in ca) {\n          if (ca.hasOwnProperty(eventName)) {\n            this.plugin.canvas[eventName] = ca[eventName];\n          }\n        }\n      }\n      if (docObj) {\n        for (var _eventName in docObj) {\n          if (docObj.hasOwnProperty(_eventName)) {\n            this.plugin.document[_eventName] = docObj[_eventName];\n          }\n        }\n      }\n    }\n  }, {\n    key: "apply",\n    value: function apply(jflow) {\n      var _this = this;\n      var _this$plugin = this.plugin,\n        ca = _this$plugin.canvas,\n        docObj = _this$plugin.document;\n      var canvas = jflow.canvas;\n      var _loop = function _loop() {\n        var handler = ca[eventName];\n        function handlerWrapperd(e) {\n          handler(e, jflow);\n        }\n        canvas.addEventListener(eventName, handlerWrapperd);\n        _this.canvasHandlers.push({\n          eventName: eventName,\n          handlerWrapperd: handlerWrapperd\n        });\n      };\n      for (var eventName in ca) {\n        _loop();\n      }\n      var _loop2 = function _loop2() {\n        var handler;\n        var options = {};\n        if (typeof docObj[_eventName2] === \'function\') {\n          handler = docObj[_eventName2];\n        } else {\n          handler = docObj[_eventName2].handler;\n          Object.assign(options, docObj[_eventName2].options);\n        }\n        function handlerWrapperd(e) {\n          handler(e, jflow);\n        }\n        document.addEventListener(_eventName2, handlerWrapperd, options);\n        _this.documentHandlers.push({\n          eventName: _eventName2,\n          handlerWrapperd: handlerWrapperd,\n          options: options\n        });\n      };\n      for (var _eventName2 in docObj) {\n        _loop2();\n      }\n    }\n  }, {\n    key: "unload",\n    value: function unload(jflow) {\n      var canvas = jflow.canvas;\n      this.canvasHandlers.forEach(function (_ref) {\n        var eventName = _ref.eventName,\n          handlerWrapperd = _ref.handlerWrapperd;\n        canvas.removeEventListener(eventName, handlerWrapperd);\n      });\n      this.documentHandlers.forEach(function (_ref2) {\n        var eventName = _ref2.eventName,\n          handlerWrapperd = _ref2.handlerWrapperd,\n          options = _ref2.options;\n        console.log(\'unload\', eventName);\n        document.removeEventListener(eventName, handlerWrapperd, options);\n      });\n    }\n  }]);\n  return EventAdapter;\n}();\n/* harmony default export */ const adapter = (EventAdapter);\n;// CONCATENATED MODULE: ./src/core/instance/groupFactory.js\nfunction groupFactory_typeof(obj) { "@babel/helpers - typeof"; return groupFactory_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, groupFactory_typeof(obj); }\nfunction groupFactory_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, groupFactory_toPropertyKey(descriptor.key), descriptor); } }\nfunction groupFactory_createClass(Constructor, protoProps, staticProps) { if (protoProps) groupFactory_defineProperties(Constructor.prototype, protoProps); if (staticProps) groupFactory_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction groupFactory_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction groupFactory_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) groupFactory_setPrototypeOf(subClass, superClass); }\nfunction groupFactory_setPrototypeOf(o, p) { groupFactory_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return groupFactory_setPrototypeOf(o, p); }\nfunction groupFactory_createSuper(Derived) { var hasNativeReflectConstruct = groupFactory_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = groupFactory_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = groupFactory_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return groupFactory_possibleConstructorReturn(this, result); }; }\nfunction groupFactory_possibleConstructorReturn(self, call) { if (call && (groupFactory_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return groupFactory_assertThisInitialized(self); }\nfunction groupFactory_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction groupFactory_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction groupFactory_getPrototypeOf(o) { groupFactory_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return groupFactory_getPrototypeOf(o); }\nfunction groupFactory_slicedToArray(arr, i) { return groupFactory_arrayWithHoles(arr) || groupFactory_iterableToArrayLimit(arr, i) || groupFactory_unsupportedIterableToArray(arr, i) || groupFactory_nonIterableRest(); }\nfunction groupFactory_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction groupFactory_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return groupFactory_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return groupFactory_arrayLikeToArray(o, minLen); }\nfunction groupFactory_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction groupFactory_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction groupFactory_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction groupFactory_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction groupFactory_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? groupFactory_ownKeys(Object(source), !0).forEach(function (key) { groupFactory_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : groupFactory_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction groupFactory_defineProperty(obj, key, value) { key = groupFactory_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction groupFactory_toPropertyKey(arg) { var key = groupFactory_toPrimitive(arg, "string"); return groupFactory_typeof(key) === "symbol" ? key : String(key); }\nfunction groupFactory_toPrimitive(input, hint) { if (groupFactory_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (groupFactory_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\n\n\nvar GroupMixin = groupFactory_objectSpread(groupFactory_objectSpread(groupFactory_objectSpread({}, stackMixin), layoutMixin), {}, {\n  _setPadding: function _setPadding(configs) {\n    this.padding = {\n      top: configs.paddingTop || configs.padding || 0,\n      right: configs.paddingRight || configs.padding || 0,\n      bottom: configs.paddingBottom || configs.padding || 0,\n      left: configs.paddingLeft || configs.padding || 0\n    };\n  },\n  _setMargin: function _setMargin(configs) {\n    this.margin = {\n      top: configs.marginTop || configs.margin || 0,\n      right: configs.marginRight || configs.margin || 0,\n      bottom: configs.marginBottom || configs.margin || 0,\n      left: configs.marginLeft || configs.margin || 0\n    };\n  },\n  _getCenter: function _getCenter() {\n    var anchor = this.anchor;\n    var padding = this.padding;\n    var margin = this.margin;\n    var mx = (margin.left - margin.right) / 2;\n    var my = (margin.top - margin.bottom) / 2;\n    var centerX = (padding.left - padding.right) / 2 + mx;\n    var centerY = (padding.top - padding.bottom) / 2 + my;\n    this._shape.anchor = [anchor[0] + mx, anchor[1] + my];\n    this._center[0] = anchor[0] + centerX;\n    this._center[1] = anchor[1] + centerY;\n    return this._center;\n  },\n  setAnchorX: function setAnchorX(x) {\n    this.anchor[0] = x;\n    this._getCenter();\n  },\n  setAnchorY: function setAnchorY(y) {\n    this.anchor[1] = y;\n    this._getCenter();\n  },\n  setAnchor: function setAnchor(x, y) {\n    this.anchor[0] = x;\n    this.anchor[1] = y;\n    this._getCenter();\n  },\n  _calculatePointBack: function _calculatePointBack(point) {\n    var _point = groupFactory_slicedToArray(point, 2),\n      gx = _point[0],\n      gy = _point[1];\n    var _this$_getCenter = this._getCenter(),\n      _this$_getCenter2 = groupFactory_slicedToArray(_this$_getCenter, 2),\n      cx = _this$_getCenter2[0],\n      cy = _this$_getCenter2[1];\n    var p = [gx - cx, gy - cy];\n    return p;\n  },\n  _calculatePointBackWithPoint: function _calculatePointBackWithPoint(a, b, arr, idx1, idx2) {\n    var anchor = this.anchor;\n    var padding = this.padding;\n    var margin = this.margin;\n    arr[idx1] = a - (anchor[0] + (padding.left - padding.right) / 2 + (margin.left - margin.right) / 2);\n    arr[idx2] = b - (anchor[1] + (padding.top - padding.bottom) / 2 + (margin.top - margin.bottom) / 2);\n  },\n  /**\n   * 反算回 canvas 顶层坐标\n   * @param {Number[]} point\n   * @return {Number[]} 世界坐标\n   */\n  calculateToCoordination: function calculateToCoordination(point) {\n    var _point2 = groupFactory_slicedToArray(point, 2),\n      gx = _point2[0],\n      gy = _point2[1];\n    var _this$_getCenter3 = this._getCenter(),\n      _this$_getCenter4 = groupFactory_slicedToArray(_this$_getCenter3, 2),\n      cx = _this$_getCenter4[0],\n      cy = _this$_getCenter4[1];\n    // const p = [cx + anchor[0] - spanH, cy + anchor[1] - spanV];\n    var p = [gx + cx, gy + cy];\n    if (this._belongs && this._belongs.calculateToCoordination) {\n      return this._belongs.calculateToCoordination(p);\n    } else {\n      return p;\n    }\n  },\n  /**\n   * 反算回页面的像素坐标，重载 {@link Instance#calculateToRealWorld}\n   * @param {Number[]} point\n   * @return {Number[]} 世界坐标\n   */\n  calculateToRealWorld: function calculateToRealWorld(point) {\n    var _point3 = groupFactory_slicedToArray(point, 2),\n      gx = _point3[0],\n      gy = _point3[1];\n    var _this$_getCenter5 = this._getCenter(),\n      _this$_getCenter6 = groupFactory_slicedToArray(_this$_getCenter5, 2),\n      cx = _this$_getCenter6[0],\n      cy = _this$_getCenter6[1];\n    var p = [gx + cx, gy + cy];\n    if (this._belongs && this._belongs.calculateToRealWorld) {\n      return this._belongs.calculateToRealWorld(p);\n    }\n  },\n  calculateToRealWorldWithPointer: function calculateToRealWorldWithPointer(outpoint, inpoint) {\n    outpoint[0] = inpoint[0] + this._center[0];\n    outpoint[1] = inpoint[1] + this._center[1];\n    if (this._belongs && this._belongs.calculateToRealWorldWithPointer) {\n      return this._belongs.calculateToRealWorldWithPointer(outpoint, outpoint);\n    }\n  },\n  clone: function clone() {\n    var C = this.constructor;\n    var configs = Object.assign({}, this._rawConfigs, {\n      layout: this._layout && this._layout.clone()\n    });\n    var t = new C(configs);\n    this.interateNodeStack(function (instance) {\n      t.addToStack(instance.clone());\n    });\n    t.recalculate();\n    t.visible = this.visible;\n    return t;\n  },\n  getBoundingDimension: function getBoundingDimension() {\n    return {\n      width: this.width,\n      height: this.height\n    };\n  },\n  getBoundingRect: function getBoundingRect() {\n    var anchor = this.anchor;\n    var w = this.width / 2;\n    var h = this.height / 2;\n    var ltx = anchor[0] - w;\n    var lty = anchor[1] - h;\n    var rbx = anchor[0] + w;\n    var rby = anchor[1] + h;\n    var br = this._boundingrect;\n    br[0] = ltx;\n    br[1] = lty;\n    br[2] = rbx;\n    br[3] = rby;\n    return br;\n  },\n  getIntersectionsInFourDimension: function getIntersectionsInFourDimension() {\n    var _ref;\n    var p2 = this.anchor;\n    if (this._belongs && this._belongs.calculateToCoordination) {\n      p2 = this._belongs.calculateToCoordination(p2);\n    }\n    var _p = p2,\n      _p2 = groupFactory_slicedToArray(_p, 2),\n      x2 = _p2[0],\n      y2 = _p2[1];\n    var w = this.width / 2;\n    var h = this.height / 2;\n    return _ref = {}, groupFactory_defineProperty(_ref, DIRECTION.RIGHT, [x2 + w, y2]), groupFactory_defineProperty(_ref, DIRECTION.LEFT, [x2 - w, y2]), groupFactory_defineProperty(_ref, DIRECTION.BOTTOM, [x2, y2 + h]), groupFactory_defineProperty(_ref, DIRECTION.TOP, [x2, y2 - h]), groupFactory_defineProperty(_ref, DIRECTION.SELF, [x2 + w * 0.618, y2 + h * 0.618]), _ref;\n  },\n  calculateIntersection: function calculateIntersection(point) {\n    var _point4 = groupFactory_slicedToArray(point, 2),\n      x1 = _point4[0],\n      y1 = _point4[1];\n    var _this$anchor = groupFactory_slicedToArray(this.anchor, 2),\n      x2 = _this$anchor[0],\n      y2 = _this$anchor[1];\n    var w = this.width / 2;\n    var h = this.height / 2;\n    var vecx = x2 - x1;\n    var vecy = y2 - y1;\n    var theta1 = h / w;\n    var theta2 = Math.abs(vecy / vecx);\n    var dirx = x1 > x2;\n    var diry = y1 > y2;\n    var x, y;\n    if (theta2 < theta1) {\n      x = x2 + (dirx ? w : -w);\n      y = w * (diry ? theta2 : -theta2) + y2;\n    } else {\n      y = y2 + (diry ? h : -h);\n      x = h / (dirx ? theta2 : -theta2) + x2;\n    }\n    return [x, y];\n  },\n  onEnterViewbox: function onEnterViewbox() {\n    this.interateNodeStack(function (instance) {\n      instance.onEnterViewbox();\n    });\n  },\n  onLeaveViewbox: function onLeaveViewbox() {\n    this.interateNodeStack(function (instance) {\n      instance.onLeaveViewbox();\n    });\n  },\n  destroy: function destroy() {\n    this._shape.destroy();\n    this.interateNodeStack(function (instance) {\n      instance.destroy();\n    });\n  },\n  doRecalculate: function doRecalculate() {\n    if (this.__mounted__) {\n      this.recalculateUp();\n    } else {\n      this.recalculate();\n      this.__mounted__ = true;\n    }\n  }\n});\nfunction defaultShift(width, height) {\n  return [width, height];\n}\n\n/**\n * 根据paddingbox宽高来计算shapeshiftbox的宽高\n * @function shapeShift\n * @param {number} width            - paddingBox宽\n * @param {number} height           - paddingBox高\n * @return {number[]}\n */\n\n/**\n * 组工厂函数，用于通过JFlow 绘图节点来创建不同的组\n * @global \n * @function GroupFactory\n * @param {Node} jflowNodeConstructor - 绘图节点构造器\n * @param {object} options            - 配置项\n * @param {shapeShift} options.shapeShift - shift层适配方法\n * @return {Group} - 绘图节点构造器\n */\nfunction GroupFactory(jflowNodeConstructor) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var shapeShift = typeof options.shapeShift === \'function\' ? options.shapeShift : defaultShift;\n\n  /**\n   * Group 配置\n   * @typedef {Object} GroupTemplate~GroupConfigs\n   * @property {number} width             - 设定宽度\n   * @property {number} minWidth          - 最小宽度\n   * @property {number} height            - 设定高度\n   * @property {number} padding          - 内边距\n   * @property {number} paddingTop          - 内上边距\n   * @property {number} paddingRight         - 内右边距\n   * @property {number} paddingBottom        - 内下边距\n   * @property {number} paddingLeft          - 内左边距\n   * @property {number} margin            - 外边距\n   * @property {number} marginTop          - 外上边距\n   * @property {number} marginRight         - 外右边距\n   * @property {number} marginBottom        - 外下边距\n   * @property {number} marginLeft          - 外左边距\n   * @property {boolean} lock            - 布局锁定状态 默认 true\n   */\n  var t = /*#__PURE__*/function (_Node) {\n    groupFactory_inherits(t, _Node);\n    var _super = groupFactory_createSuper(t);\n    /**\n    * @constructs GroupTemplate\n    * @param {GroupTemplate~GroupConfigs} configs - 组配置\n    * @mixes LayoutMixin\n    * @mixes StackMixin \n    */\n    function t(configs) {\n      var _configs$lock, _configs$transparent;\n      var _this;\n      groupFactory_classCallCheck(this, t);\n      _this = _super.call(this, configs);\n      _this.initStack(configs);\n      _this.initLayout(configs);\n      /** @member {Node}      - 壳绘图单元 */\n      _this._shape = new jflowNodeConstructor(configs);\n      _this._shape.anchor = [0, 0];\n      _this._shape._belongs = groupFactory_assertThisInitialized(_this);\n      _this._center = [0, 0];\n      _this._setPadding(configs);\n      _this._setMargin(configs);\n      /** @member {Number}      - 设定宽度 */\n      _this.definedWidth = configs.width;\n      /** @member {Number}      - 最小宽度 */\n      _this.minWidth = configs.minWidth;\n      /** @member {Number}      - 设定的高度 */\n      _this.definedHeight = configs.height;\n      /** @member {Boolean}      - 组内元素是否锁定， 默认true */\n      _this.lock = (_configs$lock = configs.lock) !== null && _configs$lock !== void 0 ? _configs$lock : true;\n      _this.display = configs.display || \'default\';\n      /** @member {Boolean}      - 组本身是否进入形状判定范围 */\n      _this.transparent = (_configs$transparent = configs.transparent) !== null && _configs$transparent !== void 0 ? _configs$transparent : false;\n      _this._getBoundingGroupRect();\n      _this.reflow();\n      _this._getBoundingGroupRect();\n      _this._cacheViewBox = [];\n      return _this;\n    }\n    return groupFactory_createClass(t);\n  }(node);\n  Object.assign(t.prototype, GroupMixin);\n  Object.assign(t.prototype, {\n    reflow: function reflow() {\n      GroupMixin.reflow.call(this);\n      var margin = this.margin;\n      var _shapeShift = shapeShift(this.width - margin.left - margin.right, this.height - margin.top - margin.bottom, this._shape),\n        _shapeShift2 = groupFactory_slicedToArray(_shapeShift, 2),\n        shapeWidth = _shapeShift2[0],\n        shapeHeight = _shapeShift2[1];\n      this._shape.width = shapeWidth;\n      this._shape.height = shapeHeight;\n    },\n    setConfig: function setConfig(configs) {\n      this._shape.setConfig(configs);\n      this._setPadding(configs);\n      this._setMargin(configs);\n      if (\'opacity\' in configs) {\n        this.opacity = configs.opacity;\n      }\n      if (configs.layout && this._layout !== configs.layout) {\n        this._layout = configs.layout;\n      }\n    },\n    _getBoundingGroupRect: function _getBoundingGroupRect() {\n      var points = this._stack.getBoundingRectPoints();\n      // content box \n      var bbox = bounding_box(points);\n\n      // padding box \n      var padding = this.padding;\n      var minWidth = this.minWidth; // - padding.left - padding.right;\n      var definedWidth = this.definedWidth; // - padding.left - padding.right;\n      var w = bbox.width + padding.left + padding.right;\n      var h = bbox.height + padding.top + padding.bottom;\n      var paddingWidth = minWidth ? Math.max(minWidth, w) : definedWidth || w;\n      var paddingHeight = this.definedHeight || h;\n      this._paddingWidth = paddingWidth;\n      this._paddingHeight = paddingHeight;\n\n      // shapeBox\n      var _shapeShift3 = shapeShift(paddingWidth, paddingHeight, this._shape),\n        _shapeShift4 = groupFactory_slicedToArray(_shapeShift3, 2),\n        shapeWidth = _shapeShift4[0],\n        shapeHeight = _shapeShift4[1];\n      this._shape.width = shapeWidth;\n      this._shape.height = shapeHeight;\n      // marginBox\n      var margin = this.margin;\n      this.width = shapeWidth + margin.left + margin.right;\n      this.height = shapeHeight + margin.top + margin.bottom;\n    },\n    _getViewBox: function _getViewBox() {\n      var belongs_vbox = this._belongs.getCacheViewBox();\n      var cacheViewBox = this._cacheViewBox;\n      this._calculatePointBackWithPoint(belongs_vbox[0], belongs_vbox[1], cacheViewBox, 0, 1);\n      this._calculatePointBackWithPoint(belongs_vbox[2], belongs_vbox[3], cacheViewBox, 2, 3);\n      return this._cacheViewBox;\n    },\n    getCacheViewBox: function getCacheViewBox() {\n      return this._cacheViewBox;\n    },\n    render: function render(ctx) {\n      ctx.save();\n      if (this._isMoving) {\n        ctx.globalAlpha = 0.6;\n      } else if (this.opacity !== 1) {\n        ctx.globalAlpha = this.opacity;\n      }\n      var _this$_getCenter7 = this._getCenter(),\n        _this$_getCenter8 = groupFactory_slicedToArray(_this$_getCenter7, 2),\n        cx = _this$_getCenter8[0],\n        cy = _this$_getCenter8[1];\n      this._shape.render(ctx);\n      ctx.translate(cx, cy);\n      this._stack.render(ctx);\n      // this._linkStack.render(ctx);    \n      ctx.translate(-cx, -cy);\n      ctx.restore();\n\n      // ctx.save();\n      // ctx.beginPath();\n      // ctx.arc(cx, cy, 5, 0, Math.PI*2);\n      // ctx.fillStyle = \'rgb(0,0,0)\'\n      // ctx.fill();\n      // ctx.restore();\n    },\n    isHit: function isHit(point, condition) {\n      var p = this._calculatePointBack(point);\n      this._currentp = p; // 暂存，为了后续计算别的位置\n      var target = this._stack.checkHit(p, condition);\n      if (target) return target;\n      if (!this.transparent) {\n        return this._shape.isHit(point);\n      }\n      return false;\n    }\n  });\n  return t;\n}\n/* harmony default export */ const groupFactory = (GroupFactory);\n;// CONCATENATED MODULE: ./src/core/instance/shapes/point.js\nfunction point_typeof(obj) { "@babel/helpers - typeof"; return point_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, point_typeof(obj); }\nfunction point_defineProperty(obj, key, value) { key = point_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction point_slicedToArray(arr, i) { return point_arrayWithHoles(arr) || point_iterableToArrayLimit(arr, i) || point_unsupportedIterableToArray(arr, i) || point_nonIterableRest(); }\nfunction point_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction point_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return point_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return point_arrayLikeToArray(o, minLen); }\nfunction point_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction point_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction point_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction point_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction point_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, point_toPropertyKey(descriptor.key), descriptor); } }\nfunction point_createClass(Constructor, protoProps, staticProps) { if (protoProps) point_defineProperties(Constructor.prototype, protoProps); if (staticProps) point_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction point_toPropertyKey(arg) { var key = point_toPrimitive(arg, "string"); return point_typeof(key) === "symbol" ? key : String(key); }\nfunction point_toPrimitive(input, hint) { if (point_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (point_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction point_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) point_setPrototypeOf(subClass, superClass); }\nfunction point_setPrototypeOf(o, p) { point_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return point_setPrototypeOf(o, p); }\nfunction point_createSuper(Derived) { var hasNativeReflectConstruct = point_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = point_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = point_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return point_possibleConstructorReturn(this, result); }; }\nfunction point_possibleConstructorReturn(self, call) { if (call && (point_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return point_assertThisInitialized(self); }\nfunction point_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction point_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction point_getPrototypeOf(o) { point_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return point_getPrototypeOf(o); }\n\n\n/**\n * 圆形单元 配置\n * @typedef {Node~Configs} Point~PointConfigs\n * @property {number} radius  - 半径\n */\n/**\n * 圆形节点\n * @constructor Point\n * @extends Node\n * @param {Point~PointConfigs} configs - 配置\n */\nvar Point = /*#__PURE__*/function (_Node) {\n  point_inherits(Point, _Node);\n  var _super = point_createSuper(Point);\n  function Point(configs) {\n    var _this;\n    point_classCallCheck(this, Point);\n    _this = _super.call(this, configs);\n    _this.type = \'Point\';\n    /** @member {Number}      - 半径 */\n    _this.radius = configs.radius || 10;\n    _this._doCache();\n    return _this;\n  }\n  point_createClass(Point, [{\n    key: "setConfig",\n    value: function setConfig(configs) {\n      var _this2 = this;\n      Object.keys(configs).forEach(function (k) {\n        if (configs[k] !== undefined && configs[k] !== null) {\n          _this2[k] = configs[k];\n          _this2._rawConfigs[k] = configs[k];\n        }\n      });\n      this._doCache();\n    }\n  }, {\n    key: "_doCache",\n    value: function _doCache() {\n      this.width = this.radius * 2;\n      this.height = this.radius * 2;\n    }\n  }, {\n    key: "render",\n    value: function render(ctx) {\n      ctx.save();\n      if (this._isMoving) {\n        ctx.globalAlpha = 0.6;\n      }\n      ctx.beginPath();\n      ctx.arc(this.anchor[0], this.anchor[1], this.radius, 0, 2 * Math.PI);\n      ctx.fillStyle = this.backgroundColor;\n      ctx.fill();\n      if (this.borderWidth) {\n        ctx.lineWidth = this.borderWidth;\n        ctx.strokeStyle = this.borderColor;\n        ctx.stroke();\n      }\n      // if(this._isTargeting) {\n      //     this.renderFocus(ctx);\n      // }\n      ctx.restore();\n    }\n  }, {\n    key: "isHit",\n    value: function isHit(point) {\n      var anchor = this.anchor;\n      return Math.pow(point[0] - anchor[0], 2) + Math.pow(point[1] - anchor[1], 2) < this.radius * this.radius;\n    }\n  }, {\n    key: "getBoundingRect",\n    value: function getBoundingRect() {\n      var anchor = this.anchor;\n      var r = this.radius;\n      var ltx = anchor[0] - r;\n      var lty = anchor[1] - r;\n      var rbx = anchor[0] + r;\n      var rby = anchor[1] + r;\n      var br = this._boundingrect;\n      br[0] = ltx;\n      br[1] = lty;\n      br[2] = rbx;\n      br[3] = rby;\n      return br;\n    }\n  }, {\n    key: "calculateIntersection",\n    value: function calculateIntersection(point) {\n      var _point = point_slicedToArray(point, 2),\n        x1 = _point[0],\n        y1 = _point[1];\n      var _this$anchor = point_slicedToArray(this.anchor, 2),\n        x2 = _this$anchor[0],\n        y2 = _this$anchor[1];\n      var vecx = x2 - x1;\n      var vecy = y2 - y1;\n      var dist = Math.sqrt(vecx * vecx + vecy * vecy);\n      var ratio = this.radius / dist;\n      return [x2 - ratio * vecx, y2 - ratio * vecy];\n    }\n  }, {\n    key: "getIntersectionsInFourDimension",\n    value: function getIntersectionsInFourDimension() {\n      var _ref;\n      var _this$anchor2 = point_slicedToArray(this.anchor, 2),\n        x2 = _this$anchor2[0],\n        y2 = _this$anchor2[1];\n      var r = this.radius;\n      return _ref = {}, point_defineProperty(_ref, DIRECTION.RIGHT, [x2 + r, y2]), point_defineProperty(_ref, DIRECTION.LEFT, [x2 - r, y2]), point_defineProperty(_ref, DIRECTION.BOTTOM, [x2, y2 + r]), point_defineProperty(_ref, DIRECTION.TOP, [x2, y2 - r]), _ref;\n    }\n  }, {\n    key: "calculateIntersectionInFourDimension",\n    value: function calculateIntersectionInFourDimension(point, end) {\n      var _allIntersections;\n      var _point2 = point_slicedToArray(point, 2),\n        x1 = _point2[0],\n        y1 = _point2[1];\n      var _this$anchor3 = point_slicedToArray(this.anchor, 2),\n        x2 = _this$anchor3[0],\n        y2 = _this$anchor3[1];\n      var r = this.radius;\n      var vecx = x2 - x1;\n      var vecy = y2 - y1;\n      var allIntersections = (_allIntersections = {}, point_defineProperty(_allIntersections, DIRECTION.RIGHT, [x2 + r, y2]), point_defineProperty(_allIntersections, DIRECTION.LEFT, [x2 - r, y2]), point_defineProperty(_allIntersections, DIRECTION.BOTTOM, [x2, y2 + r]), point_defineProperty(_allIntersections, DIRECTION.TOP, [x2, y2 - r]), _allIntersections);\n      // console.log(Math.abs(vecx) > Math.abs(vecy), vecx, r)\n      // if() {\n      //     return {\n      //         p: [x2 + (vecx<0?r:-r), y2],\n      //         dir: vecx<0 ? DIRECTION.RIGHT : DIRECTION.LEFT,\n      //     }\n      // } else {\n      //     return {\n      //         p: [x2, y2+(vecy<0?r:-r)],\n      //         dir: vecy<0 ? DIRECTION.BOTTOM : DIRECTION.TOP,\n      //     }\n      // }\n      var interDir = Math.abs(vecy) > Math.abs(vecx) ? vecy < 0 ? DIRECTION.BOTTOM : DIRECTION.TOP : vecx < 0 ? DIRECTION.RIGHT : DIRECTION.LEFT;\n\n      // interDir = this.checkLinked(interDir, end);\n      return {\n        p: allIntersections[interDir],\n        dir: interDir\n      };\n    }\n  }, {\n    key: "getBoundingDimension",\n    value: function getBoundingDimension() {\n      return {\n        width: this.width,\n        height: this.height\n      };\n    }\n  }]);\n  return Point;\n}(node);\n/* harmony default export */ const point = (Point);\n;// CONCATENATED MODULE: ./src/core/instance/shapes/rectangle.js\nfunction rectangle_typeof(obj) { "@babel/helpers - typeof"; return rectangle_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, rectangle_typeof(obj); }\nfunction rectangle_defineProperty(obj, key, value) { key = rectangle_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction rectangle_slicedToArray(arr, i) { return rectangle_arrayWithHoles(arr) || rectangle_iterableToArrayLimit(arr, i) || rectangle_unsupportedIterableToArray(arr, i) || rectangle_nonIterableRest(); }\nfunction rectangle_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction rectangle_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return rectangle_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return rectangle_arrayLikeToArray(o, minLen); }\nfunction rectangle_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction rectangle_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction rectangle_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction rectangle_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction rectangle_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, rectangle_toPropertyKey(descriptor.key), descriptor); } }\nfunction rectangle_createClass(Constructor, protoProps, staticProps) { if (protoProps) rectangle_defineProperties(Constructor.prototype, protoProps); if (staticProps) rectangle_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction rectangle_toPropertyKey(arg) { var key = rectangle_toPrimitive(arg, "string"); return rectangle_typeof(key) === "symbol" ? key : String(key); }\nfunction rectangle_toPrimitive(input, hint) { if (rectangle_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (rectangle_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction rectangle_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) rectangle_setPrototypeOf(subClass, superClass); }\nfunction rectangle_setPrototypeOf(o, p) { rectangle_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return rectangle_setPrototypeOf(o, p); }\nfunction rectangle_createSuper(Derived) { var hasNativeReflectConstruct = rectangle_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = rectangle_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = rectangle_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return rectangle_possibleConstructorReturn(this, result); }; }\nfunction rectangle_possibleConstructorReturn(self, call) { if (call && (rectangle_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return rectangle_assertThisInitialized(self); }\nfunction rectangle_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction rectangle_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction rectangle_getPrototypeOf(o) { rectangle_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return rectangle_getPrototypeOf(o); }\n\n\n/**\n * @typedef Rectangle~border\n * @type {object}\n * @property {number} borderColor      - 边框宽度, 默认 0\n * @property {number} borderWidth      - 边框颜色, 默认 transparent\n */\n/**\n * @typedef Rectangle~borders\n * @type {object}\n * @property {Rectangle~border} top      - 上边框\n * @property {Rectangle~border} right      - 右边框\n * @property {Rectangle~border} bottom      - 下边框\n * @property {Rectangle~border} left      - 左边框\n */\n\n/**\n * 矩形单元 配置\n * @typedef {Node~Configs} Rectangle~RectangleConfigs\n * @property {number} width - 宽\n * @property {number} height - 高\n * @property {number} borderRadius - 圆角矩形半径\n * @property {string} borderColor - 边框颜色, 默认 transparent\n * @property {string} borderWidth - 边框宽度, 默认 0\n * @property {Rectangle~borders} border      - 边框设置\n */\n/**\n * 矩形单元\n * @constructor Rectangle\n * @extends Node\n * @param {Rectangle~RectangleConfigs} configs\n */\nvar Rectangle = /*#__PURE__*/function (_Node) {\n  rectangle_inherits(Rectangle, _Node);\n  var _super = rectangle_createSuper(Rectangle);\n  function Rectangle() {\n    var _this;\n    var configs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    rectangle_classCallCheck(this, Rectangle);\n    _this = _super.call(this, configs);\n    _this.type = \'Rectangle\';\n    /** @member {Number}      - 宽 */\n    _this.width = configs.width || 10;\n    /** @member {Number}      - 高 */\n    _this.height = configs.height || 10;\n    /** @member {Number}      - 圆角矩形半径 */\n    _this.borderRadius = configs.borderRadius || 0;\n    _this._setBorder(configs);\n    return _this;\n  }\n  rectangle_createClass(Rectangle, [{\n    key: "_setBorder",\n    value: function _setBorder(configs) {\n      var _configs$border, _configs$border2, _configs$border3, _configs$border4, _configs$border5, _configs$border6, _configs$border7, _configs$border8, _configs$border9, _configs$border10, _configs$border11, _configs$border12;\n      /** @member {Rectangle~borders}      - 边框设置，优先级高于 borderWidth，borderColor */\n      this.border = {\n        top: {\n          color: ((_configs$border = configs.border) === null || _configs$border === void 0 || (_configs$border = _configs$border.top) === null || _configs$border === void 0 ? void 0 : _configs$border.borderColor) || configs.borderColor || \'transparent\',\n          width: ((_configs$border2 = configs.border) === null || _configs$border2 === void 0 || (_configs$border2 = _configs$border2.top) === null || _configs$border2 === void 0 ? void 0 : _configs$border2.borderWidth) || configs.borderWidth || 0,\n          enable: (_configs$border3 = configs.border) === null || _configs$border3 === void 0 || (_configs$border3 = _configs$border3.top) === null || _configs$border3 === void 0 ? void 0 : _configs$border3.borderWidth\n        },\n        right: {\n          color: ((_configs$border4 = configs.border) === null || _configs$border4 === void 0 || (_configs$border4 = _configs$border4.right) === null || _configs$border4 === void 0 ? void 0 : _configs$border4.borderColor) || configs.borderColor || \'transparent\',\n          width: ((_configs$border5 = configs.border) === null || _configs$border5 === void 0 || (_configs$border5 = _configs$border5.right) === null || _configs$border5 === void 0 ? void 0 : _configs$border5.borderWidth) || configs.borderWidth || 0,\n          enable: (_configs$border6 = configs.border) === null || _configs$border6 === void 0 || (_configs$border6 = _configs$border6.right) === null || _configs$border6 === void 0 ? void 0 : _configs$border6.borderWidth\n        },\n        bottom: {\n          color: ((_configs$border7 = configs.border) === null || _configs$border7 === void 0 || (_configs$border7 = _configs$border7.bottom) === null || _configs$border7 === void 0 ? void 0 : _configs$border7.borderColor) || configs.borderColor || \'transparent\',\n          width: ((_configs$border8 = configs.border) === null || _configs$border8 === void 0 || (_configs$border8 = _configs$border8.bottom) === null || _configs$border8 === void 0 ? void 0 : _configs$border8.borderWidth) || configs.borderWidth || 0,\n          enable: (_configs$border9 = configs.border) === null || _configs$border9 === void 0 || (_configs$border9 = _configs$border9.bottom) === null || _configs$border9 === void 0 ? void 0 : _configs$border9.borderWidth\n        },\n        left: {\n          color: ((_configs$border10 = configs.border) === null || _configs$border10 === void 0 || (_configs$border10 = _configs$border10.left) === null || _configs$border10 === void 0 ? void 0 : _configs$border10.borderColor) || configs.borderColor || \'transparent\',\n          width: ((_configs$border11 = configs.border) === null || _configs$border11 === void 0 || (_configs$border11 = _configs$border11.left) === null || _configs$border11 === void 0 ? void 0 : _configs$border11.borderWidth) || configs.borderWidth || 0,\n          enable: (_configs$border12 = configs.border) === null || _configs$border12 === void 0 || (_configs$border12 = _configs$border12.left) === null || _configs$border12 === void 0 ? void 0 : _configs$border12.borderWidth\n        }\n      };\n      this.borderColor = configs.borderColor || \'transparent\';\n      this.borderWidth = configs.borderWidth || 0;\n    }\n  }, {\n    key: "setConfig",\n    value: function setConfig(configs) {\n      var _this2 = this;\n      Object.keys(configs).forEach(function (k) {\n        if (configs[k] !== undefined && configs[k] !== null) {\n          _this2[k] = configs[k];\n          _this2._rawConfigs[k] = configs[k];\n        }\n      });\n      this._setBorder(configs);\n    }\n  }, {\n    key: "render",\n    value: function render(ctx) {\n      ctx.save();\n      if (this._isMoving) {\n        ctx.globalAlpha = 0.6;\n      }\n      var radius = this.borderRadius,\n        anchor = this.anchor,\n        width = this.width,\n        height = this.height;\n      var x = this.anchor[0] - this.width / 2;\n      var y = this.anchor[1] - this.height / 2;\n      var xt = this.anchor[0] + this.width / 2;\n      var yt = this.anchor[1] + this.height / 2;\n      if (this.borderRadius) {\n        ctx.beginPath();\n        ctx.moveTo(x + radius, y);\n        ctx.lineTo(x + width - radius, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n        ctx.lineTo(x + width, y + height - radius);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n        ctx.lineTo(x + radius, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n        ctx.lineTo(x, y + radius);\n        ctx.quadraticCurveTo(x, y, x + radius, y);\n        ctx.closePath();\n      } else {\n        ctx.beginPath();\n        ctx.rect(this.anchor[0] - this.width / 2, this.anchor[1] - this.height / 2, this.width, this.height);\n      }\n      if (this.borderWidth) {\n        ctx.lineWidth = this.borderWidth;\n        ctx.strokeStyle = this.borderColor;\n      }\n      if (this.shadowColor && this.shadowColor !== \'transparent\') {\n        ctx.shadowColor = this.shadowColor;\n        var scale = this._jflow.scale;\n        ctx.shadowBlur = this.shadowBlur * scale;\n        ctx.shadowOffsetX = this.shadowOffsetX * scale;\n        ctx.shadowOffsetY = this.shadowOffsetY * scale;\n        var switchPath = new Path2D();\n        if (this.borderRadius) {\n          switchPath.moveTo(x + radius, y);\n          switchPath.lineTo(x + width - radius, y);\n          switchPath.quadraticCurveTo(x + width, y, x + width, y + radius);\n          switchPath.lineTo(x + width, y + height - radius);\n          switchPath.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n          switchPath.lineTo(x + radius, y + height);\n          switchPath.quadraticCurveTo(x, y + height, x, y + height - radius);\n          switchPath.lineTo(x, y + radius);\n          switchPath.quadraticCurveTo(x, y, x + radius, y);\n          switchPath.closePath();\n        } else {\n          switchPath.rect(this.anchor[0] - this.width / 2, this.anchor[1] - this.height / 2, this.width, this.height);\n        }\n        switchPath.rect(x - 10, y - 10, this.width + 20, this.height + 20);\n        ctx.save();\n        ctx.clip(switchPath, "evenodd");\n        ctx.stroke();\n        ctx.restore();\n      }\n      ctx.fillStyle = this.backgroundColor;\n      ctx.fill();\n      if (this.borderRadius && this.borderWidth) {\n        ctx.shadowColor = \'transparent\';\n        ctx.stroke();\n      }\n      if (this.borderRadius) {\n        if (this.border.top.enable) {\n          var ty = y - this.border.top.width / 2;\n          // console.log(this.border.top.width)\n          ctx.beginPath();\n          var topPath = new Path2D();\n          topPath.moveTo(x, ty + radius);\n          topPath.quadraticCurveTo(x, ty, x + radius, ty);\n          topPath.lineTo(x + width - radius, ty);\n          topPath.quadraticCurveTo(x + width, ty, x + width, ty + radius);\n          topPath.closePath();\n          ctx.clip(topPath);\n          ctx.save();\n          ctx.shadowColor = \'transparent\';\n          ctx.fillStyle = this.border.top.color;\n          ctx.rect(x, ty, this.width, this.border.top.width);\n          ctx.fill();\n          ctx.restore();\n\n          // ctx.stroke();\n          // ctx.save();\n          // ctx.beginPath();\n          // ctx.moveTo(x, ty + radius);\n          // ctx.quadraticCurveTo(x, ty, x + radius, ty);\n          // ctx.lineTo(x + width - radius, ty);\n          // ctx.quadraticCurveTo(x + width, ty, x + width, ty + radius);\n          // ctx.closePath();\n\n          // // ctx.fill();\n          // ctx.clip();\n\n          // ctx.beginPath();\n          // ctx.rect(x, ty, this.width, this.border.top.width);\n          // ctx.fillStyle = this.border.top.color;\n          // ctx.shadowColor = \'transparent\';\n          // ctx.fill();\n          // ctx.restore();\n        }\n      } else {\n        if (this.border.top.width) {\n          ctx.beginPath();\n          ctx.moveTo(x, y);\n          ctx.lineTo(xt, y);\n          ctx.strokeStyle = this.border.top.color;\n          ctx.lineWidth = this.border.top.width;\n          ctx.stroke();\n        }\n        if (this.border.right.width) {\n          ctx.beginPath();\n          ctx.moveTo(xt, y);\n          ctx.lineTo(xt, yt);\n          ctx.strokeStyle = this.border.right.color;\n          ctx.lineWidth = this.border.right.width;\n          ctx.stroke();\n        }\n        if (this.border.bottom.width) {\n          ctx.beginPath();\n          ctx.moveTo(xt, yt);\n          ctx.lineTo(x, yt);\n          ctx.strokeStyle = this.border.bottom.color;\n          ctx.lineWidth = this.border.bottom.width;\n          ctx.stroke();\n        }\n        if (this.border.left.width) {\n          ctx.beginPath();\n          ctx.moveTo(x, yt);\n          ctx.lineTo(x, y);\n          ctx.strokeStyle = this.border.left.color;\n          ctx.lineWidth = this.border.left.width;\n          ctx.stroke();\n        }\n      }\n      ctx.restore();\n    }\n  }, {\n    key: "isHit",\n    value: function isHit(point) {\n      var anchor = this.anchor;\n      var w = this.width / 2;\n      var h = this.height / 2;\n      return point[0] > anchor[0] - w && point[0] < anchor[0] + w && point[1] > anchor[1] - h && point[1] < anchor[1] + h;\n    }\n  }, {\n    key: "getBoundingRect",\n    value: function getBoundingRect() {\n      var anchor = this.anchor;\n      var w = this.width / 2;\n      var h = this.height / 2;\n      var ltx = anchor[0] - w;\n      var lty = anchor[1] - h;\n      var rbx = anchor[0] + w;\n      var rby = anchor[1] + h;\n      var br = this._boundingrect;\n      br[0] = ltx;\n      br[1] = lty;\n      br[2] = rbx;\n      br[3] = rby;\n      return br;\n    }\n  }, {\n    key: "getBoundingDimension",\n    value: function getBoundingDimension() {\n      return {\n        height: this.height,\n        width: this.width\n      };\n    }\n  }, {\n    key: "calculateIntersection",\n    value: function calculateIntersection(point) {\n      var _point = rectangle_slicedToArray(point, 2),\n        x1 = _point[0],\n        y1 = _point[1];\n      var _this$anchor = rectangle_slicedToArray(this.anchor, 2),\n        x2 = _this$anchor[0],\n        y2 = _this$anchor[1];\n      var w = this.width / 2;\n      var h = this.height / 2;\n      var vecx = x2 - x1;\n      var vecy = y2 - y1;\n      var theta1 = h / w;\n      var theta2 = Math.abs(vecy / vecx);\n      var dirx = x1 > x2;\n      var diry = y1 > y2;\n      var x, y;\n      if (theta2 < theta1) {\n        x = x2 + (dirx ? w : -w);\n        y = w * (diry ? theta2 : -theta2) + y2;\n      } else {\n        y = y2 + (diry ? h : -h);\n        x = h / (dirx ? theta2 : -theta2) + x2;\n      }\n      return [x, y];\n    }\n  }, {\n    key: "getIntersectionsInFourDimension",\n    value: function getIntersectionsInFourDimension() {\n      var _ref;\n      var p2 = this.anchor;\n      if (this._belongs && this._belongs.calculateToCoordination) {\n        p2 = this._belongs.calculateToCoordination(p2);\n      }\n      var _p = p2,\n        _p2 = rectangle_slicedToArray(_p, 2),\n        x2 = _p2[0],\n        y2 = _p2[1];\n      var w = this.width / 2;\n      var h = this.height / 2;\n      return _ref = {}, rectangle_defineProperty(_ref, DIRECTION.RIGHT, [x2 + w, y2]), rectangle_defineProperty(_ref, DIRECTION.LEFT, [x2 - w, y2]), rectangle_defineProperty(_ref, DIRECTION.BOTTOM, [x2, y2 + h]), rectangle_defineProperty(_ref, DIRECTION.TOP, [x2, y2 - h]), _ref;\n    }\n  }, {\n    key: "calculateIntersectionInFourDimension",\n    value: function calculateIntersectionInFourDimension(point, end) {\n      var _allIntersections;\n      var _point2 = rectangle_slicedToArray(point, 2),\n        x1 = _point2[0],\n        y1 = _point2[1];\n      var p2 = this.anchor;\n      if (this._belongs && this._belongs.calculateToCoordination) {\n        p2 = this._belongs.calculateToCoordination(p2);\n      }\n      var _p3 = p2,\n        _p4 = rectangle_slicedToArray(_p3, 2),\n        x2 = _p4[0],\n        y2 = _p4[1];\n      var w = this.width / 2;\n      var h = this.height / 2;\n      var allIntersections = (_allIntersections = {}, rectangle_defineProperty(_allIntersections, DIRECTION.RIGHT, [x2 + w, y2]), rectangle_defineProperty(_allIntersections, DIRECTION.LEFT, [x2 - w, y2]), rectangle_defineProperty(_allIntersections, DIRECTION.BOTTOM, [x2, y2 + h]), rectangle_defineProperty(_allIntersections, DIRECTION.TOP, [x2, y2 - h]), _allIntersections);\n      var vecx = x2 - x1;\n      var vecy = y2 - y1;\n      var theta1 = h / w;\n      var theta2 = Math.abs(vecy / vecx);\n      var dirx = x1 > x2;\n      var diry = y1 > y2;\n      var interDir = theta2 > theta1 ? diry ? DIRECTION.BOTTOM : DIRECTION.TOP : dirx ? DIRECTION.RIGHT : DIRECTION.LEFT;\n\n      // if(this._belongs && this._belongs.calculateToCoordination) {\n      //     console.log(JSON.stringify(this._intersections));\n      //     console.log(interDir)\n      // }\n      // interDir = this.checkLinked(interDir, end);\n      // if(this._belongs && this._belongs.calculateToCoordination) {\n      //     console.log(interDir)\n      // }\n\n      // if(!interDir) {\n      //     debugger\n      // }\n      // let endDir = interDir;\n      // if(end === \'to\') {\n      //     endDir = oppositeDirection(endDir)\n      // }\n      return {\n        p: allIntersections[interDir],\n        dir: interDir\n      };\n    }\n  }]);\n  return Rectangle;\n}(node);\n/* harmony default export */ const rectangle = (Rectangle);\n;// CONCATENATED MODULE: ./src/core/instance/shapes/capsule.js\nfunction capsule_typeof(obj) { "@babel/helpers - typeof"; return capsule_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, capsule_typeof(obj); }\nfunction capsule_defineProperty(obj, key, value) { key = capsule_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction capsule_slicedToArray(arr, i) { return capsule_arrayWithHoles(arr) || capsule_iterableToArrayLimit(arr, i) || capsule_unsupportedIterableToArray(arr, i) || capsule_nonIterableRest(); }\nfunction capsule_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction capsule_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return capsule_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return capsule_arrayLikeToArray(o, minLen); }\nfunction capsule_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction capsule_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction capsule_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction capsule_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction capsule_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, capsule_toPropertyKey(descriptor.key), descriptor); } }\nfunction capsule_createClass(Constructor, protoProps, staticProps) { if (protoProps) capsule_defineProperties(Constructor.prototype, protoProps); if (staticProps) capsule_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction capsule_toPropertyKey(arg) { var key = capsule_toPrimitive(arg, "string"); return capsule_typeof(key) === "symbol" ? key : String(key); }\nfunction capsule_toPrimitive(input, hint) { if (capsule_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (capsule_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction capsule_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) capsule_setPrototypeOf(subClass, superClass); }\nfunction capsule_setPrototypeOf(o, p) { capsule_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return capsule_setPrototypeOf(o, p); }\nfunction capsule_createSuper(Derived) { var hasNativeReflectConstruct = capsule_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = capsule_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = capsule_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return capsule_possibleConstructorReturn(this, result); }; }\nfunction capsule_possibleConstructorReturn(self, call) { if (call && (capsule_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return capsule_assertThisInitialized(self); }\nfunction capsule_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction capsule_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction capsule_getPrototypeOf(o) { capsule_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return capsule_getPrototypeOf(o); }\n\n\n/**\n * 胶囊单元 配置\n * @typedef {Node~Configs} Capsule~CapsuleConfigs\n * @property {number} width  - 内部矩形宽\n * @property {number} height - 内部矩形高\n */\n/**\n * 胶囊单元\n * @constructor Capsule\n * @extends Node\n * @param {Capsule~CapsuleConfigs} configs - 配置\n */\nvar Capsule = /*#__PURE__*/function (_Node) {\n  capsule_inherits(Capsule, _Node);\n  var _super = capsule_createSuper(Capsule);\n  function Capsule() {\n    var _this;\n    var configs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    capsule_classCallCheck(this, Capsule);\n    _this = _super.call(this, configs);\n    _this.type = \'Capsule\';\n    /** @member {Number}      - 内部矩形宽 */\n    _this.width = configs.width || 20;\n    /** @member {Number}      - 内部矩形高 */\n    _this.height = configs.height || 10;\n    return _this;\n  }\n  capsule_createClass(Capsule, [{\n    key: "render",\n    value: function render(ctx) {\n      ctx.save();\n      if (this._isMoving) {\n        ctx.globalAlpha = 0.6;\n      }\n      ctx.beginPath();\n      var _this$anchor = capsule_slicedToArray(this.anchor, 2),\n        x = _this$anchor[0],\n        y = _this$anchor[1];\n      var hw = this.width / 2;\n      var hh = this.height / 2;\n      var leftCenter = x - hw + hh;\n      var rightCenter = x + hw - hh;\n      var top = y - hh;\n      var bottom = y + hh;\n      ctx.moveTo(leftCenter, top);\n      ctx.lineTo(rightCenter, top);\n      ctx.arc(rightCenter, y, hh, -Math.PI / 2, Math.PI / 2);\n      ctx.lineTo(leftCenter, bottom);\n      ctx.arc(leftCenter, y, hh, Math.PI / 2, Math.PI / 2 * 3);\n      ctx.fillStyle = this.backgroundColor;\n      if (this.shadowColor) {\n        ctx.shadowColor = this.shadowColor;\n        ctx.shadowBlur = this.shadowBlur;\n        ctx.shadowOffsetX = this.shadowOffsetX;\n        ctx.shadowOffsetY = this.shadowOffsetY;\n      }\n      ctx.fill();\n      if (this.borderWidth) {\n        ctx.lineWidth = this.borderWidth;\n        ctx.strokeStyle = this.borderColor;\n        ctx.stroke();\n      }\n      // ctx.fillStyle = \'rgba(0,0,0,0.3)\';\n      // ctx.fillRect(x-hw, y-hh, this.width, this.height)\n\n      ctx.restore();\n    }\n  }, {\n    key: "isHit",\n    value: function isHit(point) {\n      var anchor = this.anchor;\n      var hw = this.width / 2;\n      var hh = this.height / 2;\n      var ww = Math.abs(hw - hh);\n      var leftCenter = anchor[0] - hw + hh;\n      var rightCenter = anchor[0] + hw - hh;\n      var rr = hh * hh;\n      return point[0] > anchor[0] - ww && point[0] < anchor[0] + ww && point[1] > anchor[1] - hh && point[1] < anchor[1] + hh || Math.pow(point[0] - leftCenter, 2) + Math.pow(point[1] - anchor[1], 2) < rr || Math.pow(point[0] - rightCenter, 2) + Math.pow(point[1] - anchor[1], 2) < rr;\n    }\n  }, {\n    key: "getBoundingRect",\n    value: function getBoundingRect() {\n      var anchor = this.anchor;\n      var w = this.width / 2;\n      var h = this.height / 2;\n      var ltx = anchor[0] - w;\n      var lty = anchor[1] - h;\n      var rbx = anchor[0] + w;\n      var rby = anchor[1] + h;\n      var br = this._boundingrect;\n      br[0] = ltx;\n      br[1] = lty;\n      br[2] = rbx;\n      br[3] = rby;\n      return br;\n    }\n  }, {\n    key: "getBoundingDimension",\n    value: function getBoundingDimension() {\n      return {\n        height: this.height,\n        width: this.width\n      };\n    }\n  }, {\n    key: "getIntersectionsInFourDimension",\n    value: function getIntersectionsInFourDimension() {\n      var _ref;\n      var p2 = this.anchor;\n      if (this._belongs && this._belongs.calculateToCoordination) {\n        p2 = this._belongs.calculateToCoordination(p2);\n      }\n      var _p = p2,\n        _p2 = capsule_slicedToArray(_p, 2),\n        x2 = _p2[0],\n        y2 = _p2[1];\n      var w = this.width / 2;\n      var h = this.height / 2;\n      return _ref = {}, capsule_defineProperty(_ref, DIRECTION.RIGHT, [x2 + w, y2]), capsule_defineProperty(_ref, DIRECTION.LEFT, [x2 - w, y2]), capsule_defineProperty(_ref, DIRECTION.BOTTOM, [x2, y2 + h]), capsule_defineProperty(_ref, DIRECTION.TOP, [x2, y2 - h]), _ref;\n    }\n  }]);\n  return Capsule;\n}(node);\n/* harmony default export */ const capsule = (Capsule);\n;// CONCATENATED MODULE: ./src/core/instance/shapes/capsule-vertical.js\nfunction capsule_vertical_typeof(obj) { "@babel/helpers - typeof"; return capsule_vertical_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, capsule_vertical_typeof(obj); }\nfunction capsule_vertical_slicedToArray(arr, i) { return capsule_vertical_arrayWithHoles(arr) || capsule_vertical_iterableToArrayLimit(arr, i) || capsule_vertical_unsupportedIterableToArray(arr, i) || capsule_vertical_nonIterableRest(); }\nfunction capsule_vertical_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction capsule_vertical_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return capsule_vertical_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return capsule_vertical_arrayLikeToArray(o, minLen); }\nfunction capsule_vertical_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction capsule_vertical_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction capsule_vertical_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction capsule_vertical_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction capsule_vertical_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, capsule_vertical_toPropertyKey(descriptor.key), descriptor); } }\nfunction capsule_vertical_createClass(Constructor, protoProps, staticProps) { if (protoProps) capsule_vertical_defineProperties(Constructor.prototype, protoProps); if (staticProps) capsule_vertical_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction capsule_vertical_toPropertyKey(arg) { var key = capsule_vertical_toPrimitive(arg, "string"); return capsule_vertical_typeof(key) === "symbol" ? key : String(key); }\nfunction capsule_vertical_toPrimitive(input, hint) { if (capsule_vertical_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (capsule_vertical_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction capsule_vertical_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) capsule_vertical_setPrototypeOf(subClass, superClass); }\nfunction capsule_vertical_setPrototypeOf(o, p) { capsule_vertical_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return capsule_vertical_setPrototypeOf(o, p); }\nfunction capsule_vertical_createSuper(Derived) { var hasNativeReflectConstruct = capsule_vertical_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = capsule_vertical_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = capsule_vertical_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return capsule_vertical_possibleConstructorReturn(this, result); }; }\nfunction capsule_vertical_possibleConstructorReturn(self, call) { if (call && (capsule_vertical_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return capsule_vertical_assertThisInitialized(self); }\nfunction capsule_vertical_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction capsule_vertical_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction capsule_vertical_getPrototypeOf(o) { capsule_vertical_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return capsule_vertical_getPrototypeOf(o); }\n\n/**\n * 垂直胶囊单元\n * @constructor CapsuleVertical\n * @extends Capsule\n * @param {Capsule~CapsuleConfigs} configs - 配置\n */\nvar CapsuleVertical = /*#__PURE__*/function (_Capsule) {\n  capsule_vertical_inherits(CapsuleVertical, _Capsule);\n  var _super = capsule_vertical_createSuper(CapsuleVertical);\n  function CapsuleVertical() {\n    capsule_vertical_classCallCheck(this, CapsuleVertical);\n    return _super.apply(this, arguments);\n  }\n  capsule_vertical_createClass(CapsuleVertical, [{\n    key: "render",\n    value: function render(ctx) {\n      ctx.save();\n      if (this._isMoving) {\n        ctx.globalAlpha = 0.6;\n      }\n      ctx.beginPath();\n      var _this$anchor = capsule_vertical_slicedToArray(this.anchor, 2),\n        x = _this$anchor[0],\n        y = _this$anchor[1];\n      var hw = this.width / 2;\n      var hh = this.height / 2;\n      var topCenter = y - hh + hw;\n      var bottomCenter = y + hh - hw;\n      var left = x - hw;\n      var right = x + hw;\n      ctx.moveTo(left, topCenter);\n      ctx.arc(x, topCenter, hw, -Math.PI, 0);\n      ctx.lineTo(right, bottomCenter);\n      ctx.arc(x, bottomCenter, hw, 0, Math.PI);\n      ctx.closePath();\n      ctx.fillStyle = this.backgroundColor;\n      if (this.shadowColor) {\n        ctx.shadowColor = this.shadowColor;\n        ctx.shadowBlur = this.shadowBlur;\n        ctx.shadowOffsetX = this.shadowOffsetX;\n        ctx.shadowOffsetY = this.shadowOffsetY;\n      }\n      ctx.fill();\n      if (this.borderWidth) {\n        ctx.lineWidth = this.borderWidth;\n        ctx.strokeStyle = this.borderColor;\n        ctx.stroke();\n      }\n      // ctx.fillStyle = \'rgba(0,0,0,0.3)\';\n      // ctx.fillRect(x-hw, y-hh, this.width, this.height)\n\n      ctx.restore();\n    }\n  }, {\n    key: "isHit",\n    value: function isHit(point, condition) {\n      var _this$anchor2 = capsule_vertical_slicedToArray(this.anchor, 2),\n        x = _this$anchor2[0],\n        y = _this$anchor2[1];\n      var hw = this.width / 2;\n      var hh = this.height / 2;\n      var yy = Math.abs(hh - hw);\n      var topCenter = y - hh + hw;\n      var bottomCenter = y + hh - hw;\n      var rr = hw * hw;\n      return point[0] > x - hw && point[0] < x + hw && point[1] > y - yy && point[1] < y + yy || Math.pow(point[0] - x, 2) + Math.pow(point[1] - topCenter, 2) < rr || Math.pow(point[0] - x, 2) + Math.pow(point[1] - bottomCenter, 2) < rr;\n    }\n  }]);\n  return CapsuleVertical;\n}(capsule);\n/* harmony default export */ const capsule_vertical = (CapsuleVertical);\n;// CONCATENATED MODULE: ./src/core/instance/shapes/rhombus.js\nfunction rhombus_typeof(obj) { "@babel/helpers - typeof"; return rhombus_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, rhombus_typeof(obj); }\nfunction rhombus_defineProperty(obj, key, value) { key = rhombus_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction rhombus_slicedToArray(arr, i) { return rhombus_arrayWithHoles(arr) || rhombus_iterableToArrayLimit(arr, i) || rhombus_unsupportedIterableToArray(arr, i) || rhombus_nonIterableRest(); }\nfunction rhombus_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction rhombus_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return rhombus_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return rhombus_arrayLikeToArray(o, minLen); }\nfunction rhombus_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction rhombus_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction rhombus_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction rhombus_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction rhombus_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, rhombus_toPropertyKey(descriptor.key), descriptor); } }\nfunction rhombus_createClass(Constructor, protoProps, staticProps) { if (protoProps) rhombus_defineProperties(Constructor.prototype, protoProps); if (staticProps) rhombus_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction rhombus_toPropertyKey(arg) { var key = rhombus_toPrimitive(arg, "string"); return rhombus_typeof(key) === "symbol" ? key : String(key); }\nfunction rhombus_toPrimitive(input, hint) { if (rhombus_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (rhombus_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction rhombus_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) rhombus_setPrototypeOf(subClass, superClass); }\nfunction rhombus_setPrototypeOf(o, p) { rhombus_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return rhombus_setPrototypeOf(o, p); }\nfunction rhombus_createSuper(Derived) { var hasNativeReflectConstruct = rhombus_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = rhombus_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = rhombus_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return rhombus_possibleConstructorReturn(this, result); }; }\nfunction rhombus_possibleConstructorReturn(self, call) { if (call && (rhombus_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return rhombus_assertThisInitialized(self); }\nfunction rhombus_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction rhombus_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction rhombus_getPrototypeOf(o) { rhombus_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return rhombus_getPrototypeOf(o); }\n\n\n/**\n * 菱形单元 配置\n * @typedef {Node~Configs} Rhombus~RhombusConfigs\n * @property {number} diagonalsV  - 内十字高度\n * @property {number} diagonalsH  - 内十字宽度\n */\n/**\n * 菱形单元\n * @constructor Rhombus\n * @param {Rhombus~RhombusConfigs} configs - 配置\n * @extends Node\n */\nvar Rhombus = /*#__PURE__*/function (_Node) {\n  rhombus_inherits(Rhombus, _Node);\n  var _super = rhombus_createSuper(Rhombus);\n  function Rhombus() {\n    var _this;\n    var configs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    rhombus_classCallCheck(this, Rhombus);\n    _this = _super.call(this, configs);\n    _this.type = \'Rhombus\';\n    /** @member {Number}      - 内十字高度 */\n    _this.height = configs.diagonalsV || 10;\n    /** @member {Number}      - 内十字宽度 */\n    _this.width = configs.diagonalsH || 20;\n    return _this;\n  }\n  rhombus_createClass(Rhombus, [{\n    key: "render",\n    value: function render(ctx) {\n      ctx.save();\n      if (this._isMoving) {\n        ctx.globalAlpha = 0.6;\n      }\n      var w = this.width / 2;\n      var h = this.height / 2;\n      var center = this.anchor;\n      ctx.translate(center[0], center[1]);\n      ctx.beginPath();\n      ctx.moveTo(0, -h);\n      ctx.lineTo(w, 0);\n      ctx.lineTo(0, h);\n      ctx.lineTo(-w, 0);\n      ctx.closePath();\n      if (this.borderWidth) {\n        ctx.lineWidth = this.borderWidth;\n        ctx.strokeStyle = this.borderColor;\n      }\n      if (this.shadowColor) {\n        ctx.shadowColor = this.shadowColor;\n        var scale = this._jflow.scale;\n        ctx.shadowBlur = this.shadowBlur * scale;\n        ctx.shadowOffsetX = this.shadowOffsetX * scale;\n        ctx.shadowOffsetY = this.shadowOffsetY * scale;\n        var switchPath = new Path2D();\n        switchPath.moveTo(0, -h);\n        switchPath.lineTo(w, 0);\n        switchPath.lineTo(0, h);\n        switchPath.lineTo(-w, 0);\n        switchPath.closePath();\n        switchPath.rect(-w - 10, -h - 10, this.width + 20, this.height + 20);\n        // switchPath.moveTo(x, y-h);\n        // switchPath.lineTo(x + w, y);\n        // switchPath.lineTo(x, y + h);\n        // switchPath.lineTo(x-w, y);\n        // switchPath.closePath();\n        // switchPath.rect(x - w - 10, y - h - 10, this.width+ 20, this.height+ 20);\n        ctx.save();\n        ctx.clip(switchPath, "evenodd");\n        ctx.stroke();\n        ctx.restore();\n      }\n      ctx.fillStyle = this.backgroundColor;\n      ctx.fill();\n      if (this.borderWidth) {\n        ctx.shadowColor = \'transparent\';\n        ctx.stroke();\n      }\n      ctx.translate(-center[0], -center[1]);\n      ctx.restore();\n    }\n  }, {\n    key: "isHit",\n    value: function isHit(point) {\n      var v = this.height / 2;\n      var h = this.width / 2;\n      var anchor = this.anchor;\n      var x = Math.abs(point[0] - anchor[0]);\n      var y = Math.abs(point[1] - anchor[1]);\n      return x / h + y / v <= 1;\n    }\n  }, {\n    key: "getBoundingRect",\n    value: function getBoundingRect() {\n      var anchor = this.anchor;\n      var w = this.width / 2;\n      var h = this.height / 2;\n      var ltx = anchor[0] - w;\n      var lty = anchor[1] - h;\n      var rbx = anchor[0] + w;\n      var rby = anchor[1] + h;\n      var br = this._boundingrect;\n      br[0] = ltx;\n      br[1] = lty;\n      br[2] = rbx;\n      br[3] = rby;\n      return br;\n    }\n  }, {\n    key: "getBoundingDimension",\n    value: function getBoundingDimension() {\n      return {\n        height: this.height,\n        width: this.width\n      };\n    }\n  }, {\n    key: "getIntersectionsInFourDimension",\n    value: function getIntersectionsInFourDimension() {\n      var _ref;\n      var p2 = this.anchor;\n      if (this._belongs && this._belongs.calculateToCoordination) {\n        p2 = this._belongs.calculateToCoordination(p2);\n      }\n      var _p = p2,\n        _p2 = rhombus_slicedToArray(_p, 2),\n        x2 = _p2[0],\n        y2 = _p2[1];\n      var w = this.width / 2;\n      var h = this.height / 2;\n      return _ref = {}, rhombus_defineProperty(_ref, DIRECTION.RIGHT, [x2 + w, y2]), rhombus_defineProperty(_ref, DIRECTION.LEFT, [x2 - w, y2]), rhombus_defineProperty(_ref, DIRECTION.BOTTOM, [x2, y2 + h]), rhombus_defineProperty(_ref, DIRECTION.TOP, [x2, y2 - h]), rhombus_defineProperty(_ref, DIRECTION.SELF, [x2 + w * 0.618, y2 + h * 0.618]), _ref;\n    }\n  }]);\n  return Rhombus;\n}(node);\n/* harmony default export */ const rhombus = (Rhombus);\n;// CONCATENATED MODULE: ./src/core/instance/shapes/diamond.js\nfunction diamond_typeof(obj) { "@babel/helpers - typeof"; return diamond_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, diamond_typeof(obj); }\nfunction diamond_defineProperty(obj, key, value) { key = diamond_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction diamond_slicedToArray(arr, i) { return diamond_arrayWithHoles(arr) || diamond_iterableToArrayLimit(arr, i) || diamond_unsupportedIterableToArray(arr, i) || diamond_nonIterableRest(); }\nfunction diamond_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction diamond_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return diamond_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return diamond_arrayLikeToArray(o, minLen); }\nfunction diamond_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction diamond_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction diamond_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction diamond_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction diamond_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, diamond_toPropertyKey(descriptor.key), descriptor); } }\nfunction diamond_createClass(Constructor, protoProps, staticProps) { if (protoProps) diamond_defineProperties(Constructor.prototype, protoProps); if (staticProps) diamond_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction diamond_toPropertyKey(arg) { var key = diamond_toPrimitive(arg, "string"); return diamond_typeof(key) === "symbol" ? key : String(key); }\nfunction diamond_toPrimitive(input, hint) { if (diamond_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (diamond_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction diamond_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) diamond_setPrototypeOf(subClass, superClass); }\nfunction diamond_setPrototypeOf(o, p) { diamond_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return diamond_setPrototypeOf(o, p); }\nfunction diamond_createSuper(Derived) { var hasNativeReflectConstruct = diamond_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = diamond_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = diamond_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return diamond_possibleConstructorReturn(this, result); }; }\nfunction diamond_possibleConstructorReturn(self, call) { if (call && (diamond_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return diamond_assertThisInitialized(self); }\nfunction diamond_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction diamond_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction diamond_getPrototypeOf(o) { diamond_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return diamond_getPrototypeOf(o); }\n\n\n// import { makeBezierPoints } from \'../../utils/functions\';\n/**\n * 钻石形单元 配置\n * @typedef {Node~Configs} Diamond~DiamondConfigs\n * @property {number} width  - 内部矩形宽\n * @property {number} height - 内部矩形高\n * @property {number} side   - 两侧三角形的宽\n */\n/**\n * 钻石形单元\n * @constructor Diamond\n * @param {Diamond~DiamondConfigs} configs - 配置\n * @extends Node\n */\nvar Diamond = /*#__PURE__*/function (_Node) {\n  diamond_inherits(Diamond, _Node);\n  var _super = diamond_createSuper(Diamond);\n  function Diamond() {\n    var _this;\n    var configs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    diamond_classCallCheck(this, Diamond);\n    _this = _super.call(this, configs);\n    _this.type = \'Diamond\';\n    /** @member {Number}      - 内部矩形宽 */\n    _this.width = configs.width || 20;\n    /** @member {Number}      - 内部矩形高 */\n    _this.height = configs.height || 10;\n    /** @member {Number}      - 两侧三角形的宽 */\n    _this.side = configs.side || 6;\n    _this._doCache();\n    return _this;\n  }\n  diamond_createClass(Diamond, [{\n    key: "setConfig",\n    value: function setConfig(configs) {\n      var _this2 = this;\n      Object.keys(configs).forEach(function (k) {\n        if (configs[k] !== undefined && configs[k] !== null) {\n          _this2[k] = configs[k];\n          _this2._rawConfigs[k] = configs[k];\n        }\n      });\n      this._doCache();\n    }\n  }, {\n    key: "_doCache",\n    value: function _doCache() {\n      this.sinSIDE = Math.sin(Math.PI / 3) * this.side;\n      this.cosSIDE = Math.cos(Math.PI / 3) * this.side;\n    }\n  }, {\n    key: "render",\n    value: function render(ctx) {\n      var _this$anchor = diamond_slicedToArray(this.anchor, 2),\n        x = _this$anchor[0],\n        y = _this$anchor[1];\n      var hw = this.width / 2;\n      var hh = this.height / 2;\n      var xx = hh / 1.732;\n      var leftCenter = x - hw + xx;\n      var rightCenter = x + hw - xx;\n      var right = x + hw;\n      var left = x - hw;\n      var top = y - hh;\n      var bottom = y + hh;\n      this._cachePoints = [[rightCenter, top], [right, y], [rightCenter, bottom], [leftCenter, bottom], [left, y], [leftCenter, top]];\n      ctx.save();\n      if (this._isMoving) {\n        ctx.globalAlpha = 0.6;\n      }\n      ctx.beginPath();\n      var side = this.side,\n        sinSIDE = this.sinSIDE,\n        cosSIDE = this.cosSIDE;\n      ctx.moveTo(x, top);\n      ctx.lineTo(rightCenter - side, top);\n      ctx.quadraticCurveTo(rightCenter, top, rightCenter + cosSIDE, top + sinSIDE);\n      ctx.lineTo(right - cosSIDE, y - sinSIDE);\n      ctx.quadraticCurveTo(right, y, right - cosSIDE, y + sinSIDE);\n      ctx.lineTo(rightCenter + cosSIDE, bottom - sinSIDE);\n      ctx.quadraticCurveTo(rightCenter, bottom, rightCenter - side, bottom);\n      ctx.lineTo(leftCenter + side, bottom);\n      ctx.quadraticCurveTo(leftCenter, bottom, leftCenter - cosSIDE, bottom - sinSIDE);\n      ctx.lineTo(left + cosSIDE, y + sinSIDE);\n      ctx.quadraticCurveTo(left, y, left + cosSIDE, y - sinSIDE);\n      ctx.lineTo(leftCenter - cosSIDE, top + sinSIDE);\n      ctx.quadraticCurveTo(leftCenter, top, leftCenter + side, top);\n      ctx.closePath();\n      ctx.fillStyle = this.backgroundColor;\n      if (this.shadowColor) {\n        ctx.shadowColor = this.shadowColor;\n        ctx.shadowBlur = this.shadowBlur;\n        ctx.shadowOffsetX = this.shadowOffsetX;\n        ctx.shadowOffsetY = this.shadowOffsetY;\n      }\n      ctx.fill();\n      if (this.borderWidth) {\n        ctx.lineWidth = this.borderWidth;\n        ctx.strokeStyle = this.borderColor;\n        ctx.stroke();\n      }\n\n      // if(this._isTargeting) {\n      //     this.renderFocus(ctx);\n      // }\n      // ctx.fillStyle = \'rgba(0,0,0,0.3)\';\n      // ctx.fillRect(x-hw, y-hh, this.width, this.height)\n\n      ctx.restore();\n    }\n  }, {\n    key: "isHit",\n    value: function isHit(point) {\n      if (!this._cachePoints) return false;\n      var polygon = this._cachePoints;\n      var odd = false;\n      // For each edge (In this case for each point of the polygon and the previous one)\n      for (var i = 0, j = polygon.length - 1; i < polygon.length; i++) {\n        // If a line from the point into infinity crosses this edge\n        if (polygon[i][1] > point[1] !== polygon[j][1] > point[1] // One point needs to be above, one below our y coordinate\n        // ...and the edge doesn\'t cross our Y corrdinate before our x coordinate (but between our x coordinate and infinity)\n        && point[0] < (polygon[j][0] - polygon[i][0]) * (point[1] - polygon[i][1]) / (polygon[j][1] - polygon[i][1]) + polygon[i][0]) {\n          // Invert odd\n          odd = !odd;\n        }\n        j = i;\n      }\n      return odd;\n    }\n  }, {\n    key: "getBoundingRect",\n    value: function getBoundingRect() {\n      var anchor = this.anchor;\n      var w = this.width / 2;\n      var h = this.height / 2;\n      var ltx = anchor[0] - w;\n      var lty = anchor[1] - h;\n      var rbx = anchor[0] + w;\n      var rby = anchor[1] + h;\n      var br = this._boundingrect;\n      br[0] = ltx;\n      br[1] = lty;\n      br[2] = rbx;\n      br[3] = rby;\n      return br;\n    }\n  }, {\n    key: "getBoundingDimension",\n    value: function getBoundingDimension() {\n      return {\n        height: this.height,\n        width: this.width\n      };\n    }\n  }, {\n    key: "getIntersectionsInFourDimension",\n    value: function getIntersectionsInFourDimension() {\n      var _ref;\n      var p2 = this.anchor;\n      if (this._belongs && this._belongs.calculateToCoordination) {\n        p2 = this._belongs.calculateToCoordination(p2);\n      }\n      var _p = p2,\n        _p2 = diamond_slicedToArray(_p, 2),\n        x2 = _p2[0],\n        y2 = _p2[1];\n      var w = this.width / 2;\n      var h = this.height / 2;\n      return _ref = {}, diamond_defineProperty(_ref, DIRECTION.RIGHT, [x2 + w, y2]), diamond_defineProperty(_ref, DIRECTION.LEFT, [x2 - w, y2]), diamond_defineProperty(_ref, DIRECTION.BOTTOM, [x2, y2 + h]), diamond_defineProperty(_ref, DIRECTION.TOP, [x2, y2 - h]), _ref;\n    }\n  }]);\n  return Diamond;\n}(node);\n/* harmony default export */ const diamond = (Diamond);\n;// CONCATENATED MODULE: ./src/core/instance/shapes/diamond-vertical.js\nfunction diamond_vertical_typeof(obj) { "@babel/helpers - typeof"; return diamond_vertical_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, diamond_vertical_typeof(obj); }\nfunction diamond_vertical_slicedToArray(arr, i) { return diamond_vertical_arrayWithHoles(arr) || diamond_vertical_iterableToArrayLimit(arr, i) || diamond_vertical_unsupportedIterableToArray(arr, i) || diamond_vertical_nonIterableRest(); }\nfunction diamond_vertical_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction diamond_vertical_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return diamond_vertical_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return diamond_vertical_arrayLikeToArray(o, minLen); }\nfunction diamond_vertical_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction diamond_vertical_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction diamond_vertical_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction diamond_vertical_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction diamond_vertical_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, diamond_vertical_toPropertyKey(descriptor.key), descriptor); } }\nfunction diamond_vertical_createClass(Constructor, protoProps, staticProps) { if (protoProps) diamond_vertical_defineProperties(Constructor.prototype, protoProps); if (staticProps) diamond_vertical_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction diamond_vertical_toPropertyKey(arg) { var key = diamond_vertical_toPrimitive(arg, "string"); return diamond_vertical_typeof(key) === "symbol" ? key : String(key); }\nfunction diamond_vertical_toPrimitive(input, hint) { if (diamond_vertical_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (diamond_vertical_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction diamond_vertical_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) diamond_vertical_setPrototypeOf(subClass, superClass); }\nfunction diamond_vertical_setPrototypeOf(o, p) { diamond_vertical_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return diamond_vertical_setPrototypeOf(o, p); }\nfunction diamond_vertical_createSuper(Derived) { var hasNativeReflectConstruct = diamond_vertical_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = diamond_vertical_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = diamond_vertical_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return diamond_vertical_possibleConstructorReturn(this, result); }; }\nfunction diamond_vertical_possibleConstructorReturn(self, call) { if (call && (diamond_vertical_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return diamond_vertical_assertThisInitialized(self); }\nfunction diamond_vertical_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction diamond_vertical_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction diamond_vertical_getPrototypeOf(o) { diamond_vertical_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return diamond_vertical_getPrototypeOf(o); }\n\nvar backsqrt3 = 1 / Math.sqrt(3);\n\n/**\n * 垂直钻石形单元\n * @constructor DiamondVertical\n * @param {Diamond~DiamondConfigs} configs - 配置\n * @extends Diamond\n */\nvar DiamondVertical = /*#__PURE__*/function (_Diamond) {\n  diamond_vertical_inherits(DiamondVertical, _Diamond);\n  var _super = diamond_vertical_createSuper(DiamondVertical);\n  function DiamondVertical(configs) {\n    diamond_vertical_classCallCheck(this, DiamondVertical);\n    return _super.call(this, configs);\n  }\n  diamond_vertical_createClass(DiamondVertical, [{\n    key: "render",\n    value: function render(ctx) {\n      ctx.save();\n      if (this._isMoving) {\n        ctx.globalAlpha = 0.6;\n      }\n      ctx.beginPath();\n      var _this$anchor = diamond_vertical_slicedToArray(this.anchor, 2),\n        x = _this$anchor[0],\n        y = _this$anchor[1];\n      var hw = this.width / 2;\n      var hh = this.height / 2;\n      var yy = hw / 1.732;\n      var top = y - hh;\n      var bottom = y + hh;\n      var topmiddle = y - hh + yy;\n      var bottommiddle = y + hh - yy;\n      var xleft = x - hw;\n      var xright = x + hw;\n      ctx.moveTo(x, top);\n      ctx.lineTo(xright, topmiddle);\n      ctx.lineTo(xright, bottommiddle);\n      ctx.lineTo(x, bottom);\n      ctx.lineTo(xleft, bottommiddle);\n      ctx.lineTo(xleft, topmiddle);\n      ctx.closePath();\n      ctx.fillStyle = this.backgroundColor;\n      if (this.shadowColor) {\n        ctx.shadowColor = this.shadowColor;\n        ctx.shadowBlur = this.shadowBlur;\n        ctx.shadowOffsetX = this.shadowOffsetX;\n        ctx.shadowOffsetY = this.shadowOffsetY;\n      }\n      ctx.fill();\n      if (this.borderWidth) {\n        ctx.lineWidth = this.borderWidth;\n        ctx.strokeStyle = this.borderColor;\n        ctx.stroke();\n      }\n      ctx.restore();\n      this._cachePoints = [[x, top], [xright, topmiddle], [xright, bottommiddle], [x, bottom], [xleft, bottommiddle], [xleft, topmiddle]];\n    }\n  }]);\n  return DiamondVertical;\n}(diamond);\n/* harmony default export */ const diamond_vertical = (DiamondVertical);\n;// CONCATENATED MODULE: ./src/core/instance/groups/scroll-group.js\nfunction scroll_group_typeof(obj) { "@babel/helpers - typeof"; return scroll_group_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, scroll_group_typeof(obj); }\nfunction scroll_group_defineProperty(obj, key, value) { key = scroll_group_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction scroll_group_slicedToArray(arr, i) { return scroll_group_arrayWithHoles(arr) || scroll_group_iterableToArrayLimit(arr, i) || scroll_group_unsupportedIterableToArray(arr, i) || scroll_group_nonIterableRest(); }\nfunction scroll_group_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction scroll_group_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return scroll_group_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return scroll_group_arrayLikeToArray(o, minLen); }\nfunction scroll_group_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction scroll_group_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction scroll_group_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction scroll_group_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction scroll_group_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, scroll_group_toPropertyKey(descriptor.key), descriptor); } }\nfunction scroll_group_createClass(Constructor, protoProps, staticProps) { if (protoProps) scroll_group_defineProperties(Constructor.prototype, protoProps); if (staticProps) scroll_group_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction scroll_group_toPropertyKey(arg) { var key = scroll_group_toPrimitive(arg, "string"); return scroll_group_typeof(key) === "symbol" ? key : String(key); }\nfunction scroll_group_toPrimitive(input, hint) { if (scroll_group_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (scroll_group_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction scroll_group_get() { if (typeof Reflect !== "undefined" && Reflect.get) { scroll_group_get = Reflect.get.bind(); } else { scroll_group_get = function _get(target, property, receiver) { var base = scroll_group_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return scroll_group_get.apply(this, arguments); }\nfunction scroll_group_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = scroll_group_getPrototypeOf(object); if (object === null) break; } return object; }\nfunction scroll_group_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) scroll_group_setPrototypeOf(subClass, superClass); }\nfunction scroll_group_setPrototypeOf(o, p) { scroll_group_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return scroll_group_setPrototypeOf(o, p); }\nfunction scroll_group_createSuper(Derived) { var hasNativeReflectConstruct = scroll_group_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = scroll_group_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = scroll_group_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return scroll_group_possibleConstructorReturn(this, result); }; }\nfunction scroll_group_possibleConstructorReturn(self, call) { if (call && (scroll_group_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return scroll_group_assertThisInitialized(self); }\nfunction scroll_group_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction scroll_group_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction scroll_group_getPrototypeOf(o) { scroll_group_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return scroll_group_getPrototypeOf(o); }\n\n\n\n\n\n\n\nvar scroll_group_ishitKey = Symbol(\'ishit\');\nvar InnerScrollBar = /*#__PURE__*/function (_ScrollBar) {\n  scroll_group_inherits(InnerScrollBar, _ScrollBar);\n  var _super = scroll_group_createSuper(InnerScrollBar);\n  function InnerScrollBar(dir) {\n    var _this;\n    var configs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    scroll_group_classCallCheck(this, InnerScrollBar);\n    _this = _super.call(this, dir, configs);\n    _this.visible = false;\n    return _this;\n  }\n  scroll_group_createClass(InnerScrollBar, [{\n    key: "render",\n    value: function render(ctx) {\n      if (this.visible) {\n        scroll_group_get(scroll_group_getPrototypeOf(InnerScrollBar.prototype), "render", this).call(this, ctx);\n      }\n    }\n  }, {\n    key: "setHit",\n    value: function setHit(ishit) {\n      if (this[scroll_group_ishitKey] !== ishit) {\n        this.isFocus = ishit;\n        this.onHit();\n      }\n      this[scroll_group_ishitKey] = ishit;\n    }\n  }]);\n  return InnerScrollBar;\n}(ScrollBar);\nvar ScrollGroup = /*#__PURE__*/function (_Node) {\n  scroll_group_inherits(ScrollGroup, _Node);\n  var _super2 = scroll_group_createSuper(ScrollGroup);\n  function ScrollGroup(configs) {\n    var _configs$lock;\n    var _this2;\n    scroll_group_classCallCheck(this, ScrollGroup);\n    _this2 = _super2.call(this, configs);\n    _this2.type = \'ScrollGroup\';\n    _this2.initStack(configs);\n    _this2.initLayout(configs);\n    _this2.initScrollBar(configs);\n    _this2._shape = new rectangle(configs);\n    _this2._shape.anchor = [0, 0];\n    _this2._shape._belongs = scroll_group_assertThisInitialized(_this2);\n    _this2.maxWidth = configs.maxWidth || Infinity;\n    _this2.definedWidth = configs.definedWidth;\n    _this2.maxHeight = configs.maxHeight || Infinity;\n    _this2.definedHeight = configs.definedHeight;\n    _this2.lock = (_configs$lock = configs.lock) !== null && _configs$lock !== void 0 ? _configs$lock : true;\n    _this2._offset = [0, 0];\n    _this2._getBoundingGroupRect();\n    _this2.reflow();\n    _this2._getBoundingGroupRect();\n    _this2._resetOffset();\n    _this2._cacheViewBox = [];\n    return _this2;\n  }\n  scroll_group_createClass(ScrollGroup, [{\n    key: "initScrollBar",\n    value: function initScrollBar(configs) {\n      var _this3 = this;\n      var barColor = configs.barColor,\n        barFocusColor = configs.barFocusColor,\n        barMarginX = configs.barMarginX,\n        barMarginY = configs.barMarginY,\n        barWidth = configs.barWidth;\n      this._scrollbarX = new InnerScrollBar(\'x\', {\n        plainColor: barColor,\n        focusColor: barFocusColor,\n        barWidth: barWidth\n      });\n      this._scrollbarY = new InnerScrollBar(\'y\', {\n        plainColor: barColor,\n        focusColor: barFocusColor,\n        barWidth: barWidth\n      });\n      this._scrollbarX.barMarginX = barMarginX || 1;\n      this._scrollbarY.barMarginY = barMarginY || 1;\n      var _f = function _f() {\n        _this3._jflow.scheduleRender();\n      };\n      this._scrollbarX.onHit = _f;\n      this._scrollbarY.onHit = _f;\n      this._scrollBarStatus = {\n        dragging: false,\n        target: null,\n        barInitX: 0,\n        barInitY: 0,\n        barStartX: 0,\n        barStartY: 0,\n        hitScrollX: false,\n        hitScrollY: false\n      };\n      // // const jflowInstance = this._jflow;\n      // this.addEventListener(\'instancemousemove\', e => {\n      //     if(this._scrollBarStatus.hitScrollX) {\n      //         if(!this._scrollbarX.isFocus) {\n      //             this._scrollbarX.isFocus = true;\n      //             e.detail.jflow.scheduleRender();\n      //         }\n      //         return;\n      //     }\n      //     if(this._scrollbarX.isFocus) {\n      //         this._scrollbarX.isFocus = false;\n      //         e.detail.jflow.scheduleRender();\n      //     }\n\n      // })\n      this.addEventListener(\'instancePressStart\', function (e) {\n        if (_this3._scrollBarStatus.hitScrollX) {\n          e.detail.preventDefault();\n          e.detail.bubbles = false;\n          var clientX = e.detail.event.clientX;\n          Object.assign(_this3._scrollBarStatus, {\n            dragging: true,\n            target: _this3._scrollbarX,\n            barStartX: _this3._scrollbarX.anchor[0],\n            barInitX: clientX\n          });\n          _this3.onScrollbarPressStart();\n        }\n        if (_this3._scrollBarStatus.hitScrollY) {\n          e.detail.preventDefault();\n          e.detail.bubbles = false;\n          var clientY = e.detail.event.clientY;\n          Object.assign(_this3._scrollBarStatus, {\n            dragging: true,\n            target: _this3._scrollbarY,\n            barStartY: _this3._scrollbarY.anchor[1],\n            barInitY: clientY\n          });\n          _this3.onScrollbarPressStart();\n        }\n      });\n    }\n  }, {\n    key: "onScrollbarPressStart",\n    value: function onScrollbarPressStart() {\n      var _this4 = this;\n      var jflowInstance = this._jflow;\n      var canvas = jflowInstance.canvas;\n      var f = function (e) {\n        var clientX = e.clientX,\n          clientY = e.clientY;\n        _this4.onDraggingScrollbar(clientX, clientY);\n      }.bind(this);\n      document.addEventListener(\'pointermove\', f);\n      var t = function (e) {\n        Object.assign(_this4._scrollBarStatus, {\n          dragging: false,\n          target: null,\n          barInitX: 0,\n          barInitY: 0,\n          barStartX: 0,\n          barStartY: 0,\n          hitScrollX: false,\n          hitScrollY: false\n        });\n        document.removeEventListener(\'pointermove\', f);\n        document.removeEventListener(\'pointerup\', t);\n        canvas.removeEventListener(\'pointerup\', t);\n      }.bind(this);\n      canvas.addEventListener(\'pointerup\', t, {\n        once: true\n      });\n      document.addEventListener(\'pointerup\', t, {\n        once: true\n      });\n    }\n  }, {\n    key: "onDraggingScrollbar",\n    value: function onDraggingScrollbar(clientX, clientY) {\n      if (this._scrollbarX.visible && this._scrollBarStatus.dragging) {\n        var JFLOW = this._jflow;\n        var scale = JFLOW.scale;\n        var _this$_scrollBarStatu = this._scrollBarStatus,\n          target = _this$_scrollBarStatu.target,\n          barInitX = _this$_scrollBarStatu.barInitX,\n          barStartX = _this$_scrollBarStatu.barStartX,\n          barInitY = _this$_scrollBarStatu.barInitY,\n          barStartY = _this$_scrollBarStatu.barStartY;\n        if (target.dir === \'x\') {\n          var _scrollWidth = this._scrollbarX.width;\n          var _outerWidth = this._outerWidth;\n          var deltaX = clientX - barInitX;\n          var xnew = barStartX + deltaX / scale;\n          var q = target.anchor[0] = Math.max(Math.min(xnew, _outerWidth - _scrollWidth), 0);\n          var ratioInX = q / (_outerWidth - _scrollWidth);\n          var s = (this._innerWidth - _outerWidth) / 2;\n          this._offset[0] = s - (this._innerWidth - _outerWidth) * ratioInX;\n          JFLOW.scheduleRender();\n        }\n        if (target.dir === \'y\') {\n          var _scrollHeight = this._scrollbarY.height;\n          var _outerHeight = this._outerHeight;\n          var deltaY = clientY - barInitY;\n          var ynew = barStartY + deltaY / scale;\n          var _q = target.anchor[1] = Math.max(Math.min(ynew, _outerHeight - _scrollHeight), 0);\n          var ratio = _q / (_outerHeight - _scrollHeight);\n          var _s = (this._innerHeight - _outerHeight) / 2;\n          this._offset[1] = _s - (this._innerHeight - _outerHeight) * ratio;\n          JFLOW.scheduleRender();\n        }\n      }\n    }\n  }, {\n    key: "setConfig",\n    value: function setConfig(configs) {\n      this._shape.setConfig(configs);\n    }\n  }, {\n    key: "_getBoundingGroupRect",\n    value: function _getBoundingGroupRect() {\n      var points = this._stack.getBoundingRectPoints();\n      // content box \n      var bbox = bounding_box(points);\n      var w = bbox.width;\n      var h = bbox.height;\n      var outerWidth = this.definedWidth || Math.min(w, this.maxWidth);\n      var outerHeight = this.definedHeight || Math.min(h, this.maxHeight);\n      this._innerWidth = w;\n      this._outerWidth = outerWidth;\n      this._innerHeight = h;\n      this._outerHeight = outerHeight;\n      this._shape.width = outerWidth;\n      this._shape.height = outerHeight;\n      this.width = outerWidth;\n      this.height = outerHeight;\n    }\n  }, {\n    key: "_calculatePointBack",\n    value: function _calculatePointBack(point) {\n      var _point = scroll_group_slicedToArray(point, 2),\n        gx = _point[0],\n        gy = _point[1];\n      var _this$_offset = scroll_group_slicedToArray(this._offset, 2),\n        tx = _this$_offset[0],\n        ty = _this$_offset[1];\n      var _this$anchor = scroll_group_slicedToArray(this.anchor, 2),\n        cx = _this$anchor[0],\n        cy = _this$anchor[1];\n      var p = [gx - cx - tx, gy - cy - ty];\n      return p;\n    }\n  }, {\n    key: "_calculatePointBackWithPoint",\n    value: function _calculatePointBackWithPoint(a, b, arr, idx1, idx2) {\n      var anchor = this.anchor;\n      var offset = this._offset;\n      arr[idx1] = a - anchor[0] - offset[0];\n      arr[idx2] = b - anchor[1] - offset[1];\n    }\n  }, {\n    key: "calculateToCoordination",\n    value: function calculateToCoordination(point) {\n      var _point2 = scroll_group_slicedToArray(point, 2),\n        gx = _point2[0],\n        gy = _point2[1];\n      var _this$anchor2 = scroll_group_slicedToArray(this.anchor, 2),\n        cx = _this$anchor2[0],\n        cy = _this$anchor2[1];\n      var _this$_offset2 = scroll_group_slicedToArray(this._offset, 2),\n        tx = _this$_offset2[0],\n        ty = _this$_offset2[1];\n      var p = [gx + cx - tx, gy + cy - ty];\n      if (this._belongs && this._belongs.calculateToCoordination) {\n        return this._belongs.calculateToCoordination(p);\n      } else {\n        return p;\n      }\n    }\n  }, {\n    key: "calculateToRealWorld",\n    value: function calculateToRealWorld(point) {\n      var _point3 = scroll_group_slicedToArray(point, 2),\n        gx = _point3[0],\n        gy = _point3[1];\n      var _this$anchor3 = scroll_group_slicedToArray(this.anchor, 2),\n        cx = _this$anchor3[0],\n        cy = _this$anchor3[1];\n      var _this$_offset3 = scroll_group_slicedToArray(this._offset, 2),\n        tx = _this$_offset3[0],\n        ty = _this$_offset3[1];\n      var p = [gx + cx - tx, gy + cy - ty];\n      if (this._belongs && this._belongs.calculateToRealWorld) {\n        return this._belongs.calculateToRealWorld(p);\n      }\n    }\n  }, {\n    key: "calculateToRealWorldWithPointer",\n    value: function calculateToRealWorldWithPointer(outpoint, inpoint) {\n      outpoint[0] = inpoint[0] + this.anchor[0] - this.offset[0];\n      outpoint[1] = inpoint[1] + this.anchor[1] - this.offset[1];\n      if (this._belongs && this._belongs.calculateToRealWorldWithPointer) {\n        return this._belongs.calculateToRealWorldWithPointer(outpoint, outpoint);\n      }\n    }\n  }, {\n    key: "_getViewBox",\n    value: function _getViewBox() {\n      var belongs_vbox = this._belongs.getCacheViewBox();\n      var cacheViewBox = this._cacheViewBox;\n      this._calculatePointBackWithPoint(belongs_vbox[0], belongs_vbox[1], cacheViewBox, 0, 1);\n      this._calculatePointBackWithPoint(belongs_vbox[2], belongs_vbox[3], cacheViewBox, 2, 3);\n      return this._cacheViewBox;\n    }\n  }, {\n    key: "getCacheViewBox",\n    value: function getCacheViewBox() {\n      return this._cacheViewBox;\n    }\n  }, {\n    key: "_resetOffset",\n    value: function _resetOffset() {\n      this._offset = [Math.max((this._innerWidth - this._outerWidth) / 2, 0), Math.max((this._innerHeight - this._outerHeight) / 2, 0)];\n      if (this._innerWidth > this._outerWidth) {\n        this._scrollbarX.visible = true;\n        this._scrollbarX.width = this._outerWidth * this._outerWidth / this._innerWidth;\n        this._scrollbarX.anchor = [0, this._outerHeight - 4];\n      } else {\n        this._scrollbarX.visible = false;\n      }\n      if (this._innerHeight > this._outerHeight) {\n        this._scrollbarY.visible = true;\n        this._scrollbarY.height = this._outerHeight * this._outerHeight / this._innerHeight;\n        this._scrollbarY.anchor = [this._outerWidth - 4, 0];\n      } else {\n        this._scrollbarY.visible = false;\n      }\n    }\n  }, {\n    key: "render",\n    value: function render(ctx) {\n      if (this._isMoving) {\n        ctx.globalAlpha = 0.6;\n      } else if (this.opacity !== 1) {\n        ctx.globalAlpha = this.opacity;\n      }\n      var _this$anchor4 = scroll_group_slicedToArray(this.anchor, 2),\n        cx = _this$anchor4[0],\n        cy = _this$anchor4[1];\n      var w = this.width;\n      var h = this.height;\n      var w2 = w / 2;\n      var h2 = h / 2;\n      // if((this.width * this.height) * this._jflow.scale < 144) {\n      //     ctx.restore();\n      //     return;\n      // }\n      var _this$_offset4 = scroll_group_slicedToArray(this._offset, 2),\n        tx = _this$_offset4[0],\n        ty = _this$_offset4[1];\n      ctx.translate(cx, cy);\n      this._shape.render(ctx);\n      ctx.translate(-w2, -h2);\n      if (this._scrollbarX.visible) {\n        this._scrollbarX.render(ctx);\n      }\n      if (this._scrollbarY.visible) {\n        this._scrollbarY.render(ctx);\n      }\n      ctx.translate(w2, h2);\n      ctx.save();\n      ctx.beginPath();\n      ctx.rect(-w2, -h2, w, h);\n      ctx.clip();\n      ctx.translate(tx, ty);\n      this._stack.render(ctx);\n      this._linkStack.render(ctx);\n      ctx.translate(-cx - tx, -cy - ty);\n      ctx.restore();\n    }\n  }, {\n    key: "isHit",\n    value: function isHit(point, condition) {\n      var _point4 = scroll_group_slicedToArray(point, 2),\n        gx = _point4[0],\n        gy = _point4[1];\n      var _this$anchor5 = scroll_group_slicedToArray(this.anchor, 2),\n        cx = _this$anchor5[0],\n        cy = _this$anchor5[1];\n      var w = this.width / 2;\n      var h = this.height / 2;\n      var sp = [gx - cx + w, gy - cy + h];\n      this._scrollBarStatus.hitScrollX = false;\n      this._scrollBarStatus.hitScrollY = false;\n      if (this._scrollbarX.visible) {\n        var xhit = this._scrollbarX.isHit(sp);\n        if (xhit) {\n          this._scrollBarStatus.hitScrollX = true;\n          this._scrollbarX.setHit(true);\n          return true;\n        }\n      }\n      this._scrollbarX.setHit(false);\n      if (this._scrollbarY.visible) {\n        var yhit = this._scrollbarY.isHit(sp);\n        if (yhit) {\n          this._scrollBarStatus.hitScrollY = true;\n          this._scrollbarY.setHit(true);\n          return true;\n        }\n      }\n      this._scrollbarY.setHit(false);\n\n      // const br = this._getViewBox();\n      var isInBound = this._shape.isHit([gx - cx, gy - cy]);\n      if (isInBound) {\n        var _this$_offset5 = scroll_group_slicedToArray(this._offset, 2),\n          tx = _this$_offset5[0],\n          ty = _this$_offset5[1];\n        var p = [gx - cx - tx, gy - cy - ty];\n        this._currentp = p; // 暂存，为了后续计算别的位置\n        var target = this._stack.checkHit(p, condition);\n        if (target) return target;\n      } else {\n        this._stack.resetHitStatus();\n      }\n      return false;\n    }\n  }, {\n    key: "getBoundingDimension",\n    value: function getBoundingDimension() {\n      return {\n        width: this.width,\n        height: this.height\n      };\n    }\n  }, {\n    key: "getBoundingRect",\n    value: function getBoundingRect() {\n      var anchor = this.anchor;\n      var w = this.width / 2;\n      var h = this.height / 2;\n      var ltx = anchor[0] - w;\n      var lty = anchor[1] - h;\n      var rbx = anchor[0] + w;\n      var rby = anchor[1] + h;\n      var br = this._boundingrect;\n      br[0] = ltx;\n      br[1] = lty;\n      br[2] = rbx;\n      br[3] = rby;\n      return br;\n    }\n  }, {\n    key: "getIntersectionsInFourDimension",\n    value: function getIntersectionsInFourDimension() {\n      var _ref;\n      var p2 = this.anchor;\n      if (this._belongs && this._belongs.calculateToCoordination) {\n        p2 = this._belongs.calculateToCoordination(p2);\n      }\n      var _p = p2,\n        _p2 = scroll_group_slicedToArray(_p, 2),\n        x2 = _p2[0],\n        y2 = _p2[1];\n      var w = this.width / 2;\n      var h = this.height / 2;\n      return _ref = {}, scroll_group_defineProperty(_ref, DIRECTION.RIGHT, [x2 + w, y2]), scroll_group_defineProperty(_ref, DIRECTION.LEFT, [x2 - w, y2]), scroll_group_defineProperty(_ref, DIRECTION.BOTTOM, [x2, y2 + h]), scroll_group_defineProperty(_ref, DIRECTION.TOP, [x2, y2 - h]), scroll_group_defineProperty(_ref, DIRECTION.SELF, [x2 + w * 0.618, y2 + h * 0.618]), _ref;\n    }\n  }, {\n    key: "onEnterViewbox",\n    value: function onEnterViewbox() {\n      this.interateNodeStack(function (instance) {\n        instance.onEnterViewbox();\n      });\n    }\n  }, {\n    key: "onLeaveViewbox",\n    value: function onLeaveViewbox() {\n      this.interateNodeStack(function (instance) {\n        instance.onLeaveViewbox();\n      });\n    }\n  }, {\n    key: "destroy",\n    value: function destroy() {\n      this._shape.destroy();\n      this.interateNodeStack(function (instance) {\n        instance.destroy();\n      });\n    }\n  }, {\n    key: "clone",\n    value: function clone() {\n      var C = this.constructor;\n      var configs = Object.assign({}, this._rawConfigs, {\n        layout: this._layout && this._layout.clone()\n      });\n      var t = new C(configs);\n      this.interateNodeStack(function (instance) {\n        t.addToStack(instance.clone());\n      });\n      t.recalculate();\n      t.visible = this.visible;\n      return t;\n    }\n  }]);\n  return ScrollGroup;\n}(node);\nObject.assign(ScrollGroup.prototype, stackMixin);\nObject.assign(ScrollGroup.prototype, layoutMixin);\nObject.assign(ScrollGroup.prototype, {\n  recalculateUp: function recalculateUp() {\n    var dirty = true;\n    if (this.getBoundingDimension) {\n      // const { width: wold, height: hold } = this.getBoundingDimension();\n      var wold = this._innerWidth;\n      var hold = this._innerHeight;\n      if (this.resetChildrenPosition) {\n        this.resetChildrenPosition();\n      }\n      if (this._getBoundingGroupRect) {\n        this._getBoundingGroupRect();\n      }\n      this.reflow();\n      if (this._getBoundingGroupRect) {\n        this._getBoundingGroupRect();\n      }\n      var wnow = this._innerWidth;\n      var hnow = this._innerHeight;\n      // const { width: wnow, height: hnow } = this.getBoundingDimension();\n      dirty = wold !== wnow || hold !== hnow;\n    } else {\n      this.reflow();\n    }\n    if (this._belongs && dirty) {\n      this._resetOffset();\n      this._belongs.recalculateUp();\n    }\n  },\n  recalculate: function recalculate() {\n    var _this$getBoundingDime = this.getBoundingDimension(),\n      wold = _this$getBoundingDime.width,\n      hold = _this$getBoundingDime.height;\n    this.reflow();\n    if (this._getBoundingGroupRect) {\n      this._getBoundingGroupRect();\n    }\n    var _this$getBoundingDime2 = this.getBoundingDimension(),\n      wnow = _this$getBoundingDime2.width,\n      hnow = _this$getBoundingDime2.height;\n    if (wold !== wnow || hold !== hnow) {\n      this._resetOffset();\n    }\n  }\n});\n/* harmony default export */ const scroll_group = (ScrollGroup);\n;// CONCATENATED MODULE: ./src/core/events/commonAdapter.js\n/* harmony default export */ const commonAdapter = ({\n  canvas: {\n    wheel: function wheel(event, jflow) {\n      event.preventDefault();\n      var offsetX = event.offsetX,\n        offsetY = event.offsetY,\n        deltaX = event.deltaX,\n        deltaY = event.deltaY;\n      if (event.ctrlKey) {\n        deltaY = -deltaY;\n      }\n      jflow.zoomHandler(offsetX, offsetY, deltaX, deltaY, event);\n    }\n  }\n});\n;// CONCATENATED MODULE: ./src/core/instance/base-link.js\nfunction base_link_typeof(obj) { "@babel/helpers - typeof"; return base_link_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, base_link_typeof(obj); }\nfunction base_link_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction base_link_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, base_link_toPropertyKey(descriptor.key), descriptor); } }\nfunction base_link_createClass(Constructor, protoProps, staticProps) { if (protoProps) base_link_defineProperties(Constructor.prototype, protoProps); if (staticProps) base_link_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction base_link_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) base_link_setPrototypeOf(subClass, superClass); }\nfunction base_link_setPrototypeOf(o, p) { base_link_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return base_link_setPrototypeOf(o, p); }\nfunction base_link_createSuper(Derived) { var hasNativeReflectConstruct = base_link_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = base_link_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = base_link_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return base_link_possibleConstructorReturn(this, result); }; }\nfunction base_link_possibleConstructorReturn(self, call) { if (call && (base_link_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return base_link_assertThisInitialized(self); }\nfunction base_link_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction base_link_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction base_link_getPrototypeOf(o) { base_link_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return base_link_getPrototypeOf(o); }\nfunction base_link_defineProperty(obj, key, value) { key = base_link_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction base_link_toPropertyKey(arg) { var key = base_link_toPrimitive(arg, "string"); return base_link_typeof(key) === "symbol" ? key : String(key); }\nfunction base_link_toPrimitive(input, hint) { if (base_link_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (base_link_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n/**\n * @typedef {Instance~Configs} BaseLink~Configs\n * @property {Instance} from   - 起始单元\n * @property {Instance} to     - 终止单元\n * @property {String} fromDir  - 起始方向 \n * @property {String} toDir    - 终止方向 \n * @property {String} key      - 连线唯一键值\n * @property {String} backgroundColor    - 线条颜色 \n */\n/**\n * 连线基类\n * @constructor BaseLink\n * @extends Instance\n * @param {BaseLink~Configs} configs - 配置\n */\nvar BaseLink = /*#__PURE__*/function (_Instance) {\n  base_link_inherits(BaseLink, _Instance);\n  var _super = base_link_createSuper(BaseLink);\n  function BaseLink() {\n    var _this;\n    var configs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    base_link_classCallCheck(this, BaseLink);\n    _this = _super.call(this);\n    /** @member {Instance}      - 起始单元 */\n    base_link_defineProperty(base_link_assertThisInitialized(_this), "INSTANCE_TYPE", \'LINK\');\n    _this.from = configs.from;\n    /** @member {Instance}      - 终止单元 */\n    _this.to = configs.to;\n    /** @member {DIRECTION}      - 起始方向 */\n    _this.fromDir = configs.fromDir;\n    /** @member {DIRECTION}      - 终止方向 */\n    _this.toDir = configs.toDir;\n    /** @member {number[][]}     - 连线控制点缓存 */\n    _this._cachePoints = null;\n    /** @member {string}     - 连线颜色，默认为 #000 */\n    _this.backgroundColor = configs.backgroundColor || \'#000\';\n    _this.isSelf = !!configs.isSelf;\n    return _this;\n  }\n\n  /**\n   * 是否出现在当前视窗内\n   * @param {number[]} viewbox\n   */\n  base_link_createClass(BaseLink, [{\n    key: "nextSibling",\n    get: function get() {\n      var _this2 = this;\n      if (!this._belongs) {\n        return null;\n      }\n      var stack = this._belongs._linkStack;\n      var idx = stack.findIndex(function (s) {\n        return s === _this2;\n      });\n      if (idx !== -1) {\n        return stack[idx + 1];\n      }\n      return null;\n    }\n  }, {\n    key: "isInViewBox",\n    value: function isInViewBox(viewbox) {\n      return true;\n    }\n  }, {\n    key: "bringToTop",\n    value: function bringToTop() {\n      var _this3 = this;\n      var linkStack = this._jflow._linkStack;\n      var index = linkStack.findIndex(function (l) {\n        return l === _this3;\n      });\n      linkStack.splice(index, 1);\n      linkStack.push(this);\n      this._jflow._render();\n    }\n  }]);\n  return BaseLink;\n}(instance_instance);\n/* harmony default export */ const base_link = (BaseLink);\n;// CONCATENATED MODULE: ./src/core/instance/shapes/shadow-cache.js\nfunction shadow_cache_typeof(obj) { "@babel/helpers - typeof"; return shadow_cache_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, shadow_cache_typeof(obj); }\nfunction shadow_cache_slicedToArray(arr, i) { return shadow_cache_arrayWithHoles(arr) || shadow_cache_iterableToArrayLimit(arr, i) || shadow_cache_unsupportedIterableToArray(arr, i) || shadow_cache_nonIterableRest(); }\nfunction shadow_cache_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction shadow_cache_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return shadow_cache_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return shadow_cache_arrayLikeToArray(o, minLen); }\nfunction shadow_cache_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction shadow_cache_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction shadow_cache_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction shadow_cache_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction shadow_cache_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, shadow_cache_toPropertyKey(descriptor.key), descriptor); } }\nfunction shadow_cache_createClass(Constructor, protoProps, staticProps) { if (protoProps) shadow_cache_defineProperties(Constructor.prototype, protoProps); if (staticProps) shadow_cache_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction shadow_cache_toPropertyKey(arg) { var key = shadow_cache_toPrimitive(arg, "string"); return shadow_cache_typeof(key) === "symbol" ? key : String(key); }\nfunction shadow_cache_toPrimitive(input, hint) { if (shadow_cache_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (shadow_cache_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction shadow_cache_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) shadow_cache_setPrototypeOf(subClass, superClass); }\nfunction shadow_cache_setPrototypeOf(o, p) { shadow_cache_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return shadow_cache_setPrototypeOf(o, p); }\nfunction shadow_cache_createSuper(Derived) { var hasNativeReflectConstruct = shadow_cache_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = shadow_cache_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = shadow_cache_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return shadow_cache_possibleConstructorReturn(this, result); }; }\nfunction shadow_cache_possibleConstructorReturn(self, call) { if (call && (shadow_cache_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return shadow_cache_assertThisInitialized(self); }\nfunction shadow_cache_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction shadow_cache_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction shadow_cache_getPrototypeOf(o) { shadow_cache_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return shadow_cache_getPrototypeOf(o); }\n\nvar ShadowCache = /*#__PURE__*/function (_Node) {\n  shadow_cache_inherits(ShadowCache, _Node);\n  var _super = shadow_cache_createSuper(ShadowCache);\n  function ShadowCache(configs) {\n    var _this;\n    shadow_cache_classCallCheck(this, ShadowCache);\n    _this = _super.call(this, configs);\n    // this.imageData = configs.imageData;\n    _this.width = configs.width;\n    _this.height = configs.height;\n    _this.imageBuffer = document.createElement(\'canvas\');\n    _this.imageBuffer.width = _this.width + 2;\n    _this.imageBuffer.height = _this.height + 2;\n    configs.cache(_this.imageBuffer.getContext(\'2d\'));\n    return _this;\n  }\n  shadow_cache_createClass(ShadowCache, [{\n    key: "render",\n    value: function render(ctx) {\n      var _this$anchor = shadow_cache_slicedToArray(this.anchor, 2),\n        cx = _this$anchor[0],\n        cy = _this$anchor[1];\n      ctx.save();\n      ctx.translate(cx, cy);\n      ctx.beginPath();\n      ctx.drawImage(this.imageBuffer, -this.width / 2, -this.height / 2);\n      ctx.translate(-cx, -cy);\n      ctx.restore();\n    }\n  }, {\n    key: "getBoundingDimension",\n    value: function getBoundingDimension() {\n      return {\n        height: this.height,\n        width: this.width\n      };\n    }\n  }, {\n    key: "recalculate",\n    value: function recalculate() {}\n  }, {\n    key: "getBoundingRect",\n    value: function getBoundingRect() {\n      var anchor = this.anchor;\n      var w = this.width / 2;\n      var h = this.height / 2;\n      var ltx = anchor[0] - w;\n      var lty = anchor[1] - h;\n      var rbx = anchor[0] + w;\n      var rby = anchor[1] + h;\n      var br = this._boundingrect;\n      br[0] = ltx;\n      br[1] = lty;\n      br[2] = rbx;\n      br[3] = rby;\n      return br;\n    }\n  }]);\n  return ShadowCache;\n}(node);\n/* harmony default export */ const shadow_cache = (ShadowCache);\n;// CONCATENATED MODULE: ./src/core/instance/elements/text.js\nfunction text_typeof(obj) { "@babel/helpers - typeof"; return text_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, text_typeof(obj); }\nfunction text_slicedToArray(arr, i) { return text_arrayWithHoles(arr) || text_iterableToArrayLimit(arr, i) || text_unsupportedIterableToArray(arr, i) || text_nonIterableRest(); }\nfunction text_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction text_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return text_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return text_arrayLikeToArray(o, minLen); }\nfunction text_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction text_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction text_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction text_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction text_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, text_toPropertyKey(descriptor.key), descriptor); } }\nfunction text_createClass(Constructor, protoProps, staticProps) { if (protoProps) text_defineProperties(Constructor.prototype, protoProps); if (staticProps) text_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction text_toPropertyKey(arg) { var key = text_toPrimitive(arg, "string"); return text_typeof(key) === "symbol" ? key : String(key); }\nfunction text_toPrimitive(input, hint) { if (text_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (text_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction text_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) text_setPrototypeOf(subClass, superClass); }\nfunction text_setPrototypeOf(o, p) { text_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return text_setPrototypeOf(o, p); }\nfunction text_createSuper(Derived) { var hasNativeReflectConstruct = text_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = text_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = text_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return text_possibleConstructorReturn(this, result); }; }\nfunction text_possibleConstructorReturn(self, call) { if (call && (text_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return text_assertThisInitialized(self); }\nfunction text_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction text_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction text_getPrototypeOf(o) { text_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return text_getPrototypeOf(o); }\n\n\n\n\nvar TEXT_ALIGN = {\n  CENTER: \'center\',\n  LEFT: \'left\',\n  RIGHT: \'right\'\n};\nvar SPACE_REG = /\\s/g;\nvar Text = /*#__PURE__*/function (_Rectangle) {\n  text_inherits(Text, _Rectangle);\n  var _super = text_createSuper(Text);\n  function Text(configs) {\n    var _this;\n    text_classCallCheck(this, Text);\n    _this = _super.call(this, configs);\n    _this.type = \'Text\';\n    _this.content = configs.content || \'\';\n    _this.fontFamily = configs.fontFamily || \'-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Helvetica,Tahoma,Arial,Noto Sans,PingFang SC,Microsoft YaHei,Hiragino Sans GB,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji\';\n    _this.fontSize = configs.fontSize || \'14px\';\n    _this.fontWeight = configs.fontWeight || \'\';\n    _this.textColor = configs.textColor || \'white\';\n    _this.placeholderColor = configs.placeholderColor || configs.textColor || \'white\';\n    _this.textAlign = configs.textAlign || TEXT_ALIGN.CENTER;\n    _this.textBaseline = configs.textBaseline || \'middle\';\n    _this.lineHeight = configs.lineHeight;\n    _this.indent = configs.indent || 0;\n    _this.backgroundColor = configs.backgroundColor;\n    _this.editable = configs.editable;\n    _this.definedWidth = configs.definedWidth;\n    _this.minWidth = configs.minWidth || 0;\n    _this.maxWidth = configs.maxWidth;\n    _this.ellipsis = configs.ellipsis;\n    _this.placeholder = configs.placeholder || \'\';\n    _this.emptyWhenInput = configs.emptyWhenInput || false;\n    _this.editting = false;\n    _this.disabled = configs.disabled;\n    _this.cursorColor = configs.cursorColor || \'#60CFC4\';\n    _this.textRangeColor = configs.textRangeColor || \'#4E75EC1A\';\n    _this.spacePlaceholder = configs.spacePlaceholder;\n    _this.spacePlaceholderColor = configs.spacePlaceholderColor;\n    _this.spaceRecords = [];\n    _this._spacedContentSegmnent = [];\n    _this._status = {\n      editing: false,\n      cursorshow: true,\n      cursoranime: null,\n      lastElapsed: 0,\n      refreshElapsed: false,\n      cursorDragging: false,\n      shiftOn: false,\n      oldVal: \'\',\n      inputElement: null\n    };\n    _this._cursorOffset = 0;\n    _this._textRange = {\n      enable: false,\n      rangefrom: null,\n      // offsetfrom\n      rangeTo: null,\n      // offsetto\n      initialRange: null // offset\n    };\n\n    if (_this.editable) {\n      _this._makeFunctional();\n    }\n    _this.preCalculateText();\n    _this.shadowCache();\n    return _this;\n  }\n  text_createClass(Text, [{\n    key: "replaceSpaceHolder",\n    value: function replaceSpaceHolder(content) {\n      var useCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      if (useCache) {\n        return content.replace(/\\s/g, this.spacePlaceholder);\n      }\n      var r = this.spaceRecords;\n      var p = this.spacePlaceholder;\n      r.length = 0;\n      var lastOffset;\n      var c = content.replace(/\\s/g, function (_, offset) {\n        if (lastOffset === undefined) {\n          lastOffset = offset;\n          r.push(offset);\n        }\n        if (offset - lastOffset > 1) {\n          r.push(lastOffset);\n          r.push(offset);\n        }\n        lastOffset = offset;\n        return p;\n      });\n      if (lastOffset !== undefined) {\n        r.push(lastOffset);\n      }\n      return c;\n    }\n  }, {\n    key: "currentContent",\n    get: function get() {\n      return this.content || this.placeholder || \'\';\n    }\n  }, {\n    key: "isEmpty",\n    get: function get() {\n      return !this.content;\n    }\n  }, {\n    key: "preCalculateText",\n    value: function preCalculateText() {\n      var _this2 = this;\n      requestCacheCanvas(function (ctx) {\n        ctx.beginPath();\n        ctx.font = "".concat(_this2.fontWeight, " ").concat(_this2.fontSize, " ").concat(_this2.fontFamily);\n        ctx.textAlign = _this2.textAlign;\n        ctx.textBaseline = _this2.textBaseline;\n        var t_h = parseInt(_this2.fontSize);\n        var content = _this2.currentContent;\n        if (_this2.spacePlaceholder) {\n          content = _this2.replaceSpaceHolder(content);\n        }\n        var _ctx$measureText = ctx.measureText(content),\n          fontBoundingBoxAscent = _ctx$measureText.fontBoundingBoxAscent,\n          fontBoundingBoxDescent = _ctx$measureText.fontBoundingBoxDescent,\n          width = _ctx$measureText.width;\n        _this2._textWidth = _this2.indent + width;\n        if (_this2.definedWidth) {\n          if (_this2.ellipsis && _this2._textWidth > _this2.definedWidth) {\n            var offset = _this2._calculateOffset(_this2.definedWidth - 12);\n            _this2.ellipsisContent = content.substring(0, offset) + \'...\';\n          } else {\n            _this2.ellipsisContent = content;\n          }\n          _this2.width = _this2.definedWidth;\n        } else if (_this2.maxWidth && _this2.ellipsis) {\n          if (_this2._textWidth > _this2.maxWidth) {\n            var ratio = _this2.maxWidth / _this2._textWidth;\n            var l = Math.floor(content.length * ratio - 3);\n            _this2.ellipsisContent = content.substring(0, l) + \'...\';\n          } else {\n            _this2.ellipsisContent = content;\n          }\n          _this2.width = Math.min(_this2.maxWidth, _this2._textWidth);\n        } else {\n          _this2.width = Math.max(_this2.minWidth, _this2._textWidth);\n        }\n        if (_this2.spacePlaceholder) {\n          var _ctx$measureText2 = ctx.measureText(_this2.spacePlaceholder),\n            s_width = _ctx$measureText2.width;\n          var r2 = _this2._spacedContentSegmnent;\n          var textColor = _this2.textColor;\n          var lastOffset = 0;\n          r2.length = 0;\n          if (_this2.spaceRecords.length) {\n            var r = _this2.spaceRecords;\n            var pcolor = _this2.spacePlaceholderColor;\n            var _l = r.length;\n            var i = 0;\n            while (i < _l) {\n              var f = r[i++];\n              var t = r[i++];\n              var q = content.substring(lastOffset, f);\n              r2.push([q, ctx.measureText(q).width, textColor]);\n              r2.push([content.substring(f, t + 1), (t - f + 1) * s_width, pcolor]);\n              lastOffset = t + 1;\n            }\n          }\n          if (lastOffset < content.length) {\n            var _q = content.substring(lastOffset);\n            r2.push([_q, ctx.measureText(_q).width, textColor]);\n          }\n        }\n        var height = Math.abs(fontBoundingBoxAscent) + Math.abs(fontBoundingBoxDescent) || t_h;\n        _this2._textHeight = height;\n        if (_this2.lineHeight) {\n          _this2.height = _this2.lineHeight;\n        } else {\n          _this2.height = height;\n        }\n      });\n    }\n  }, {\n    key: "shadowCache",\n    value: function shadowCache() {\n      var _this3 = this;\n      var scale = window.devicePixelRatio;\n      var w = this.width * scale;\n      var h = this.height * scale;\n      var i = this.indent * scale;\n      var size = parseInt(this.fontSize) * scale;\n      this._shadowCache = new shadow_cache({\n        width: w,\n        height: h,\n        cache: function cache(ctx) {\n          // const [cx, cy] = this.anchor;\n          // ctx.scale(4, 4)\n          ctx.translate(w / 2, h / 2);\n          var font = "".concat(_this3.fontWeight, " ").concat(size, "px ").concat(_this3.fontFamily);\n          ctx.font = font;\n          ctx.textAlign = _this3.textAlign;\n          ctx.textBaseline = _this3.textBaseline;\n          ctx.fillStyle = _this3.isEmpty ? _this3.placeholderColor : _this3.textColor;\n          var content = _this3.currentContent;\n          if (_this3.spacePlaceholder) {\n            if (_this3.textAlign === TEXT_ALIGN.LEFT) {\n              var hw = w / 2;\n              var _w = -hw + i / 2;\n              _this3._spacedContentSegmnent.forEach(function (seg) {\n                ctx.fillStyle = seg[2];\n                ctx.fillText(seg[0], _w, 0);\n                _w += seg[1] * scale;\n              });\n            }\n          } else {\n            if (_this3.ellipsisContent) {\n              content = _this3.ellipsisContent;\n            }\n            if (content) {\n              if (_this3.textAlign === TEXT_ALIGN.LEFT) {\n                var _hw = w / 2;\n                ctx.fillText(content, -_hw + i / 2, 0);\n              } else if (_this3.textAlign === TEXT_ALIGN.RIGHT) {\n                var _hw2 = w / 2;\n                ctx.fillText(content, _hw2, 0);\n              } else {\n                ctx.fillText(content, i / 2, 0);\n              }\n            }\n          }\n        }\n      });\n    }\n  }, {\n    key: "setConfig",\n    value: function setConfig(configs) {\n      var _this4 = this;\n      Object.keys(configs).forEach(function (k) {\n        if (configs[k] !== undefined && configs[k] !== null) {\n          _this4[k] = configs[k];\n          _this4._rawConfigs[k] = configs[k];\n        }\n      });\n      this.preCalculateText();\n      this.shadowCache();\n    }\n  }, {\n    key: "click",\n    value: function click() {\n      var _this5 = this;\n      if (!this._status.editing) {\n        var flag = true;\n        this.dispatchEvent(new events(\'edit\', {\n          target: this,\n          preventDefault: function preventDefault() {\n            flag = false;\n          }\n        }));\n        if (!flag) {\n          return;\n        }\n        var point = this._belongs._currentp;\n        var jflow = this._jflow;\n        if (point) {\n          this._cursorOffset = this._positionToCursorOffset(point);\n        } else {\n          this._cursorOffset = 0;\n        }\n        var inputElement = createInputElement(this._controlCallback.bind(this), this._defaultCallback.bind(this));\n        var wrapper = jflow.DOMwrapper;\n        wrapper.append(inputElement);\n        inputElement.focus({\n          preventScroll: true\n        });\n        jflow.setFocusInstance(this);\n        Object.assign(this._status, {\n          editing: true,\n          oldVal: this.content,\n          inputElement: inputElement,\n          cursoranime: jflow.requestJFlowAnime(function (elapsed) {\n            var lastElapsed = _this5._status.lastElapsed;\n            if (_this5._status.refreshElapsed) {\n              _this5._status.lastElapsed = elapsed;\n              _this5._status.refreshElapsed = false;\n            }\n            if (elapsed - lastElapsed > 500) {\n              _this5._status.cursorshow = !_this5._status.cursorshow;\n              _this5._status.lastElapsed = elapsed;\n            }\n          })\n        });\n        if (this.emptyWhenInput) {\n          this.content = \'\';\n        }\n        this.syncShadowInputPosition();\n      }\n    }\n  }, {\n    key: "_makeFunctional",\n    value: function _makeFunctional() {\n      var _this6 = this;\n      var blurHandler = function blurHandler(event) {\n        _this6._status.editing = false;\n        if (_this6._status.inputElement) {\n          _this6._status.inputElement.remove();\n        }\n        if (_this6._belongs) {\n          _this6._jflow.scheduleRender();\n        }\n      };\n      this.addEventListener(\'dblclick\', function (event) {\n        if (event.currentTarget !== _this6) {\n          return;\n        }\n        if (_this6._status.editing) {\n          _this6._selectFullRange();\n        }\n      });\n      this.addEventListener(\'click\', function (event) {\n        if (event.currentTarget !== _this6) {\n          return;\n        }\n        // event.detail.bubbles = false;\n        if (_this6._status.editing) {\n          var point = _this6._belongs._currentp;\n          var offset = _this6._positionToCursorOffset(point);\n          if (_this6._status.shiftOn) {\n            var initialRange = _this6._textRange.initialRange;\n            Object.assign(_this6._textRange, {\n              rangefrom: Math.min(offset, initialRange),\n              rangeTo: Math.max(offset, initialRange),\n              enable: true\n            });\n            _this6._cursorOffset = _this6._textRange.rangeTo;\n            _this6._status.inputElement.focus({\n              preventScroll: true\n            });\n            // this._refreshCursor();  \n          } else {\n            _this6._cursorOffset = offset;\n            _this6._status.inputElement.focus({\n              preventScroll: true\n            });\n            _this6._refreshCursor();\n            _this6.syncShadowInputPosition();\n          }\n        }\n        _this6.click();\n      });\n      this.addEventListener(\'blur\', function (event) {\n        var _this6$_status$cursor;\n        blurHandler(event);\n        _this6.dispatchEvent(new events(\'change\', {\n          target: _this6,\n          oldVal: _this6._status.oldVal,\n          val: _this6.content\n        }));\n        _this6._textRange.enable = false;\n        (_this6$_status$cursor = _this6._status.cursoranime) === null || _this6$_status$cursor === void 0 ? void 0 : _this6$_status$cursor.cancel();\n        Object.assign(_this6._status, {\n          editing: false,\n          cursorshow: true,\n          cursoranime: null,\n          lastElapsed: 0,\n          refreshElapsed: false,\n          cursorDragging: false,\n          shiftOn: false,\n          oldVal: \'\',\n          inputElement: null\n        });\n      });\n      this.addEventListener(\'instancePressStart\', function (event) {\n        if (_this6._status.editing && !_this6._status.shiftOn) {\n          event.detail.bubbles = false;\n          event.detail.preventDefault();\n          var point = _this6._belongs._currentp;\n          var c = _this6._positionToCursorOffset(point);\n          _this6._textRange.initialRange = c;\n          var jflow = event.detail.jflow;\n          var moved = false;\n          var t = function (e) {\n            moved = true;\n            var offsetX = e.offsetX,\n              offsetY = e.offsetY;\n            var p = jflow._calculatePointBack([offsetX, offsetY]);\n            jflow._stack.checkHit(p);\n            var point = _this6._belongs._currentp;\n            var c = _this6._positionToCursorOffset(point);\n            var initialRange = _this6._textRange.initialRange;\n            _this6._status.editing = false;\n            Object.assign(_this6._textRange, {\n              rangefrom: Math.min(c, initialRange),\n              rangeTo: Math.max(c, initialRange),\n              enable: true\n            });\n          }.bind(_this6);\n          document.addEventListener(\'pointermove\', t);\n          document.addEventListener(\'pointerup\', function (e) {\n            document.removeEventListener(\'pointermove\', t);\n            if (!moved) {\n              _this6._textRange.initialRange = null;\n              return;\n            }\n            var rangeTo = _this6._textRange.rangeTo;\n            _this6._cursorOffset = rangeTo;\n            _this6._status.editing = true;\n            _this6._status.inputElement.focus({\n              preventScroll: true\n            });\n            _this6._textRange.initialRange = null;\n          }, {\n            once: true\n          });\n        }\n      });\n    }\n  }, {\n    key: "_positionToCursorOffset",\n    value: function _positionToCursorOffset(point) {\n      var _point = text_slicedToArray(point, 1),\n        x = _point[0];\n      var w = this.width / 2;\n      var _this$anchor = text_slicedToArray(this.anchor, 1),\n        ox = _this$anchor[0];\n      var offsetX = x - (ox - w);\n      var cursorOffset = 0;\n      if (offsetX >= this._textWidth) {\n        cursorOffset = this.content.length;\n      } else {\n        cursorOffset = this._calculateOffset(offsetX);\n      }\n      return cursorOffset;\n    }\n  }, {\n    key: "_calculateOffset",\n    value: function _calculateOffset(offx) {\n      var _this7 = this;\n      var content = this.content;\n      if (this.spacePlaceholder) {\n        content = this.replaceSpaceHolder(content, true);\n      }\n      var maxL = content.length - 1;\n      var contentWidth = this._textWidth;\n      if (contentWidth === 0) {\n        return 0;\n      }\n      var allwidth = contentWidth;\n      var idx = Math.floor(offx / allwidth * maxL);\n      requestCacheCanvas(function (ctx) {\n        ctx.font = "".concat(_this7.fontSize, " ").concat(_this7.fontFamily);\n        var g1, g2;\n        var lastidx;\n        var c = content.substring(0, idx);\n        var c1 = content.substring(idx - 1, idx);\n        var c2 = content.substring(idx, idx + 1);\n        var w = ctx.measureText(c).width;\n        var w1 = ctx.measureText(c1).width;\n        var w2 = ctx.measureText(c2).width;\n        g1 = w - w1 / 2;\n        g2 = w + w2 / 2;\n        do {\n          if (g1 <= offx && g2 >= offx) {\n            break;\n          }\n          if (g1 > offx) {\n            // 左侧少了\n            var spanw = g2 - offx;\n            lastidx = idx;\n            if (spanw < 100) {\n              idx -= 1;\n            } else {\n              idx -= Math.floor(spanw / g2 * lastidx);\n            }\n            c = content.substring(idx, lastidx);\n            w -= ctx.measureText(c).width;\n          } else if (g2 < offx) {\n            // 右侧少了\n            var _spanw = offx - g1;\n            lastidx = idx;\n            if (_spanw < 100) {\n              idx += 1;\n            } else {\n              idx += Math.floor(_spanw / (allwidth - g1) * (maxL - lastidx));\n            }\n            c = content.substring(lastidx, idx);\n            w += ctx.measureText(c).width;\n          }\n          c1 = content.substring(idx - 1, idx);\n          c2 = content.substring(idx, idx + 1);\n          w1 = ctx.measureText(c1).width;\n          w2 = ctx.measureText(c2).width;\n          g1 = w - w1 / 2;\n          g2 = w + w2 / 2;\n        } while (idx >= 0 && idx <= maxL);\n      });\n      return idx;\n    }\n  }, {\n    key: "_refreshCursor",\n    value: function _refreshCursor() {\n      if (this._status.editing) {\n        Object.assign(this._status, {\n          cursorshow: true,\n          refreshElapsed: true\n        });\n      }\n      if (this._textRange.enable) {\n        this._textRange.enable = false;\n      }\n    }\n  }, {\n    key: "render",\n    value: function render(ctx) {\n      if (this._isMoving) {\n        ctx.globalAlpha = 0.6;\n      }\n      if (!ctx.disableCache && !this._status.editing && this._jflow.scale * parseInt(this.fontSize) < 8) {\n        var _this$anchor2 = text_slicedToArray(this.anchor, 2),\n          cx = _this$anchor2[0],\n          cy = _this$anchor2[1];\n        // this._shadowCache.render(ctx);\n        ctx.save();\n        ctx.translate(cx, cy);\n        ctx.beginPath();\n        ctx.drawImage(this._shadowCache.imageBuffer, -this.width / 2, -this.height / 2, this.width, this.height);\n        ctx.translate(-cx, -cy);\n        ctx.restore();\n        return;\n      }\n      var font = "".concat(this.fontWeight, " ").concat(this.fontSize, " ").concat(this.fontFamily);\n      if (ctx.font !== font) {\n        ctx.font = font;\n      }\n      if (ctx.textAlign !== this.textAlign) {\n        ctx.textAlign = this.textAlign;\n      }\n      if (ctx.textBaseline !== this.textBaseline) {\n        ctx.textBaseline = this.textBaseline;\n      }\n      ctx.fillStyle = this.isEmpty ? this.placeholderColor : this.textColor;\n      var content = this.currentContent;\n      if (this.spacePlaceholder) {\n        if (this.textAlign === TEXT_ALIGN.LEFT) {\n          var _hw3 = this.width / 2;\n          var w = this.anchor[0] - _hw3 + this.indent / 2;\n          var _y = this.anchor[1];\n          this._spacedContentSegmnent.forEach(function (seg) {\n            ctx.fillStyle = seg[2];\n            ctx.fillText(seg[0], w, _y);\n            w += seg[1];\n          });\n        }\n      } else {\n        if (this.ellipsisContent) {\n          content = this.ellipsisContent;\n        }\n        if (content) {\n          if (this.textAlign === TEXT_ALIGN.LEFT) {\n            var _hw4 = this.width / 2;\n            ctx.fillText(content, this.anchor[0] - _hw4 + this.indent / 2, this.anchor[1]);\n          } else if (this.textAlign === TEXT_ALIGN.RIGHT) {\n            var _hw5 = this.width / 2;\n            ctx.fillText(content, this.anchor[0] + _hw5, this.anchor[1]);\n          } else {\n            ctx.fillText(content, this.anchor[0] + this.indent / 2, this.anchor[1]);\n          }\n        }\n      }\n      var hw = this.width / 2;\n      var textheight = this._textHeight;\n      var _this$anchor3 = text_slicedToArray(this.anchor, 2),\n        x = _this$anchor3[0],\n        y = _this$anchor3[1];\n      var lx = x - hw;\n      var ly = y - textheight / 2;\n      if (this._status.cursorshow && this._status.editing) {\n        var offset = this._cursorOffset;\n        var c = content.substring(0, offset);\n        if (this.spacePlaceholder) {\n          c = this.replaceSpaceHolder(c, true);\n        }\n        var cw = lx + ctx.measureText(c).width;\n        var c_len = this._textHeight / 2;\n        ctx.beginPath();\n        ctx.moveTo(cw, y - c_len);\n        ctx.lineTo(cw, y + c_len);\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = this.cursorColor;\n        ctx.stroke();\n      }\n      if (this._textRange.enable) {\n        var _this$_textRange = this._textRange,\n          rangefrom = _this$_textRange.rangefrom,\n          rangeTo = _this$_textRange.rangeTo;\n        var _c = this.content.substring(0, rangefrom);\n        var range = this.content.substring(rangefrom, rangeTo);\n        var _x2 = lx + ctx.measureText(_c).width;\n        var _w2 = ctx.measureText(range).width;\n        ctx.beginPath();\n        ctx.rect(_x2, ly, _w2, textheight);\n        ctx.fillStyle = this.textRangeColor;\n        ctx.fill();\n      }\n    }\n  }, {\n    key: "_inputControl",\n    value: function _inputControl(op, data) {\n      if (this._textRange.enable) {\n        this._clearTextRange();\n        if (op === \'Backspace\') {\n          this.dispatchEvent(new events(\'input\', {\n            target: this,\n            oldVal: this._status.oldVal,\n            val: this.content\n          }));\n          this.refresh();\n          this.syncShadowInputPosition();\n          return;\n        }\n      }\n      var offset = this._cursorOffset;\n      var content = this.content;\n      var preContent = content.substring(0, offset);\n      var afterContent;\n      if (this.cacheIdx) {\n        afterContent = content.substring(this.cacheIdx[1]);\n      } else {\n        afterContent = content.substring(offset);\n      }\n      var stopInputEvent = false;\n      switch (op) {\n        case "Input":\n          preContent += data;\n          this._cursorOffset += data.length;\n          this.content = preContent + afterContent;\n          break;\n        case "compositionstart":\n          this.cacheIdx = [preContent.length, preContent.length];\n          break;\n        case "compositionupdate":\n          preContent = preContent.substring(0, this.cacheIdx[0]);\n          preContent += data;\n          this.content = preContent + afterContent;\n          this._cursorOffset = this.cacheIdx[0] + data.length;\n          this.cacheIdx[1] = this.cacheIdx[0] + data.length;\n          break;\n        case "compositionend":\n          preContent = preContent.substring(0, this.cacheIdx[0]);\n          this._cursorOffset = this.cacheIdx[0] + data.length;\n          this.cacheIdx = null;\n          preContent += data;\n          this.content = preContent + afterContent;\n          break;\n        case "Enter":\n          if (this.cacheIdx) {\n            return;\n          }\n          var defaultAct = true;\n          this.dispatchEvent(new events(\'enterkeypressed\', {\n            target: this,\n            handler: function handler(val) {\n              defaultAct = val;\n            },\n            stopInput: function stopInput() {\n              stopInputEvent = true;\n            }\n          }));\n          if (defaultAct) {\n            this._jflow.blur();\n          }\n          break;\n        case "Backspace":\n          if (this.cacheIdx) {\n            return;\n          }\n          preContent = preContent.substring(0, preContent.length - 1);\n          this._cursorOffset = Math.max(0, this._cursorOffset - 1);\n          this.content = preContent + afterContent;\n          break;\n      }\n      if (!stopInputEvent) {\n        this.dispatchEvent(new events(\'input\', {\n          target: this,\n          oldVal: this._status.oldVal,\n          val: this.content\n        }));\n      }\n      this.refresh();\n      this.syncShadowInputPosition();\n    }\n  }, {\n    key: "refresh",\n    value: function refresh() {\n      this.preCalculateText();\n      this._belongs.recalculateUp();\n      this._jflow.scheduleRender();\n    }\n  }, {\n    key: "syncShadowInputPosition",\n    value: function syncShadowInputPosition() {\n      var _this8 = this;\n      if (this._status.editing) {\n        var hw = this.width / 2;\n        var hh = this.height / 2;\n        var lx = this.anchor[0] - hw;\n        var offset = this._cursorOffset;\n        requestCacheCanvas(function (ctx) {\n          ctx.beginPath();\n          ctx.font = "".concat(_this8.fontSize, " ").concat(_this8.fontFamily);\n          var c = _this8.content.substring(0, offset);\n          lx += ctx.measureText(c).width;\n        });\n        var point = this.calculateToRealWorld([lx, hh]);\n        var canvasMeta = this._jflow.canvasMeta;\n        var px = Math.min(canvasMeta.actual_width - 120, point[0]);\n        this._status.inputElement.style.transform = "translate(".concat(px, "px, ").concat(point[1], "px)");\n      }\n    }\n  }, {\n    key: "_controlCallback",\n    value: function _controlCallback(op, data, e) {\n      if (this._status.editing) {\n        Object.assign(this._status, {\n          cursorshow: true,\n          refreshElapsed: true\n        });\n      }\n      switch (op) {\n        case "Input":\n        case "compositionstart":\n        case "compositionupdate":\n        case "compositionend":\n        case "Enter":\n        case "Backspace":\n          this._inputControl(op, data);\n          break;\n        case "ArrowLeft":\n          if (this._textRange.enable) {\n            this._textRange.enable = false;\n          }\n          this._onArrowLeft();\n          break;\n        case "ArrowRight":\n          if (this._textRange.enable) {\n            this._textRange.enable = false;\n          }\n          this._onArrowRight();\n          break;\n        case "Shift":\n          this._onShiftToggle(data);\n          break;\n        case "CtrlA":\n          this._selectFullRange();\n          break;\n        case "COPY":\n          this._copy(e);\n          break;\n        case "CUT":\n          this._cut(e);\n          break;\n        case "PASTE":\n          this._paste(e);\n          break;\n      }\n    }\n  }, {\n    key: "_onArrowLeft",\n    value: function _onArrowLeft() {\n      this._cursorOffset = Math.max(0, this._cursorOffset - 1);\n      this._jflow.scheduleRender();\n      this.syncShadowInputPosition();\n    }\n  }, {\n    key: "_onArrowRight",\n    value: function _onArrowRight() {\n      this._cursorOffset = Math.min(this.content.length, this._cursorOffset + 1);\n      this._jflow.scheduleRender();\n      this.syncShadowInputPosition();\n    }\n  }, {\n    key: "_onShiftToggle",\n    value: function _onShiftToggle(val) {\n      this._status.shiftOn = val;\n      if (val) {\n        this._textRange.initialRange = this._cursorOffset;\n      } else {\n        this._textRange.initialRange = null;\n      }\n    }\n  }, {\n    key: "_selectFullRange",\n    value: function _selectFullRange() {\n      this._textRange = {\n        enable: true,\n        rangefrom: 0,\n        rangeTo: this.content.length\n      };\n      this._cursorOffset = this.content.length;\n    }\n  }, {\n    key: "_clearTextRange",\n    value: function _clearTextRange() {\n      if (this._textRange.enable) {\n        var _this$_textRange2 = this._textRange,\n          rangefrom = _this$_textRange2.rangefrom,\n          rangeTo = _this$_textRange2.rangeTo;\n        var content = this.content;\n        var preContent = content.substring(0, rangefrom);\n        var afterContent = content.substring(rangeTo);\n        this.content = preContent + afterContent;\n        this._cursorOffset = preContent.length;\n        this._textRange.enable = false;\n      }\n    }\n  }, {\n    key: "_getSelection",\n    value: function _getSelection() {\n      if (this._textRange.enable) {\n        var _this$_textRange3 = this._textRange,\n          rangefrom = _this$_textRange3.rangefrom,\n          rangeTo = _this$_textRange3.rangeTo;\n        var content = this.content;\n        return content.substring(rangefrom, rangeTo);\n      }\n      return null;\n    }\n  }, {\n    key: "_copy",\n    value: function _copy(event) {\n      var selection = this._getSelection();\n      if (selection) {\n        event.clipboardData.setData("text/plain", selection);\n      }\n    }\n  }, {\n    key: "_cut",\n    value: function _cut(event) {\n      var selection = this._getSelection();\n      if (selection) {\n        event.clipboardData.setData("text/plain", selection);\n        this._clearTextRange();\n        this.refresh();\n      }\n    }\n  }, {\n    key: "_paste",\n    value: function _paste(event) {\n      var pasteContent = (event.clipboardData || window.clipboardData).getData("text");\n      var flag = false;\n      this.dispatchEvent(new events(\'paste\', {\n        target: this,\n        content: pasteContent,\n        preventDefault: function preventDefault() {\n          flag = true;\n        },\n        resolvePasteContent: function resolvePasteContent(callback) {\n          pasteContent = callback(pasteContent);\n        }\n      }));\n      if (flag) {\n        return;\n      }\n      this._clearTextRange();\n      var offset = this._cursorOffset;\n      var content = this.content;\n      var preContent = content.substring(0, offset);\n      var afterContent = content.substring(offset);\n      this.content = preContent + pasteContent + afterContent;\n      this._cursorOffset = (preContent + pasteContent).length;\n      this.refresh();\n    }\n  }, {\n    key: "_defaultCallback",\n    value: function _defaultCallback(op, e) {\n      switch (op) {\n        case \'KeyDown\':\n          this.dispatchEvent(new events(\'keydown\', {\n            target: this,\n            key: e.key,\n            code: e.code,\n            rawEvent: e\n          }));\n          break;\n        case \'KeyUp\':\n          this.dispatchEvent(new events(\'keyup\', {\n            target: this,\n            key: e.key,\n            code: e.code,\n            rawEvent: e\n          }));\n          break;\n      }\n    }\n  }, {\n    key: "destroy",\n    value: function destroy() {\n      if (this._jflow._focus.instance === this) {\n        this._jflow.blur();\n      }\n    }\n  }]);\n  return Text;\n}(rectangle);\n/* harmony default export */ const elements_text = (Text);\nfunction createInputElement(controlCallback, defaultCallback) {\n  var input = document.createElement(\'input\');\n  input.setAttribute(\'style\', "\\n        width: 100px;\\n        position: absolute;\\n        left: 0;\\n        top: 0;\\n        border:none;\\n        opacity: 0;\\n        z-index: -1;\\n        contain: strict;");\n  input.setAttribute(\'tabindex\', -1);\n  input.setAttribute(\'spellcheck\', false);\n  input.setAttribute(\'autocorrect\', \'off\');\n\n  // let content = configs.content;\n  // let startidx = 0;\n\n  // function renderContent() {\n  //     configs.callback(content)\n  // }\n  var stopInput = false;\n  var status = {\n    ctrlOn: false\n  };\n  input.addEventListener(\'beforeinput\', function (e) {\n    e.preventDefault();\n    if (e.data) {\n      // content += e.data;\n      // renderContent();\n      if (!stopInput) {\n        controlCallback(\'Input\', e.data);\n      }\n    }\n  });\n  input.addEventListener(\'compositionstart\', function (e) {\n    // cache composition start offset\n    // startidx = content.length;\n    controlCallback(\'compositionstart\');\n    stopInput = true;\n  });\n  input.addEventListener(\'compositionupdate\', function (e) {\n    // update content\n    // content = content.substring(0, startidx);\n    // content += e.data;\n    // renderContent();\n    controlCallback(\'compositionupdate\', e.data);\n  });\n  input.addEventListener(\'compositionend\', function (e) {\n    // replace text at start offset\n    // content = content.substring(0, startidx);\n    // startidx = 0;\n    // content += e.data;\n    // renderContent();\n    controlCallback(\'compositionend\', e.data);\n    input.value = \'\';\n    stopInput = false;\n  });\n  input.addEventListener(\'keyup\', function (event) {\n    switch (event.key) {\n      case "Shift":\n        controlCallback("Shift", false);\n        break;\n      case "Meta":\n      case "Control":\n        status.ctrlOn = false;\n        break;\n    }\n  });\n  input.addEventListener(\'keydown\', function (event) {\n    switch (event.code) {\n      case "Enter":\n        // content = content + \'\\n\';\n        // renderContent();\n        controlCallback(\'Enter\');\n        break;\n      case "Backspace":\n        // content = content.substring(0, content.length - 1);\n        // renderContent();\n        controlCallback(\'Backspace\');\n        break;\n      case "ArrowLeft":\n        controlCallback("ArrowLeft");\n        break;\n      case "ArrowRight":\n        controlCallback("ArrowRight");\n        break;\n      case "ArrowDown":\n        controlCallback("ArrowDown");\n        break;\n      case "ArrowUp":\n        controlCallback("ArrowUp");\n        break;\n    }\n    switch (event.key) {\n      case "Shift":\n        controlCallback("Shift", true);\n        break;\n      case "Meta":\n      case "Control":\n        status.ctrlOn = true;\n        break;\n      case \'a\':\n        if (status.ctrlOn) {\n          controlCallback(\'CtrlA\');\n        }\n        break;\n    }\n  });\n  input.addEventListener(\'keyup\', function (event) {\n    defaultCallback(\'KeyUp\', event);\n  });\n  input.addEventListener(\'keydown\', function (event) {\n    defaultCallback(\'KeyDown\', event);\n  });\n  input.addEventListener(\'copy\', function (event) {\n    event.preventDefault();\n    event.stopPropagation();\n    controlCallback(\'COPY\', null, event);\n  });\n  input.addEventListener(\'cut\', function (event) {\n    event.preventDefault();\n    event.stopPropagation();\n    controlCallback(\'CUT\', null, event);\n  });\n  input.addEventListener(\'paste\', function (event) {\n    event.preventDefault();\n    event.stopPropagation();\n    controlCallback(\'PASTE\', null, event);\n  });\n  return input;\n}\n;// CONCATENATED MODULE: ./src/core/instance/image.js\nfunction image_typeof(obj) { "@babel/helpers - typeof"; return image_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, image_typeof(obj); }\nfunction image_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction image_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, image_toPropertyKey(descriptor.key), descriptor); } }\nfunction image_createClass(Constructor, protoProps, staticProps) { if (protoProps) image_defineProperties(Constructor.prototype, protoProps); if (staticProps) image_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction image_toPropertyKey(arg) { var key = image_toPrimitive(arg, "string"); return image_typeof(key) === "symbol" ? key : String(key); }\nfunction image_toPrimitive(input, hint) { if (image_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (image_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction image_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) image_setPrototypeOf(subClass, superClass); }\nfunction image_setPrototypeOf(o, p) { image_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return image_setPrototypeOf(o, p); }\nfunction image_createSuper(Derived) { var hasNativeReflectConstruct = image_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = image_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = image_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return image_possibleConstructorReturn(this, result); }; }\nfunction image_possibleConstructorReturn(self, call) { if (call && (image_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return image_assertThisInitialized(self); }\nfunction image_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction image_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction image_getPrototypeOf(o) { image_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return image_getPrototypeOf(o); }\n\n\n\n\n\n\n/**\n * @typedef {Object} Icon~ImageBounding\n * @property {number} width   - 图片宽度\n * @property {number} height   - 图片高度 \n */\n/**\n * 图片单元 配置\n * @typedef {Rectangle~RectangleConfigs} Icon~IconConfigs\n * @property {number} image   - 图片地址\n * @property {number} imageWidth   - 图片宽度\n * @property {number} imageHeight   - 图片高度\n */\n\n/**\n * 图片单元\n * @description 图片单元可以绘制图片，图片加载后会自动重新绘制\n * @constructor Icon\n * @extends Rectangle\n * @param {Icon~IconConfigs} configs - 配置\n */\nvar Icon = /*#__PURE__*/function (_Rectangle) {\n  image_inherits(Icon, _Rectangle);\n  var _super = image_createSuper(Icon);\n  function Icon(configs) {\n    var _this;\n    image_classCallCheck(this, Icon);\n    _this = _super.call(this, configs);\n    /** @member {CanvasImageSource}      - 图片 */\n    _this.image = configs.image;\n    _this.image.onload = function () {\n      _this._jflow._render();\n      // requestAnimationFrame(() => {\n\n      // })\n    };\n    /** @member {Icon~ImageBounding}      - 图片维度 */\n    _this.imageBounding = {\n      width: configs.imageWidth || configs.width,\n      height: configs.imageHeight || configs.height\n    };\n    return _this;\n  }\n  image_createClass(Icon, [{\n    key: "setConfig",\n    value: function setConfig(configs) {\n      var _this2 = this;\n      Object.keys(configs).forEach(function (k) {\n        if (configs[k] !== undefined && configs[k] !== null) {\n          _this2[k] = configs[k];\n          _this2._rawConfigs[k] = configs[k];\n        }\n      });\n      if (configs.image && !configs.image.complete) {\n        this.image.onload = function () {\n          _this2._jflow._render();\n          // requestAnimationFrame(() => {\n          //     this._jflow._render();\n          // })\n        };\n      }\n\n      this.imageBounding = {\n        width: configs.imageWidth || configs.width || this.imageBounding.width,\n        height: configs.imageHeight || configs.height || this.imageBounding.height\n      };\n    }\n  }, {\n    key: "render",\n    value: function render(ctx) {\n      ctx.save();\n      if (this._isMoving) {\n        ctx.globalAlpha = 0.6;\n      }\n      rectangle.prototype.render.call(this, ctx);\n      var x = this.anchor[0] - this.width / 2;\n      var y = this.anchor[1] - this.height / 2;\n      if (this.opacity < 1) {\n        ctx.globalAlpha = this.opacity;\n      }\n      if (this.image.complete) {\n        ctx.drawImage(this.image, x, y, this.imageBounding.width, this.imageBounding.height);\n      }\n      ctx.restore();\n    }\n  }]);\n  return Icon;\n}(rectangle);\n/* harmony default export */ const instance_image = (Icon);\n;// CONCATENATED MODULE: ./src/core/instance/shadowDom.js\nfunction shadowDom_typeof(obj) { "@babel/helpers - typeof"; return shadowDom_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, shadowDom_typeof(obj); }\nfunction shadowDom_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction shadowDom_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, shadowDom_toPropertyKey(descriptor.key), descriptor); } }\nfunction shadowDom_createClass(Constructor, protoProps, staticProps) { if (protoProps) shadowDom_defineProperties(Constructor.prototype, protoProps); if (staticProps) shadowDom_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction shadowDom_toPropertyKey(arg) { var key = shadowDom_toPrimitive(arg, "string"); return shadowDom_typeof(key) === "symbol" ? key : String(key); }\nfunction shadowDom_toPrimitive(input, hint) { if (shadowDom_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (shadowDom_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction shadowDom_get() { if (typeof Reflect !== "undefined" && Reflect.get) { shadowDom_get = Reflect.get.bind(); } else { shadowDom_get = function _get(target, property, receiver) { var base = shadowDom_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return shadowDom_get.apply(this, arguments); }\nfunction shadowDom_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = shadowDom_getPrototypeOf(object); if (object === null) break; } return object; }\nfunction shadowDom_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) shadowDom_setPrototypeOf(subClass, superClass); }\nfunction shadowDom_setPrototypeOf(o, p) { shadowDom_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return shadowDom_setPrototypeOf(o, p); }\nfunction shadowDom_createSuper(Derived) { var hasNativeReflectConstruct = shadowDom_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = shadowDom_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = shadowDom_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return shadowDom_possibleConstructorReturn(this, result); }; }\nfunction shadowDom_possibleConstructorReturn(self, call) { if (call && (shadowDom_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return shadowDom_assertThisInitialized(self); }\nfunction shadowDom_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction shadowDom_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction shadowDom_getPrototypeOf(o) { shadowDom_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return shadowDom_getPrototypeOf(o); }\n\n/**\n * @funtion domFactory\n * @param {Element} container - DOM容器\n */\n/**\n * DOM元素容器 配置\n * @typedef {Rectangle~Configs} ShadowDom~RectangleConfigs\n * @property {domFactory} createDocument - 宽\n */\n/**\n * DOM元素容器 内容可贴 DOM 元素，支持缩放平移\n * @constructor ShadowDom\n * @extends Rectangle\n * @param {ShadowDom~RectangleConfigs} configs\n */\nvar ShadowDom = /*#__PURE__*/function (_Rectangle) {\n  shadowDom_inherits(ShadowDom, _Rectangle);\n  var _super = shadowDom_createSuper(ShadowDom);\n  function ShadowDom(configs) {\n    var _this;\n    shadowDom_classCallCheck(this, ShadowDom);\n    _this = _super.call(this, configs);\n    _this.domFactory = configs.createDocument;\n    _this._dom = null;\n    return _this;\n  }\n  shadowDom_createClass(ShadowDom, [{\n    key: "getRealWorldPosition",\n    value: function getRealWorldPosition() {\n      var b = this.getBoundingRect();\n      return this.calculateToRealWorld(b.slice(0, 2));\n    }\n  }, {\n    key: "render",\n    value: function render(ctx) {\n      var _this2 = this;\n      if (!this._dom && this.domFactory) {\n        requestAnimationFrame(function () {\n          if (!_this2._dom) {\n            var container = document.createElement(\'div\');\n            var pos = _this2.getRealWorldPosition();\n            var scale = _this2._jflow.scale;\n            container.setAttribute(\'style\', "\\n                        position: absolute;\\n                        width: ".concat(_this2.width, "px;\\n                        height: ").concat(_this2.height, "px;\\n                        transform-origin: left top;\\n                        top: 0;\\n                        left: 0;\\n                        transform: translate(").concat(pos[0], "px, ").concat(pos[1], "px) scale(").concat(scale, ");"));\n            _this2._dom = container;\n            _this2._jflow.DOMwrapper.appendChild(container);\n            _this2.domFactory(container);\n          }\n        });\n      } else {\n        var pos = this.getRealWorldPosition();\n        var scale = this._jflow.scale;\n        this._dom.style.transform = "translate(".concat(pos[0], "px, ").concat(pos[1], "px) scale(").concat(scale, ")");\n      }\n      shadowDom_get(shadowDom_getPrototypeOf(ShadowDom.prototype), "render", this).call(this, ctx);\n    }\n  }, {\n    key: "onEnterViewbox",\n    value: function onEnterViewbox() {\n      if (this._dom) {\n        this._dom.style.display = \'block\';\n      }\n    }\n  }, {\n    key: "onLeaveViewbox",\n    value: function onLeaveViewbox() {\n      if (this._dom) {\n        this._dom.style.display = \'none\';\n      }\n    }\n  }, {\n    key: "destroy",\n    value: function destroy() {\n      if (this._dom) {\n        this._jflow.DOMwrapper.removeChild(this._dom);\n      }\n      shadowDom_get(shadowDom_getPrototypeOf(ShadowDom.prototype), "destroy", this).call(this);\n    }\n  }]);\n  return ShadowDom;\n}(rectangle);\n/* harmony default export */ const shadowDom = (ShadowDom);\n;// CONCATENATED MODULE: ./src/core/instance/link.js\nfunction link_typeof(obj) { "@babel/helpers - typeof"; return link_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, link_typeof(obj); }\nfunction link_slicedToArray(arr, i) { return link_arrayWithHoles(arr) || link_iterableToArrayLimit(arr, i) || link_unsupportedIterableToArray(arr, i) || link_nonIterableRest(); }\nfunction link_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction link_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return link_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return link_arrayLikeToArray(o, minLen); }\nfunction link_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction link_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction link_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction link_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction link_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, link_toPropertyKey(descriptor.key), descriptor); } }\nfunction link_createClass(Constructor, protoProps, staticProps) { if (protoProps) link_defineProperties(Constructor.prototype, protoProps); if (staticProps) link_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction link_toPropertyKey(arg) { var key = link_toPrimitive(arg, "string"); return link_typeof(key) === "symbol" ? key : String(key); }\nfunction link_toPrimitive(input, hint) { if (link_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (link_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction link_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) link_setPrototypeOf(subClass, superClass); }\nfunction link_setPrototypeOf(o, p) { link_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return link_setPrototypeOf(o, p); }\nfunction link_createSuper(Derived) { var hasNativeReflectConstruct = link_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = link_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = link_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return link_possibleConstructorReturn(this, result); }; }\nfunction link_possibleConstructorReturn(self, call) { if (call && (link_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return link_assertThisInitialized(self); }\nfunction link_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction link_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction link_getPrototypeOf(o) { link_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return link_getPrototypeOf(o); }\n\n\n\n/**\n * @typedef {BaseLink~Configs} Link~Configs\n * @property {Number} approximate   - 点击响应范围\n * @property {Number[]} lineDash    - 虚线数组\n * @property {Boolean} doubleLink   - 双向箭头\n * @property {String} fontFamily    - 连线上的文字字体\n * @property {Number} fontSize      - 连线上的文字大小\n * @property {String} content       - 连线上的文字\n */\n/**\n * 直线\n * @constructor Link\n * @extends BaseLink\n * @param {Link~Configs} configs - 配置\n */\nvar Link = /*#__PURE__*/function (_BaseLink) {\n  link_inherits(Link, _BaseLink);\n  var _super = link_createSuper(Link);\n  function Link(configs) {\n    var _this;\n    link_classCallCheck(this, Link);\n    _this = _super.call(this, configs);\n    _this.fontFamily = configs.fontFamily = \'-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Helvetica,Tahoma,Arial,Noto Sans,PingFang SC,Microsoft YaHei,Hiragino Sans GB,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji\';\n    _this.fontSize = configs.fontSize || \'12px\';\n    _this.content = configs.content || \'\';\n    _this.lineDash = configs.lineDash;\n    _this.approximate = configs.approximate || APPROXIMATE;\n    _this._cacheAngle = undefined;\n    _this._cachePoints = [];\n    _this._cacheBoundingbox = {\n      from: [],\n      to: []\n    };\n    return _this;\n  }\n  link_createClass(Link, [{\n    key: "_calculateAnchorPoints",\n    value: function _calculateAnchorPoints() {\n      var p0 = this.from.calculateIntersection(this.to.getCenter());\n      var p1 = this.to.calculateIntersection(this.from.getCenter());\n      this._cachePoints[0] = p0;\n      this._cachePoints[1] = p1;\n      var dx = p1[0] - p0[0];\n      var dy = p1[1] - p0[1];\n      var angle = Math.atan2(dy, dx);\n      this._cacheAngle = angle;\n    }\n  }, {\n    key: "isInViewBox",\n    value: function isInViewBox(br) {\n      var frombox = this.from.getBoundingRect();\n      var tobox = this.to.getBoundingRect();\n      var _box = this._cacheBoundingbox;\n      if (!compareBoundingbox(_box.from, frombox) || compareBoundingbox(_box.to, tobox)) {\n        copyBoundingbox(_box.from, frombox);\n        copyBoundingbox(_box.to, tobox);\n        this._calculateAnchorPoints();\n      }\n      return true;\n    }\n  }, {\n    key: "render",\n    value: function render(ctx) {\n      var _this$_cachePoints = link_slicedToArray(this._cachePoints, 2),\n        p0 = _this$_cachePoints[0],\n        p1 = _this$_cachePoints[1];\n      var angle = this._cacheAngle;\n      var dx = p1[0] - p0[0];\n      var dy = p1[1] - p0[1];\n      ctx.fillStyle = ctx.strokeStyle = this.backgroundColor;\n      ctx.beginPath();\n      if (this.content) {\n        ctx.textAlign = \'center\';\n        ctx.font = "".concat(this.fontSize, " ").concat(this.fontFamily);\n        ctx.textBaseline = \'middle\';\n        var _ctx$measureText = ctx.measureText(this.content),\n          actualBoundingBoxLeft = _ctx$measureText.actualBoundingBoxLeft,\n          actualBoundingBoxRight = _ctx$measureText.actualBoundingBoxRight,\n          fontBoundingBoxAscent = _ctx$measureText.fontBoundingBoxAscent,\n          fontBoundingBoxDescent = _ctx$measureText.fontBoundingBoxDescent;\n        var x = dx / 2 + p0[0];\n        var y = dy / 2 + p0[1];\n        ctx.fillText(this.content, x, y);\n        var width = Math.abs(actualBoundingBoxLeft) + Math.abs(actualBoundingBoxRight) + 20;\n        var height = (Math.abs(fontBoundingBoxAscent) + Math.abs(fontBoundingBoxDescent)) * 1.5;\n        ctx.beginPath();\n        var region = new Path2D();\n        region.rect(x - width / 2, y - height / 2, width, height);\n        var rx = Math.min(p1[0], p0[0]) - 10;\n        var ry = Math.min(p1[1], p0[1]) - 10;\n        var rw = Math.abs(dx) + 20;\n        var rh = Math.abs(dy) + 20;\n        region.rect(rx, ry, rw, rh);\n        ctx.clip(region, "evenodd");\n      }\n      ctx.moveTo(p0[0], p0[1]);\n      ctx.lineTo(p1[0], p1[1]);\n      if (this.lineDash) {\n        ctx.save();\n        ctx.setLineDash(this.lineDash);\n      }\n      ctx.stroke();\n      if (this.lineDash) {\n        ctx.restore();\n      }\n      ctx.translate(p1[0], p1[1]);\n      ctx.rotate(angle);\n      ctx.moveTo(0, 0);\n      ctx.lineTo(-5, -4);\n      ctx.lineTo(-5, 4);\n      ctx.lineTo(0, 0);\n      ctx.fill();\n      ctx.rotate(-angle);\n      ctx.translate(-p1[0], -p1[1]);\n    }\n  }, {\n    key: "isHit",\n    value: function isHit(point) {\n      if (!this._cachePoints) return false;\n      var _this$_cachePoints2 = link_slicedToArray(this._cachePoints, 2),\n        start = _this$_cachePoints2[0],\n        end = _this$_cachePoints2[1];\n      var dist = distToSegmentSquared(point, start, end);\n      return dist < this.approximate;\n    }\n  }]);\n  return Link;\n}(base_link);\n/* harmony default export */ const instance_link = (Link);\n;// CONCATENATED MODULE: ./src/core/instance/poly-link.js\nfunction poly_link_typeof(obj) { "@babel/helpers - typeof"; return poly_link_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, poly_link_typeof(obj); }\nfunction poly_link_defineProperty(obj, key, value) { key = poly_link_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction poly_link_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction poly_link_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, poly_link_toPropertyKey(descriptor.key), descriptor); } }\nfunction poly_link_createClass(Constructor, protoProps, staticProps) { if (protoProps) poly_link_defineProperties(Constructor.prototype, protoProps); if (staticProps) poly_link_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction poly_link_toPropertyKey(arg) { var key = poly_link_toPrimitive(arg, "string"); return poly_link_typeof(key) === "symbol" ? key : String(key); }\nfunction poly_link_toPrimitive(input, hint) { if (poly_link_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (poly_link_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction poly_link_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) poly_link_setPrototypeOf(subClass, superClass); }\nfunction poly_link_setPrototypeOf(o, p) { poly_link_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return poly_link_setPrototypeOf(o, p); }\nfunction poly_link_createSuper(Derived) { var hasNativeReflectConstruct = poly_link_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = poly_link_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = poly_link_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return poly_link_possibleConstructorReturn(this, result); }; }\nfunction poly_link_possibleConstructorReturn(self, call) { if (call && (poly_link_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return poly_link_assertThisInitialized(self); }\nfunction poly_link_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction poly_link_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction poly_link_getPrototypeOf(o) { poly_link_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return poly_link_getPrototypeOf(o); }\n\n\n\n// import { dist2, bezierPoint } from \'../utils/functions\';\nvar PIINRATIO = Math.PI / 180;\n/**\n * @typedef {BaseLink~Configs} PolyLink~Configs\n * @property {Number} approximate   - 点击响应范围\n * @property {Number} radius        - 拐角弧度\n * @property {Number} minSpanX      - 起点终点在 x 方向最小的跨度\n * @property {Number} minSpanY      - 起点终点在 y 方向最小的跨度\n * @property {number[]} lineDash    - 虚线数组\n * @property {Boolean} doubleLink   - 双向箭头\n * @property {String} fontFamily    - 连线上的文字字体\n * @property {Number} fontSize      - 连线上的文字大小\n * @property {String} content       - 连线上的文字\n * @property {String} isSelf        - 是否为自连接\n */\n/**\n * 方形折线\n * @constructor PolyLink\n * @extends BaseLink\n * @param {PolyLink~Configs} configs - 配置\n */\nvar PolyLink = /*#__PURE__*/function (_BaseLink) {\n  poly_link_inherits(PolyLink, _BaseLink);\n  var _super = poly_link_createSuper(PolyLink);\n  /**\n  * 创建方形折线\n  * @param {PolyLink~Configs} configs - 配置\n  **/\n  function PolyLink(configs) {\n    var _this;\n    poly_link_classCallCheck(this, PolyLink);\n    _this = _super.call(this, configs);\n    /** @member {Number}   - 点击响应范围 */\n    _this.approximate = configs.approximate || APPROXIMATE;\n    /** @member {Number}   - 拐角弧度 */\n    _this.radius = configs.radius || 0;\n    /** @member {Number}   - 起点终点在 x 方向最小的跨度 */\n    _this.minSpanX = configs.minSpanX || 10;\n    /** @member {Number}   - 起点终点在 y 方向最小的跨度 */\n    _this.minSpanY = configs.minSpanY || 10;\n    /** @member {Number}    - 虚线数组 */\n    _this.lineDash = configs.lineDash;\n    /** @member {Number}    - 双向箭头 */\n    _this.doubleLink = configs.doubleLink;\n    /** @member {Number}    - 连线上的文字字体 */\n    _this.fontFamily = configs.fontFamily = \'-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Helvetica,Tahoma,Arial,Noto Sans,PingFang SC,Microsoft YaHei,Hiragino Sans GB,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji\';\n    /** @member {Number}    - 连线上的文字大小 */\n    _this.fontSize = configs.fontSize || \'12px\';\n    /** @member {Number}    - 连线上的文字 */\n    _this.content = configs.content || \'\';\n    /** @member {Number}    - 是否为自连接 */\n    _this.isSelf = !!configs.isSelf;\n    _this.noArrow = !!configs.noArrow;\n    _this._cacheAngle = [];\n    _this._cachePoints = [];\n    _this._cacheBoundingbox = {\n      from: [],\n      to: []\n    };\n    return _this;\n  }\n  poly_link_createClass(PolyLink, [{\n    key: "_calculateAnchorPoints",\n    value: function _calculateAnchorPoints() {\n      var dmsfrom = this.from.getIntersectionsInFourDimension();\n      var dmsto = this.to.getIntersectionsInFourDimension();\n      var _cacheAngle = this._cacheAngle;\n      if (this.isSelf) {\n        polylinePoints(this._cachePoints, dmsfrom[this.fromDir], dmsto[DIRECTION.SELF], this.fromDir, this.toDir, this.minSpanX, this.minSpanY, true);\n        _cacheAngle[0] = this.fromDir;\n        _cacheAngle[1] = this.toDir;\n      } else if (this.fromDir !== undefined && this.toDir !== undefined) {\n        polylinePoints(this._cachePoints, dmsfrom[this.fromDir], dmsto[this.toDir], this.fromDir, this.toDir, this.minSpanX, this.minSpanY);\n        _cacheAngle[0] = this.fromDir;\n        _cacheAngle[1] = this.toDir;\n      } else {\n        var meta = minIntersectionBetweenNodes(dmsfrom, dmsto);\n        polylinePoints(this._cachePoints, meta.fromP, meta.toP, meta.fromDir, meta.toDir, this.minSpanX, this.minSpanY);\n        _cacheAngle[0] = meta.fromDir;\n        _cacheAngle[1] = meta.toDir;\n      }\n    }\n  }, {\n    key: "isInViewBox",\n    value: function isInViewBox(br) {\n      if (this._static) {\n        return true;\n      }\n      this._calculateAnchorPoints();\n      return isPolyLineIntersectionRectange(this._cachePoints, br);\n    }\n  }, {\n    key: "render",\n    value: function render(ctx) {\n      var _this2 = this;\n      // this._calculateAnchorPoints();\n      var radius = this.radius;\n      var points = this._cachePoints;\n      var p = points[0];\n      var pEnd = points[points.length - 1];\n      var angleEnd = (this._cacheAngle[1] + 2) % 4 * 90 * PIINRATIO;\n      ctx.fillStyle = ctx.strokeStyle = this.backgroundColor;\n      if (this.doubleLink) {\n        var beginAngle = (this._cacheAngle[0] + 2) % 4 * 90 * PIINRATIO;\n        ctx.beginPath();\n        ctx.translate(p[0], p[1]);\n        ctx.rotate(beginAngle);\n        ctx.moveTo(5, 0);\n        ctx.lineTo(0, -4);\n        ctx.lineTo(0, 4);\n        ctx.lineTo(5, 0);\n        ctx.fill();\n        ctx.rotate(-beginAngle);\n        ctx.translate(-p[0], -p[1]);\n      }\n      ctx.beginPath();\n      ctx.moveTo(p[0], p[1]);\n      points.slice(1, points.length - 1).forEach(function (p, idx) {\n        if (_this2.radius) {\n          var pLast = points[idx];\n          var pNext = points[idx + 2];\n          var _makeRadiusFromVector = makeRadiusFromVector(pLast, p, pNext, radius),\n            p1 = _makeRadiusFromVector.p1,\n            p2 = _makeRadiusFromVector.p2;\n          if (p1 && p2) {\n            ctx.lineTo(p1[0], p1[1]);\n            ctx.quadraticCurveTo(p[0], p[1], p2[0], p2[1]);\n          } else {\n            ctx.lineTo(p[0], p[1]);\n          }\n        } else {\n          ctx.lineTo(p[0], p[1]);\n        }\n      });\n      ctx.lineTo(pEnd[0], pEnd[1]);\n      if (this.lineDash) {\n        ctx.save();\n        ctx.setLineDash(this.lineDash);\n      }\n      ctx.stroke();\n      if (this.lineDash) {\n        ctx.restore();\n      }\n      if (!this.noArrow) {\n        ctx.beginPath();\n        ctx.translate(pEnd[0], pEnd[1]);\n        ctx.rotate(angleEnd);\n        ctx.moveTo(0, 0);\n        ctx.lineTo(-5, -4);\n        ctx.lineTo(-5, 4);\n        ctx.lineTo(0, 0);\n        ctx.fill();\n        ctx.rotate(-angleEnd);\n        ctx.translate(-pEnd[0], -pEnd[1]);\n      }\n      if (this.content) {\n        ctx.beginPath();\n        ctx.font = "".concat(this.fontSize, " ").concat(this.fontFamily);\n        switch (this.fromDir) {\n          case DIRECTION.BOTTOM:\n            ctx.textAlign = \'left\';\n            ctx.fillText(this.content, p[0] + 2, p[1] + 10);\n            break;\n          case DIRECTION.RIGHT:\n            ctx.textAlign = \'left\';\n            ctx.fillText(this.content, p[0] + 10, p[1] - 2);\n            break;\n          default:\n            break;\n        }\n      }\n    }\n  }, {\n    key: "isHit",\n    value: function isHit(point) {\n      if (this._static) {\n        return false;\n      }\n      if (!this._cachePoints) {\n        return false;\n      }\n      var points = this._cachePoints;\n      var lastP = points[0];\n      var remainPoints = points.slice(1);\n      do {\n        var currentP = remainPoints.shift();\n        if (currentP) {\n          var dist = distToSegmentSquared(point, lastP, currentP);\n          if (dist < this.approximate) {\n            return true;\n          }\n        }\n        lastP = currentP;\n      } while (lastP);\n      return false;\n    }\n  }, {\n    key: "cloneStatic",\n    value: function cloneStatic() {\n      var _Object$assign;\n      var t = new PolyLink({});\n      Object.assign(t, (_Object$assign = {\n        radius: this.radius,\n        _cachePoints: this._cachePoints,\n        _cacheAngle: this._cacheAngle,\n        backgroundColor: this.backgroundColor,\n        doubleLink: this.doubleLink\n      }, poly_link_defineProperty(_Object$assign, "radius", this.radius), poly_link_defineProperty(_Object$assign, "lineDash", this.lineDash), poly_link_defineProperty(_Object$assign, "noArrow", this.noArrow), poly_link_defineProperty(_Object$assign, "content", this.content), poly_link_defineProperty(_Object$assign, "fontSize", this.fontSize), poly_link_defineProperty(_Object$assign, "fontFamily", this.fontFamily), poly_link_defineProperty(_Object$assign, "fromDir", this.fromDir), poly_link_defineProperty(_Object$assign, "_static", true), _Object$assign));\n      return t;\n    }\n  }]);\n  return PolyLink;\n}(base_link);\n/* harmony default export */ const poly_link = (PolyLink);\n;// CONCATENATED MODULE: ./src/core/instance/bezier-link.js\nfunction bezier_link_typeof(obj) { "@babel/helpers - typeof"; return bezier_link_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, bezier_link_typeof(obj); }\nfunction bezier_link_slicedToArray(arr, i) { return bezier_link_arrayWithHoles(arr) || bezier_link_iterableToArrayLimit(arr, i) || bezier_link_unsupportedIterableToArray(arr, i) || bezier_link_nonIterableRest(); }\nfunction bezier_link_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction bezier_link_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction bezier_link_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction bezier_link_toConsumableArray(arr) { return bezier_link_arrayWithoutHoles(arr) || bezier_link_iterableToArray(arr) || bezier_link_unsupportedIterableToArray(arr) || bezier_link_nonIterableSpread(); }\nfunction bezier_link_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction bezier_link_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return bezier_link_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return bezier_link_arrayLikeToArray(o, minLen); }\nfunction bezier_link_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction bezier_link_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return bezier_link_arrayLikeToArray(arr); }\nfunction bezier_link_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction bezier_link_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction bezier_link_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, bezier_link_toPropertyKey(descriptor.key), descriptor); } }\nfunction bezier_link_createClass(Constructor, protoProps, staticProps) { if (protoProps) bezier_link_defineProperties(Constructor.prototype, protoProps); if (staticProps) bezier_link_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction bezier_link_toPropertyKey(arg) { var key = bezier_link_toPrimitive(arg, "string"); return bezier_link_typeof(key) === "symbol" ? key : String(key); }\nfunction bezier_link_toPrimitive(input, hint) { if (bezier_link_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (bezier_link_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction bezier_link_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) bezier_link_setPrototypeOf(subClass, superClass); }\nfunction bezier_link_setPrototypeOf(o, p) { bezier_link_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return bezier_link_setPrototypeOf(o, p); }\nfunction bezier_link_createSuper(Derived) { var hasNativeReflectConstruct = bezier_link_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = bezier_link_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = bezier_link_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return bezier_link_possibleConstructorReturn(this, result); }; }\nfunction bezier_link_possibleConstructorReturn(self, call) { if (call && (bezier_link_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return bezier_link_assertThisInitialized(self); }\nfunction bezier_link_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction bezier_link_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction bezier_link_getPrototypeOf(o) { bezier_link_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return bezier_link_getPrototypeOf(o); }\n\n\n\n\nvar bezier_link_PIINRATIO = Math.PI / 180;\n/**\n * @typedef {BaseLink~Configs} BezierLink~Configs\n * @property {Number} approximate   - 点击响应范围\n * @property {Number} minSpanX      - 起点终点在 x 方向最小的跨度\n * @property {Number} minSpanY      - 起点终点在 y 方向最小的跨度\n * @property {Number[]} lineDash    - 虚线数组\n * @property {Boolean} doubleLink   - 双向箭头\n * @property {String} fontFamily    - 连线上的文字字体\n * @property {Number} fontSize      - 连线上的文字大小\n * @property {String} content       - 连线上的文字\n * @property {Boolean} isSelf        - 是否为自连接\n */\n/**\n * 贝塞尔曲线\n * @constructor BezierLink\n * @extends BaseLink\n * @param {BezierLink~Configs} configs - 配置\n */\nvar BezierLink = /*#__PURE__*/function (_BaseLink) {\n  bezier_link_inherits(BezierLink, _BaseLink);\n  var _super = bezier_link_createSuper(BezierLink);\n  /**\n  * 创建贝塞尔曲线.\n  * @param {BezierLink~Configs} configs - 配置\n  **/\n  function BezierLink(configs) {\n    var _this;\n    bezier_link_classCallCheck(this, BezierLink);\n    _this = _super.call(this, configs);\n    /** @member {Number}      - 点击响应范围 */\n    _this.approximate = configs.approximate || APPROXIMATE;\n    /** @member {Number}      - 起点终点在 x 方向最小的跨度 */\n    _this.minSpanX = configs.minSpanX || 0;\n    /** @member {Number}      - 起点终点在 y 方向最小的跨度 */\n    _this.minSpanY = configs.minSpanY || 0;\n    /** @member {Number[]}      - 虚线数组 */\n    _this.lineDash = configs.lineDash;\n    _this.lineWidth = configs.lineWidth || 1;\n    /** @member {Boolean}      - 双向箭头 */\n    _this.doubleLink = configs.doubleLink;\n    /** @member {String}      - 连线上的文字字体 */\n    _this.fontFamily = configs.fontFamily = \'-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Helvetica,Tahoma,Arial,Noto Sans,PingFang SC,Microsoft YaHei,Hiragino Sans GB,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji\';\n    /** @member {Number}      - 连线上的文字大小 */\n    _this.fontSize = configs.fontSize || \'12px\';\n    /** @member {String}      - 连线上的文字 */\n    _this.content = configs.content || \'\';\n    /** @member {Boolean}      - 是否为自连接 */\n    _this.isSelf = !!configs.isSelf;\n    return _this;\n  }\n\n  // getColor() {\n  //     if(this._isTargeting) {\n  //         return this.hoverStyle;\n  //     }\n  //     return this.defaultStyle;\n  // }\n\n  // _calculateAnchorPoints() {\n  //     let start;\n  //     let end;\n  //     if(this.fromDir !== undefined) {\n  //         start = {\n  //             dir: this.fromDir,\n  //             p: this.from.getIntersectionsInFourDimension()[this.fromDir],\n  //         }\n  //     } else {\n  //         start = this.from.calculateIntersectionInFourDimension(this.to.getCenter(), \'from\');\n  //     }\n  //     if(this.toDir !== undefined) {\n  //         end = {\n  //             dir: this.toDir,\n  //             p: this.to.getIntersectionsInFourDimension()[this.toDir],\n  //         }\n  //     } else {\n  //         end = this.to.calculateIntersectionInFourDimension(this.from.getCenter(), \'to\');\n  //     }\n\n  //     // const start = this.from.calculateIntersectionInFourDimension(this.to.getCenter(), \'from\');\n  //     // const end = this.to.calculateIntersectionInFourDimension(this.from.getCenter(), \'to\');\n  //     const p1 = start.p;\n  //     const p2 = end.p;\n  //     const points = bezierPoints(p1, p2, start.dir, end.dir, this.anticlock);\n\n  //     this._cachePoints = [...p1, ...points]\n  // }\n  bezier_link_createClass(BezierLink, [{\n    key: "_calculateAnchorPoints",\n    value: function _calculateAnchorPoints() {\n      var dmsfrom = this.from.getIntersectionsInFourDimension();\n      var dmsto = this.to.getIntersectionsInFourDimension();\n      if (this.isSelf) {\n        var points = bezierPoints(dmsfrom[this.fromDir], dmsto[DIRECTION.SELF], this.fromDir, DIRECTION.BOTTOM, this.minSpanX, this.minSpanY);\n        this._cachePoints = [].concat(bezier_link_toConsumableArray(dmsfrom[this.fromDir]), bezier_link_toConsumableArray(points));\n        this._cacheAngle = [this.fromDir, DIRECTION.BOTTOM];\n      } else if (this.fromDir !== undefined && this.toDir !== undefined) {\n        var _points = bezierPoints(dmsfrom[this.fromDir], dmsto[this.toDir], this.fromDir, this.toDir, this.minSpanX, this.minSpanY);\n        this._cachePoints = [].concat(bezier_link_toConsumableArray(dmsfrom[this.fromDir]), bezier_link_toConsumableArray(_points));\n        this._cacheAngle = [this.fromDir, this.toDir];\n      } else {\n        var meta = minIntersectionBetweenNodes(dmsfrom, dmsto);\n        var _points2 = bezierPoints(meta.fromP, meta.toP, meta.fromDir, meta.toDir);\n        this._cachePoints = [].concat(bezier_link_toConsumableArray(meta.fromP), bezier_link_toConsumableArray(_points2));\n        this._cacheAngle = [meta.fromDir, meta.toDir];\n      }\n    }\n  }, {\n    key: "render",\n    value: function render(ctx) {\n      this._calculateAnchorPoints();\n      var points = this._cachePoints;\n      var angle = getBezierAngle.apply(null, [1].concat(bezier_link_toConsumableArray(points)));\n      ctx.fillStyle = ctx.strokeStyle = this.backgroundColor;\n      ctx.lineWidth = this.lineWidth;\n      if (this.doubleLink) {\n        var beginAngle = (this._cacheAngle[0] + 2) % 4 * 90 * bezier_link_PIINRATIO;\n        ctx.beginPath();\n        ctx.translate(points[0], points[1]);\n        ctx.rotate(beginAngle);\n        ctx.moveTo(5, 0);\n        ctx.lineTo(0, -4);\n        ctx.lineTo(0, 4);\n        ctx.lineTo(5, 0);\n        ctx.fill();\n        ctx.rotate(-beginAngle);\n        ctx.translate(-points[0], -points[1]);\n      }\n      ctx.beginPath();\n      ctx.moveTo(points[0], points[1]);\n      ctx.bezierCurveTo.apply(ctx, bezier_link_toConsumableArray(points.slice(2)));\n      if (this.lineDash) {\n        ctx.save();\n        ctx.setLineDash(this.lineDash);\n      }\n      ctx.stroke();\n      if (this.lineDash) {\n        ctx.restore();\n      }\n      ctx.beginPath();\n      ctx.translate(points[6], points[7]);\n      ctx.rotate(angle);\n      ctx.moveTo(5, 0);\n      ctx.lineTo(0, -4);\n      ctx.lineTo(0, 4);\n      ctx.lineTo(5, 0);\n      ctx.fill();\n      ctx.rotate(-angle);\n      ctx.translate(-points[6], -points[7]);\n      if (this.content) {\n        ctx.beginPath();\n        var hasFlip = points[0] > points[6];\n        var _bezierPoint = bezierPoint(0.5, points),\n          _bezierPoint2 = bezier_link_slicedToArray(_bezierPoint, 3),\n          x = _bezierPoint2[0],\n          y = _bezierPoint2[1],\n          _angle = _bezierPoint2[2];\n        ctx.translate(x, y);\n        ctx.rotate(_angle);\n        if (hasFlip) {\n          ctx.rotate(Math.PI);\n        }\n        ctx.font = "".concat(this.fontSize, " ").concat(this.fontFamily);\n        ctx.textAlign = \'center\';\n        ctx.fillText(this.content, 0, -(parseInt(this.fontSize) || 12) / 4);\n        if (hasFlip) {\n          ctx.rotate(Math.PI);\n        }\n        ctx.rotate(-_angle);\n        ctx.translate(-x, -y);\n      }\n    }\n  }, {\n    key: "isHit",\n    value: function isHit(point) {\n      if (!this._cachePoints) return false;\n      var points = this._cachePoints;\n      var dist = distToBezierSegmentSquared(point, points);\n      return dist < this.approximate;\n    }\n  }]);\n  return BezierLink;\n}(base_link);\n/* harmony default export */ const bezier_link = (BezierLink);\n;// CONCATENATED MODULE: ./src/core/layout/linear-layout.js\nfunction linear_layout_typeof(obj) { "@babel/helpers - typeof"; return linear_layout_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, linear_layout_typeof(obj); }\nfunction linear_layout_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction linear_layout_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, linear_layout_toPropertyKey(descriptor.key), descriptor); } }\nfunction linear_layout_createClass(Constructor, protoProps, staticProps) { if (protoProps) linear_layout_defineProperties(Constructor.prototype, protoProps); if (staticProps) linear_layout_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction linear_layout_toPropertyKey(arg) { var key = linear_layout_toPrimitive(arg, "string"); return linear_layout_typeof(key) === "symbol" ? key : String(key); }\nfunction linear_layout_toPrimitive(input, hint) { if (linear_layout_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (linear_layout_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n/**\n * 线性布局配置\n * @typedef {Object} LinearLayout~Configs\n * @property {string} direction     - 排列方向 默认 vertical\n * @property {number} gap           - 边距, 默认是 5\n * @property {string} alignment     - 垂直排列方向对齐方式 默认 center\n * @property {string} justify       - 排列方向对齐方式 默认 center\n */\n/**\n    线性布局\n\n    排列方向\n    direction:\n        + vertical 从上至下排布\n        + horizontal 从左至右排布\n    \n    不重叠，中线对齐\n    只针对当前的 group\n\n    对齐方式\n    alignment: \n        + start 主轴左侧对齐\n        + center 主轴对齐\n        + end   主轴右侧对齐\n    justify: \n        + start 开始时对齐\n        + center 居中对齐\n        + end   末尾对齐\n        + space-between 平均分配空间对齐\n\n * @constructor LinearLayout\n * @implements {Layout}\n * @param {LinearLayout~Configs} configs - 配置\n */\nvar LinearLayout = /*#__PURE__*/function () {\n  function LinearLayout() {\n    var _configs$gap;\n    var configs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    linear_layout_classCallCheck(this, LinearLayout);\n    /** @member {string}  - 排列方向 默认 vertical */\n    this.direction = configs.direction || \'vertical\';\n    /** @member {number}  - 边距, 默认是 5 */\n    this.gap = (_configs$gap = configs.gap) !== null && _configs$gap !== void 0 ? _configs$gap : 5;\n    /** @member {string}  - 垂直排列方向对齐方式 默认 center */\n    this.alignment = configs.alignment || \'center\';\n    /** @member {string}  - 排列方向对齐方式 默认 center */\n    this.justify = configs.justify || \'center\';\n    // this.widthSetByParent =  configs.width === \'100%\'\n    this._rawConfigs = configs;\n  }\n  linear_layout_createClass(LinearLayout, [{\n    key: "reflow",\n    value: function reflow(group) {\n      var _this = this;\n      var stack = group._stack.filter(function (instance) {\n        return instance.visible && !instance.absolutePosition;\n      });\n      var absoluteStack = group._stack.filter(function (instance) {\n        return instance.visible && instance.absolutePosition;\n      });\n      var groupWidth = group.width - group.padding.left - group.padding.right;\n      if (this.direction === \'vertical\') {\n        var reduceHeight = 0;\n        var lastInstanceHeight = 0;\n        var maxWidth = 0;\n        var allHeight = 0;\n        var childAll = stack.concat(absoluteStack);\n        childAll.forEach(function (instance, idx) {\n          if (instance.display === \'block\') {\n            instance.width = 0;\n            // instance.definedWidth = maxWidth;\n            instance.resetChildrenPosition();\n            instance.reflow();\n            instance._getBoundingGroupRect();\n          }\n        });\n        stack.forEach(function (instance, idx) {\n          var _instance$getBounding = instance.getBoundingDimension(),\n            width = _instance$getBounding.width,\n            height = _instance$getBounding.height;\n          // console.log(height, instance.type);\n          var gap = idx > 0 ? _this.gap : 0;\n          if (instance.display !== \'outstretch\') {\n            maxWidth = Math.max(width, maxWidth);\n          }\n          allHeight += height + gap;\n          reduceHeight += height / 2 + gap + lastInstanceHeight;\n          lastInstanceHeight = height / 2;\n          instance.anchor = [0, reduceHeight];\n        });\n        childAll.forEach(function (instance, idx) {\n          if (instance.display === \'block\') {\n            // instance.definedWidth = maxWidth;\n            instance.resetChildrenPosition();\n            instance.width = maxWidth;\n            instance.reflow();\n            // instance._getBoundingGroupRect();\n          } else if (instance.display === \'outstretch\') {\n            var w = group._belongs.width - group._belongs.padding.left - group._belongs.padding.right;\n            instance.resetChildrenPosition();\n            instance.width = Math.max(w, maxWidth);\n            instance.reflow();\n          }\n        });\n        maxWidth = Math.max(groupWidth, maxWidth);\n        allHeight = allHeight / 2;\n        if (this.alignment === \'start\') {\n          stack.forEach(function (instance, idx) {\n            var _instance$getBounding2 = instance.getBoundingDimension(),\n              width = _instance$getBounding2.width;\n            instance.anchor[0] = -(maxWidth - width) / 2;\n            instance.anchor[1] -= allHeight;\n            // console.log(maxWidth, width, instance.anchor[0])\n          });\n        }\n\n        if (this.alignment === \'end\') {\n          stack.forEach(function (instance, idx) {\n            var _instance$getBounding3 = instance.getBoundingDimension(),\n              width = _instance$getBounding3.width;\n            instance.anchor[0] = (maxWidth - width) / 2;\n            instance.anchor[1] -= allHeight;\n          });\n        }\n        if (this.alignment === \'center\') {\n          stack.forEach(function (instance, idx) {\n            var _instance$getBounding4 = instance.getBoundingDimension(),\n              width = _instance$getBounding4.width;\n            instance.anchor[1] -= allHeight;\n          });\n        }\n      }\n      if (this.direction === \'horizontal\') {\n        var reduceWidth = 0;\n        var lastInstanceWidth = 0;\n        var maxHeight = 0;\n        var allWidth = 0;\n        var allPureWidth = 0;\n        stack.forEach(function (instance, idx) {\n          var _instance$getBounding5 = instance.getBoundingDimension(),\n            width = _instance$getBounding5.width,\n            height = _instance$getBounding5.height;\n          var gap = idx > 0 ? _this.gap : 0;\n          maxHeight = Math.max(height, maxHeight);\n          allWidth += width + gap;\n          allPureWidth += width;\n          reduceWidth += width / 2 + gap + lastInstanceWidth;\n          lastInstanceWidth = width / 2;\n          instance.anchor = [reduceWidth, 0];\n        });\n        if (this.justify === \'start\') {\n          var withdraw = groupWidth / 2;\n          stack.forEach(function (instance, idx) {\n            instance.anchor[0] -= withdraw;\n          });\n        }\n        if (this.justify === \'end\') {\n          var _withdraw = groupWidth / 2 - allWidth;\n          stack.forEach(function (instance, idx) {\n            instance.anchor[0] += _withdraw;\n          });\n        }\n        if (this.justify === \'center\') {\n          var _withdraw2 = allWidth / 2;\n          stack.forEach(function (instance, idx) {\n            instance.anchor[0] -= _withdraw2;\n          });\n        }\n        if (this.justify === \'space-between\' && stack.length > 1) {\n          var width = Math.max(groupWidth, allWidth);\n          var gapAverage = (width - allWidth) / (stack.length - 1);\n          var _withdraw3 = width / 2;\n          stack.forEach(function (instance, idx) {\n            instance.anchor[0] += gapAverage * idx - _withdraw3;\n          });\n        }\n        if (this.alignment === \'start\') {\n          stack.forEach(function (instance, idx) {\n            var _instance$getBounding6 = instance.getBoundingDimension(),\n              height = _instance$getBounding6.height;\n            instance.anchor[1] = -(maxHeight - height) / 2;\n          });\n        }\n        if (this.alignment === \'end\') {\n          stack.forEach(function (instance, idx) {\n            var _instance$getBounding7 = instance.getBoundingDimension(),\n              height = _instance$getBounding7.height;\n            instance.anchor[1] = (maxHeight - height) / 2;\n          });\n        }\n      }\n      if (absoluteStack.length) {\n        if (group.display === \'block\') {\n          group.getBoundingDimension();\n        } else {\n          group._getBoundingGroupRect();\n        }\n        var WIDTH = group.width / 2;\n        var HEIGHT = group.height / 2;\n        var shifty = (group.padding.top - group.padding.bottom) / 2;\n        var shiftx = (group.padding.left - group.padding.right) / 2;\n        absoluteStack.forEach(function (instance) {\n          instance.anchor = _this._resolveAbsoluteAnchor(instance.absolutePosition, instance, WIDTH, HEIGHT, shiftx, shifty);\n        });\n      }\n    }\n  }, {\n    key: "_resolveAbsoluteAnchor",\n    value: function _resolveAbsoluteAnchor(config, instance, w, h, shiftx, shifty) {\n      var top = config.top,\n        right = config.right,\n        bottom = config.bottom,\n        left = config.left,\n        centerX = config.centerX,\n        centerY = config.centerY;\n      var _instance$getBounding8 = instance.getBoundingDimension(),\n        width = _instance$getBounding8.width,\n        height = _instance$getBounding8.height;\n      var hw = width / 2;\n      var hh = height / 2;\n      var y = 0;\n      var x = 0;\n      if (typeof top === \'number\') {\n        y = top + hh - h - shifty;\n      }\n      if (typeof right === \'number\') {\n        x = w - right - hw - shiftx;\n      }\n      if (typeof bottom === \'number\') {\n        y = h - bottom - hh - shifty;\n      }\n      if (typeof left === \'number\') {\n        x = left + hw - w - shiftx;\n      }\n      if (typeof centerX === \'number\') {\n        x = centerX;\n      }\n      if (typeof centerY === \'number\') {\n        y = centerY;\n      }\n      return [x, y];\n    }\n  }, {\n    key: "clone",\n    value: function clone() {\n      return new LinearLayout(this._rawConfigs);\n    }\n  }]);\n  return LinearLayout;\n}();\n/* harmony default export */ const linear_layout = (LinearLayout);\n;// CONCATENATED MODULE: ./src/core/instance/text-group/base/constants.js\nvar EDITOR_EVENTS = {\n  INPUT: \'input\',\n  CONTROL_CMD: \'control\'\n};\nvar KEYBOARD_INPUT = {\n  INPUT: \'input\',\n  COMPOSITION_START: \'compositionstart\',\n  COMPOSITION_UPDATE: \'compositionupdate\',\n  COMPOSITION_END: \'compositionend\',\n  ENTER: \'enter\',\n  DELETE: \'delete\',\n  BACKSPACE: \'backspace\'\n};\nvar KEYBOARD_COMMANDS = {\n  ARROW_LEFT: \'arrowLeft\',\n  ARROW_RIGHT: \'arrowRight\',\n  ARROW_UP: \'arrowUp\',\n  ARROW_DOWN: \'arrowDown\',\n  UNDO: \'undo\',\n  REDO: \'redo\',\n  SHIFT_DOWN: \'shift_down\',\n  SHIFT_UP: \'shift_up\',\n  CTRLA: \'ctrla\',\n  COPY: \'copy\',\n  CUT: \'cut\',\n  PASTE: \'paste\'\n};\nvar MOUSE_COMMANDS = {\n  START_EDIT: \'startedit\',\n  EDIT_CLICK: \'editclick\',\n  SHIFT_ON_CLICK: \'shiftonclick\',\n  DOUBLE_CLICK: \'doubleclick\'\n};\nvar OPERRATION = {\n  PLAININPUT: \'plaininput\',\n  SPACEINPUT: \'spaceinput\',\n  RETURNINPUT: \'returninput\',\n  CARETMOVEMENT: \'caretmovement\',\n  DELETE_IN_LINE: \'deleteinline\',\n  DELETE_IN_EDITAREA: \'deleteineditarea\',\n  ENSURE_DELETE: \'ensuredelete\',\n  SELECTION_DELETE: \'selectiondelete\',\n  SELECTION_INPUT: \'selectioninput\',\n  COMPOSITE_INSERT: \'compositeinsert\'\n};\n;// CONCATENATED MODULE: ./src/core/instance/text-group/base/shadow-input.js\nfunction shadow_input_typeof(obj) { "@babel/helpers - typeof"; return shadow_input_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, shadow_input_typeof(obj); }\nfunction shadow_input_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction shadow_input_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, shadow_input_toPropertyKey(descriptor.key), descriptor); } }\nfunction shadow_input_createClass(Constructor, protoProps, staticProps) { if (protoProps) shadow_input_defineProperties(Constructor.prototype, protoProps); if (staticProps) shadow_input_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction shadow_input_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) shadow_input_setPrototypeOf(subClass, superClass); }\nfunction shadow_input_createSuper(Derived) { var hasNativeReflectConstruct = shadow_input_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = shadow_input_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = shadow_input_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return shadow_input_possibleConstructorReturn(this, result); }; }\nfunction shadow_input_possibleConstructorReturn(self, call) { if (call && (shadow_input_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return shadow_input_assertThisInitialized(self); }\nfunction shadow_input_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction shadow_input_wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; shadow_input_wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !shadow_input_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return shadow_input_construct(Class, arguments, shadow_input_getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return shadow_input_setPrototypeOf(Wrapper, Class); }; return shadow_input_wrapNativeSuper(Class); }\nfunction shadow_input_construct(Parent, args, Class) { if (shadow_input_isNativeReflectConstruct()) { shadow_input_construct = Reflect.construct.bind(); } else { shadow_input_construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) shadow_input_setPrototypeOf(instance, Class.prototype); return instance; }; } return shadow_input_construct.apply(null, arguments); }\nfunction shadow_input_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction shadow_input_isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }\nfunction shadow_input_setPrototypeOf(o, p) { shadow_input_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return shadow_input_setPrototypeOf(o, p); }\nfunction shadow_input_getPrototypeOf(o) { shadow_input_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return shadow_input_getPrototypeOf(o); }\nfunction shadow_input_defineProperty(obj, key, value) { key = shadow_input_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction shadow_input_toPropertyKey(arg) { var key = shadow_input_toPrimitive(arg, "string"); return shadow_input_typeof(key) === "symbol" ? key : String(key); }\nfunction shadow_input_toPrimitive(input, hint) { if (shadow_input_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (shadow_input_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\nvar ShadowInput = /*#__PURE__*/function (_EventTarget) {\n  shadow_input_inherits(ShadowInput, _EventTarget);\n  var _super = shadow_input_createSuper(ShadowInput);\n  function ShadowInput(wrapper) {\n    var _this;\n    shadow_input_classCallCheck(this, ShadowInput);\n    _this = _super.call(this);\n    shadow_input_defineProperty(shadow_input_assertThisInitialized(_this), "_inputElement", null);\n    _this._inputElement = shadow_input_createInputElement(_this.controlCallback.bind(shadow_input_assertThisInitialized(_this)));\n    wrapper.append(_this._inputElement);\n    _this._inputElement.focus();\n    return _this;\n  }\n  shadow_input_createClass(ShadowInput, [{\n    key: "controlCallback",\n    value: function controlCallback(kind, data) {\n      switch (kind) {\n        case KEYBOARD_INPUT.INPUT:\n        case KEYBOARD_INPUT.COMPOSITION_START:\n        case KEYBOARD_INPUT.COMPOSITION_UPDATE:\n        case KEYBOARD_INPUT.COMPOSITION_END:\n        case KEYBOARD_INPUT.ENTER:\n        case KEYBOARD_INPUT.BACKSPACE:\n        case KEYBOARD_INPUT.DELETE:\n          this.dispatchEvent(new CustomEvent(EDITOR_EVENTS.INPUT, {\n            detail: {\n              kind: kind,\n              data: data\n            }\n          }));\n          break;\n        case KEYBOARD_COMMANDS.ARROW_LEFT:\n        case KEYBOARD_COMMANDS.ARROW_RIGHT:\n        case KEYBOARD_COMMANDS.ARROW_UP:\n        case KEYBOARD_COMMANDS.ARROW_DOWN:\n        case KEYBOARD_COMMANDS.CTRLA:\n        case KEYBOARD_COMMANDS.SHIFT_DOWN:\n        case KEYBOARD_COMMANDS.SHIFT_UP:\n        case KEYBOARD_COMMANDS.UNDO:\n        case KEYBOARD_COMMANDS.REDO:\n        case KEYBOARD_COMMANDS.COPY:\n        case KEYBOARD_COMMANDS.CUT:\n        case KEYBOARD_COMMANDS.PASTE:\n          this.dispatchEvent(new CustomEvent(EDITOR_EVENTS.CONTROL_CMD, {\n            detail: {\n              kind: kind,\n              data: data\n            }\n          }));\n          break;\n      }\n    }\n  }, {\n    key: "focus",\n    value: function focus() {\n      this._inputElement.focus({\n        preventScroll: true\n      });\n    }\n  }, {\n    key: "syncPosition",\n    value: function syncPosition(x, y) {\n      this._inputElement.style.transform = "translate(".concat(x, "px, ").concat(y, "px)");\n    }\n  }, {\n    key: "destroy",\n    value: function destroy() {\n      if (this.removeLisenter) {\n        this.removeLisenter();\n      }\n      this._inputElement.remove();\n    }\n  }]);\n  return ShadowInput;\n}( /*#__PURE__*/shadow_input_wrapNativeSuper(EventTarget));\n/* harmony default export */ const shadow_input = (ShadowInput);\nfunction shadow_input_createInputElement(controlCallback) {\n  var input = document.createElement(\'input\');\n  input.setAttribute(\'style\', "\\n        width: 100px;\\n        position: absolute;\\n        left: 0;\\n        top: 0;\\n        border:none;\\n        opacity: 0;\\n        z-index: -1;\\n        contain: strict;");\n  input.setAttribute(\'tabindex\', -1);\n  input.setAttribute(\'spellcheck\', false);\n  input.setAttribute(\'autocorrect\', \'off\');\n  var stopInput = false;\n  var status = {\n    ctrlOn: false,\n    shiftOn: false\n  };\n  input.addEventListener(\'beforeinput\', function (e) {\n    e.preventDefault();\n    if (e.data) {\n      // content += e.data;\n      // renderContent();\n      if (!stopInput) {\n        controlCallback(KEYBOARD_INPUT.INPUT, e.data);\n      }\n    }\n  });\n  input.addEventListener(\'paste\', function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    var pasteContent = (e.clipboardData || window.clipboardData).getData("text");\n    controlCallback(KEYBOARD_COMMANDS.PASTE, pasteContent);\n  });\n  input.addEventListener(\'copy\', function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    controlCallback(KEYBOARD_COMMANDS.COPY, e);\n  });\n  input.addEventListener(\'cut\', function (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    controlCallback(KEYBOARD_COMMANDS.CUT, e);\n  });\n  input.addEventListener(\'compositionstart\', function (e) {\n    controlCallback(KEYBOARD_INPUT.COMPOSITION_START);\n    stopInput = true;\n  });\n  input.addEventListener(\'compositionupdate\', function (e) {\n    controlCallback(KEYBOARD_INPUT.COMPOSITION_UPDATE, e.data);\n  });\n  input.addEventListener(\'compositionend\', function (e) {\n    controlCallback(KEYBOARD_INPUT.COMPOSITION_END, e.data);\n    input.value = \'\';\n    stopInput = false;\n  });\n  input.addEventListener(\'keyup\', function (event) {\n    if (stopInput) {\n      return;\n    }\n    switch (event.key) {\n      case "Shift":\n        controlCallback(KEYBOARD_COMMANDS.SHIFT_UP);\n        status.shiftOn = false;\n        break;\n      case "Meta":\n      case "Control":\n        status.ctrlOn = false;\n        break;\n    }\n  });\n  input.addEventListener(\'keydown\', function (event) {\n    if (stopInput) {\n      return;\n    }\n    switch (event.code) {\n      case "Enter":\n        controlCallback(KEYBOARD_INPUT.ENTER);\n        break;\n      case "Backspace":\n        controlCallback(KEYBOARD_INPUT.BACKSPACE);\n        break;\n      case "Delete":\n        controlCallback(KEYBOARD_INPUT.DELETE);\n        break;\n      case "ArrowLeft":\n        controlCallback(KEYBOARD_COMMANDS.ARROW_LEFT);\n        break;\n      case "ArrowRight":\n        controlCallback(KEYBOARD_COMMANDS.ARROW_RIGHT);\n        break;\n      case "ArrowDown":\n        controlCallback(KEYBOARD_COMMANDS.ARROW_DOWN);\n        break;\n      case "ArrowUp":\n        controlCallback(KEYBOARD_COMMANDS.ARROW_UP);\n        break;\n    }\n    switch (event.key) {\n      case "Shift":\n        controlCallback(KEYBOARD_COMMANDS.SHIFT_DOWN);\n        status.shiftOn = true;\n        break;\n      case "Meta":\n      case "Control":\n        status.ctrlOn = true;\n        break;\n      case \'a\':\n        if (status.ctrlOn) {\n          controlCallback(KEYBOARD_COMMANDS.CTRLA);\n        }\n        break;\n      // case \'c\':\n      //     if(status.ctrlOn) {\n      //         controlCallback(KEYBOARD_COMMANDS.CTRLC);\n      //     }\n      //     break; \n      // case \'v\':\n      //     if(status.ctrlOn) {\n      //         controlCallback(KEYBOARD_COMMANDS.CTRLV);\n      //     }\n      //     break;   \n      // case \'x\':\n      //     if(status.ctrlOn) {\n      //         controlCallback(KEYBOARD_COMMANDS.CTRLX);\n      //     }\n      //     break;\n      case \'y\':\n        if (status.ctrlOn) {\n          event.preventDefault();\n          controlCallback(KEYBOARD_COMMANDS.REDO);\n        }\n        break;\n      case \'z\':\n        if (status.ctrlOn && status.shiftOn) {\n          controlCallback(KEYBOARD_COMMANDS.REDO);\n        } else if (status.ctrlOn) {\n          controlCallback(KEYBOARD_COMMANDS.UNDO);\n        }\n        break;\n    }\n  });\n  return input;\n}\n;// CONCATENATED MODULE: ./src/core/instance/text-group/base/caret.js\nfunction caret_typeof(obj) { "@babel/helpers - typeof"; return caret_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, caret_typeof(obj); }\nfunction caret_toConsumableArray(arr) { return caret_arrayWithoutHoles(arr) || caret_iterableToArray(arr) || caret_unsupportedIterableToArray(arr) || caret_nonIterableSpread(); }\nfunction caret_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction caret_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return caret_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return caret_arrayLikeToArray(o, minLen); }\nfunction caret_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction caret_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return caret_arrayLikeToArray(arr); }\nfunction caret_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction caret_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction caret_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, caret_toPropertyKey(descriptor.key), descriptor); } }\nfunction caret_createClass(Constructor, protoProps, staticProps) { if (protoProps) caret_defineProperties(Constructor.prototype, protoProps); if (staticProps) caret_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction caret_defineProperty(obj, key, value) { key = caret_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction caret_toPropertyKey(arg) { var key = caret_toPrimitive(arg, "string"); return caret_typeof(key) === "symbol" ? key : String(key); }\nfunction caret_toPrimitive(input, hint) { if (caret_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (caret_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nvar Caret = /*#__PURE__*/function () {\n  function Caret() {\n    caret_classCallCheck(this, Caret);\n    caret_defineProperty(this, "_row", 0);\n    caret_defineProperty(this, "_column", [0, 0]);\n    caret_defineProperty(this, "_status", {\n      show: true,\n      anime: null,\n      lastElapsed: 0,\n      refreshElapsed: false\n    });\n  }\n  caret_createClass(Caret, [{\n    key: "setRow",\n    value: function setRow(row) {\n      this._row = row;\n    }\n  }, {\n    key: "setColumn",\n    value: function setColumn(columnoridx, column) {\n      if (column !== undefined) {\n        this._column[columnoridx] = column;\n      } else {\n        this._column = columnoridx;\n      }\n    }\n  }, {\n    key: "getRow",\n    value: function getRow() {\n      return this._row;\n    }\n  }, {\n    key: "getColumn",\n    value: function getColumn(idx) {\n      if (idx !== undefined) {\n        return this._column[idx];\n      }\n      return this._column;\n    }\n  }, {\n    key: "animate",\n    value: function animate(jflow) {\n      var _this = this;\n      this._status.anime = jflow.requestJFlowAnime(function (elapsed) {\n        var lastElapsed = _this._status.lastElapsed;\n        if (_this._status.refreshElapsed) {\n          _this._status.lastElapsed = elapsed;\n          _this._status.refreshElapsed = false;\n        }\n        if (elapsed - lastElapsed > 500) {\n          _this._status.show = !_this._status.show;\n          _this._status.lastElapsed = elapsed;\n        }\n      });\n    }\n  }, {\n    key: "cancelAnimate",\n    value: function cancelAnimate() {\n      this._status.anime.cancel();\n      Object.assign(this._status, {\n        show: true,\n        anime: null,\n        lastElapsed: 0\n      });\n    }\n  }, {\n    key: "isShow",\n    value: function isShow() {\n      return this._status.show;\n    }\n  }, {\n    key: "refresh",\n    value: function refresh() {\n      Object.assign(this._status, {\n        show: true,\n        refreshElapsed: true\n      });\n    }\n  }, {\n    key: "toRange",\n    value: function toRange() {\n      return [this._row].concat(caret_toConsumableArray(this._column));\n    }\n  }, {\n    key: "fromRange",\n    value: function fromRange(range) {\n      this._row = range[0];\n      this._column = range.slice(1);\n    }\n  }]);\n  return Caret;\n}();\n/* harmony default export */ const caret = (Caret);\n;// CONCATENATED MODULE: ./src/core/instance/text-group/utils.js\n\nfunction calculateOffsetByWidth(offx, textmeta, fontSize, fontFamily, spaceHolder) {\n  var content = textmeta.getRenderSource(spaceHolder);\n  var maxL = content.length - 1;\n  if (textmeta.width === 0) {\n    return 0;\n  }\n  var allwidth = textmeta.width;\n  var idx = Math.floor(offx / allwidth * maxL);\n  requestCacheCanvas(function (ctx) {\n    ctx.font = "".concat(fontSize, " ").concat(fontFamily);\n    var g1, g2;\n    var lastidx;\n    var c = content.substring(0, idx);\n    var c1 = content.substring(idx - 1, idx);\n    var c2 = content.substring(idx, idx + 1);\n    var w = ctx.measureText(c).width;\n    var w1 = ctx.measureText(c1).width;\n    var w2 = ctx.measureText(c2).width;\n    g1 = w - w1 / 2;\n    g2 = w + w2 / 2;\n    do {\n      if (g1 <= offx && g2 >= offx) {\n        break;\n      }\n      if (g1 > offx) {\n        // 左侧少了\n        var spanw = g2 - offx;\n        lastidx = idx;\n        if (spanw < 100) {\n          idx -= 1;\n        } else {\n          idx -= Math.floor(spanw / g2 * lastidx);\n        }\n        c = content.substring(idx, lastidx);\n        w -= ctx.measureText(c).width;\n      } else if (g2 < offx) {\n        // 右侧少了\n        var _spanw = offx - g1;\n        lastidx = idx;\n        if (_spanw < 100) {\n          idx += 1;\n        } else {\n          idx += Math.floor(_spanw / (allwidth - g1) * (maxL - lastidx));\n        }\n        c = content.substring(lastidx, idx);\n        w += ctx.measureText(c).width;\n      }\n      c1 = content.substring(idx - 1, idx);\n      c2 = content.substring(idx, idx + 1);\n      w1 = ctx.measureText(c1).width;\n      w2 = ctx.measureText(c2).width;\n      g1 = w - w1 / 2;\n      g2 = w + w2 / 2;\n    } while (idx >= 0 && idx <= maxL);\n  });\n  return idx;\n}\n;// CONCATENATED MODULE: ./src/core/instance/text-group/storage/index.js\nfunction storage_typeof(obj) { "@babel/helpers - typeof"; return storage_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, storage_typeof(obj); }\nfunction storage_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction storage_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, storage_toPropertyKey(descriptor.key), descriptor); } }\nfunction storage_createClass(Constructor, protoProps, staticProps) { if (protoProps) storage_defineProperties(Constructor.prototype, protoProps); if (staticProps) storage_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction storage_defineProperty(obj, key, value) { key = storage_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction storage_toPropertyKey(arg) { var key = storage_toPrimitive(arg, "string"); return storage_typeof(key) === "symbol" ? key : String(key); }\nfunction storage_toPrimitive(input, hint) { if (storage_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (storage_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\nvar Area = /*#__PURE__*/function () {\n  function Area() {\n    storage_classCallCheck(this, Area);\n    storage_defineProperty(this, "_lines", []);\n  }\n  storage_createClass(Area, [{\n    key: "get",\n    value: function get(idx) {\n      return this._lines[idx];\n    }\n  }, {\n    key: "getLineAbove",\n    value: function getLineAbove(offsetY) {\n      var row = 0;\n      var lines = this._lines;\n      while (row < lines.length) {\n        if (lines[row].reduceHeight > offsetY) {\n          break;\n        }\n        row++;\n      }\n      return Math.min(row, lines.length - 1);\n    }\n  }, {\n    key: "truncate",\n    value: function truncate(configs) {\n      var l = Line.create(configs);\n      this._lines = [l];\n      return l;\n    }\n  }, {\n    key: "push",\n    value: function push(line) {\n      this._lines.push(line);\n    }\n  }, {\n    key: "forEach",\n    value: function forEach(callback) {\n      this._lines.forEach(callback);\n    }\n  }, {\n    key: "length",\n    value: function length() {\n      return this._lines.length;\n    }\n  }]);\n  return Area;\n}();\nvar Line = /*#__PURE__*/function () {\n  function Line() {\n    var configs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    storage_classCallCheck(this, Line);\n    storage_defineProperty(this, "width", 0);\n    storage_defineProperty(this, "anchorY", 0);\n    storage_defineProperty(this, "height", 0);\n    storage_defineProperty(this, "reduceHeight", 0);\n    storage_defineProperty(this, "_elements", []);\n    storage_defineProperty(this, "_elements", []);\n    Object.assign(this, configs);\n  }\n  storage_createClass(Line, [{\n    key: "get",\n    value: function get(idx) {\n      return this._elements[idx];\n    }\n  }, {\n    key: "length",\n    value: function length() {\n      return this._elements.length;\n    }\n  }, {\n    key: "insert",\n    value: function insert(idx, elem) {\n      this._elements.splice(idx, 0, elem);\n    }\n  }, {\n    key: "push",\n    value: function push(elem) {\n      this._elements.push(elem);\n    }\n  }, {\n    key: "tail",\n    value: function tail() {\n      return this._elements[this._elements.length - 1];\n    }\n  }, {\n    key: "copy",\n    value: function copy() {\n      return this._elements.slice();\n    }\n  }, {\n    key: "getColumnNearest",\n    value: function getColumnNearest(offsetX, elementSpace, fontSize, fontFamily, editor) {\n      var elements = this._elements;\n      if (offsetX >= this.width) {\n        var c = elements.length - 1;\n        var elem = elements[c];\n        var q = 0;\n        if (elem.type === \'text\') {\n          q = elem.source.length;\n        }\n        return [c, q];\n      } else {\n        var elem_idx = 0;\n        var last_c = 0;\n        var _c = 0;\n        var lastel = null;\n        while (elem_idx < elements.length - 1) {\n          last_c = _c;\n          var el = elements[elem_idx];\n          if (el.type !== \'text\') {\n            var doubleMargin = lastel && lastel.type === \'text\';\n            var margin = doubleMargin ? elementSpace * 2 : elementSpace;\n            _c += el.width + margin;\n          } else {\n            _c += el.width;\n          }\n          if (_c > offsetX) {\n            lastel = el;\n            break;\n          }\n          lastel = el;\n          elem_idx++;\n        }\n        if (_c <= offsetX) {\n          last_c = _c;\n        }\n        var textmeta = elements[elem_idx];\n        if (textmeta.type === \'text\') {\n          var offx = offsetX - last_c;\n          var idx = calculateOffsetByWidth(offx, textmeta, fontSize, fontFamily, editor.spaceHolder);\n          return [elem_idx, idx];\n        } else {\n          var _offx = offsetX - last_c;\n          if (_offx > lastel.width / 2) {\n            return [elem_idx + 1, 0];\n          } else {\n            return [elem_idx, 0];\n          }\n        }\n      }\n    }\n  }, {\n    key: "forEach",\n    value: function forEach(callback) {\n      this._elements.forEach(callback);\n    }\n  }], [{\n    key: "create",\n    value: function create(configs) {\n      var l = new Line(configs);\n      return l;\n    }\n  }]);\n  return Line;\n}();\nvar FlattenTextElements = /*#__PURE__*/function () {\n  function FlattenTextElements() {\n    storage_classCallCheck(this, FlattenTextElements);\n    storage_defineProperty(this, "_textElements", []);\n    storage_defineProperty(this, "_records", []);\n    storage_defineProperty(this, "_caretRecord", null);\n  }\n  storage_createClass(FlattenTextElements, [{\n    key: "insertBefore",\n    value: function insertBefore(anchor, elem) {\n      var idx = this.findIndex(anchor);\n      this.inersetAt(idx, elem);\n    }\n  }, {\n    key: "insertAfter",\n    value: function insertAfter(anchor, elem, needWrap) {\n      var idx = this.findIndex(anchor);\n      // const next = this.get(idx+1);\n      if (needWrap) {\n        elem.setNeedWrap(true);\n      }\n      this.inersetAt(idx + 1, elem);\n    }\n  }, {\n    key: "findIndex",\n    value: function findIndex(elem) {\n      return this._textElements.findIndex(function (el) {\n        return el === elem;\n      });\n    }\n  }, {\n    key: "get",\n    value: function get(idx) {\n      return this._textElements[idx];\n    }\n  }, {\n    key: "from",\n    value: function from(elements) {\n      this._textElements = elements;\n    }\n  }, {\n    key: "inersetAt",\n    value: function inersetAt(idx, elem) {\n      this.splice(idx, 0, elem);\n    }\n  }, {\n    key: "push",\n    value: function push(elem) {\n      this.splice(this.length(), 0, elem);\n    }\n  }, {\n    key: "remove",\n    value: function remove(idx) {\n      this.splice(idx, 1);\n    }\n  }, {\n    key: "splice",\n    value: function splice() {\n      var _this$_textElements;\n      var removed = (_this$_textElements = this._textElements).splice.apply(_this$_textElements, arguments);\n      this._records.push({\n        op: \'splice\',\n        args: arguments,\n        removed: removed\n      });\n    }\n  }, {\n    key: "slice",\n    value: function slice() {\n      var _this$_textElements2;\n      return (_this$_textElements2 = this._textElements).slice.apply(_this$_textElements2, arguments);\n    }\n  }, {\n    key: "copy",\n    value: function copy() {\n      return this._textElements.slice();\n    }\n  }, {\n    key: "isEmpty",\n    value: function isEmpty() {\n      return this._textElements.length === 1 && this._textElements[0].source === \'\';\n    }\n  }, {\n    key: "forEach",\n    value: function forEach(callback) {\n      this._textElements.forEach(callback);\n    }\n  }, {\n    key: "tail",\n    value: function tail() {\n      return this._textElements[this._textElements.length - 1];\n    }\n  }, {\n    key: "filter",\n    value: function filter(callback) {\n      return this._textElements.filter(callback);\n    }\n  }, {\n    key: "length",\n    value: function length() {\n      return this._textElements.length;\n    }\n  }, {\n    key: "startRecord",\n    value: function startRecord() {\n      this._caretRecord = {\n        before: null,\n        after: null\n      };\n      this._records = [];\n      return this._records;\n    }\n  }, {\n    key: "getRecord",\n    value: function getRecord() {\n      return this._records;\n    }\n  }, {\n    key: "recordBeforeCaret",\n    value: function recordBeforeCaret(caret) {\n      this._caretRecord.before = caret.toRange();\n    }\n  }, {\n    key: "recordAfterCaret",\n    value: function recordAfterCaret(caret) {\n      this._caretRecord.after = caret.toRange();\n    }\n  }, {\n    key: "getCaretRecord",\n    value: function getCaretRecord() {\n      return this._caretRecord;\n    }\n  }, {\n    key: "collectRecords",\n    value: function collectRecords() {\n      return this._records;\n    }\n  }], [{\n    key: "create",\n    value: function create(elements) {\n      var _e = new FlattenTextElements();\n      _e.from(elements);\n      return _e;\n    }\n  }]);\n  return FlattenTextElements;\n}();\nvar TextElement = /*#__PURE__*/function () {\n  function TextElement(type, source) {\n    storage_classCallCheck(this, TextElement);\n    storage_defineProperty(this, "needWrap", false);\n    storage_defineProperty(this, "width", 0);\n    storage_defineProperty(this, "reduceWidth", 0);\n    storage_defineProperty(this, "height", 0);\n    storage_defineProperty(this, "anchorX", 0);\n    storage_defineProperty(this, "anchorY", 0);\n    storage_defineProperty(this, "dirty", true);\n    storage_defineProperty(this, "isTail", false);\n    storage_defineProperty(this, "_spaceRecords", []);\n    storage_defineProperty(this, "_spacedContentSegmnent", []);\n    storage_defineProperty(this, "_returnSymbol", {\n      symbol: \'↲\',\n      width: 0\n    });\n    this.type = type;\n    this.source = source;\n  }\n  storage_createClass(TextElement, [{\n    key: "getRenderSource",\n    value: function getRenderSource(spaceHolder) {\n      var content = this.source;\n      if (spaceHolder.enable) {\n        return content.replace(/\\s/g, spaceHolder.spacePlaceholder);\n      }\n      return content;\n    }\n  }, {\n    key: "setSourceWithRecord",\n    value: function setSourceWithRecord(source, spaceHolder, records) {\n      var lastSource = this.source;\n      this.setSource(source, spaceHolder);\n      if (records) {\n        records.push({\n          op: \'setSource\',\n          args: [this, source, lastSource]\n        });\n      }\n    }\n  }, {\n    key: "setSource",\n    value: function setSource(source, spaceHolder) {\n      this.source = source;\n      this.dirty = true;\n      if (spaceHolder.enable) {\n        var r = this._spaceRecords;\n        var p = spaceHolder.spacePlaceholder;\n        r.length = 0;\n        var lastOffset;\n        source.replace(/\\s/g, function (_, offset) {\n          if (lastOffset === undefined) {\n            lastOffset = offset;\n            r.push(offset);\n          }\n          if (offset - lastOffset > 1) {\n            r.push(lastOffset);\n            r.push(offset);\n          }\n          lastOffset = offset;\n          return p;\n        });\n        if (lastOffset !== undefined) {\n          r.push(lastOffset);\n        }\n      }\n    }\n  }, {\n    key: "setNeedWrap",\n    value: function setNeedWrap(needWrap, records) {\n      var lastWrap = this.needWrap;\n      this.needWrap = needWrap;\n      if (lastWrap !== needWrap && records) {\n        records.push({\n          op: \'setNeedWrap\',\n          args: [this, needWrap, lastWrap]\n        });\n      }\n    }\n  }, {\n    key: "shift",\n    value: function shift(offset, step) {\n      if (this.type === \'text\') {\n        var content = this.source;\n        var l = content.length;\n        var nextOffset = offset + step;\n        if (nextOffset < 0) {\n          return \'prev\';\n        }\n        if (nextOffset > l) {\n          //- ((isTail || this.needWrap) ? 0 : 1)) {\n          return \'next\';\n        }\n        return \'self\';\n      } else {\n        if (step > 0) {\n          return \'next\';\n        }\n        if (step < 0) {\n          return \'prev\';\n        }\n      }\n    }\n  }, {\n    key: "tailOffset",\n    value: function tailOffset() {\n      if (this.type === \'text\') {\n        if (this.needWrap || this.isTail) {\n          return this.source.length;\n        } else {\n          return Math.max(0, this.source.length - 1);\n        }\n      } else {\n        return 0;\n      }\n    }\n  }, {\n    key: "headOffset",\n    value: function headOffset() {\n      return 0;\n    }\n  }, {\n    key: "preCalculateText",\n    value: function preCalculateText(ctx, spaceHolder) {\n      var content = this.getRenderSource(spaceHolder);\n      this.width = ctx.measureText(content).width;\n      this.dirty = false;\n      if (spaceHolder.enable) {\n        var s_width = ctx.measureText(spaceHolder.spacePlaceholder).width;\n        this._returnSymbol.width = ctx.measureText(this._returnSymbol.symbol).width;\n        var r2 = this._spacedContentSegmnent;\n        var lastOffset = 0;\n        r2.length = 0;\n        if (this._spaceRecords.length) {\n          var r = this._spaceRecords;\n          var l = r.length;\n          var i = 0;\n          while (i < l) {\n            var f = r[i++];\n            var t = r[i++];\n            var q = content.substring(lastOffset, f);\n            r2.push([q, ctx.measureText(q).width, \'text\']);\n            r2.push([content.substring(f, t + 1), (t - f + 1) * s_width, \'placeholder\']);\n            lastOffset = t + 1;\n          }\n        }\n        if (lastOffset < content.length) {\n          var _q = content.substring(lastOffset);\n          r2.push([_q, ctx.measureText(_q).width, \'text\']);\n        }\n        if (this.needWrap) {\n          this.width += this._returnSymbol.width;\n        }\n      }\n    }\n  }, {\n    key: "render",\n    value: function render(ctx, spaceHolder, textColor) {\n      var _this = this;\n      if (spaceHolder.enable) {\n        var hw = this.width / 2;\n        var _w = -hw + this.anchorX;\n        var spacePlaceholderColor = spaceHolder.spacePlaceholderColor;\n        this._spacedContentSegmnent.forEach(function (seg) {\n          ctx.fillStyle = seg[2] === \'text\' ? textColor : spacePlaceholderColor;\n          var t = seg[1] / 2;\n          _w += t;\n          ctx.fillText(seg[0], _w, _this.anchorY);\n          _w += t;\n        });\n        if (this.needWrap) {\n          ctx.save();\n          ctx.font = spaceHolder.returnFont;\n          ctx.fillStyle = spacePlaceholderColor;\n          ctx.fillText(this._returnSymbol.symbol, _w + this._returnSymbol.width / 2, this.anchorY);\n          ctx.restore();\n        }\n        return;\n      }\n      ctx.fillText(this.source, this.anchorX, this.anchorY);\n    }\n  }]);\n  return TextElement;\n}();\n;// CONCATENATED MODULE: ./src/core/instance/text-group/base/range.js\nfunction range_typeof(obj) { "@babel/helpers - typeof"; return range_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, range_typeof(obj); }\nfunction range_slicedToArray(arr, i) { return range_arrayWithHoles(arr) || range_iterableToArrayLimit(arr, i) || range_unsupportedIterableToArray(arr, i) || range_nonIterableRest(); }\nfunction range_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction range_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return range_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return range_arrayLikeToArray(o, minLen); }\nfunction range_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction range_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction range_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction range_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction range_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, range_toPropertyKey(descriptor.key), descriptor); } }\nfunction range_createClass(Constructor, protoProps, staticProps) { if (protoProps) range_defineProperties(Constructor.prototype, protoProps); if (staticProps) range_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction range_defineProperty(obj, key, value) { key = range_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction range_toPropertyKey(arg) { var key = range_toPrimitive(arg, "string"); return range_typeof(key) === "symbol" ? key : String(key); }\nfunction range_toPrimitive(input, hint) { if (range_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (range_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\nvar Range = /*#__PURE__*/function () {\n  function Range() {\n    range_classCallCheck(this, Range);\n    range_defineProperty(this, "_enable", false);\n    range_defineProperty(this, "_rangeFrom", null);\n    // [row, elem_idx, offset]\n    range_defineProperty(this, "_rangeTo", null);\n    // [row, elem_idx, offset]\n    range_defineProperty(this, "_initialRange", null);\n  }\n  range_createClass(Range, [{\n    key: "setInitialRange",\n    value: function setInitialRange(initialRange) {\n      this._initialRange = initialRange;\n    }\n  }, {\n    key: "getRangeFrom",\n    value: function getRangeFrom() {\n      return this._rangeFrom;\n    }\n  }, {\n    key: "getRangeTo",\n    value: function getRangeTo() {\n      return this._rangeTo;\n    }\n  }, {\n    key: "isEnable",\n    value: function isEnable() {\n      return this._enable;\n    }\n  }, {\n    key: "enable",\n    value: function enable() {\n      this._enable = true;\n    }\n  }, {\n    key: "disable",\n    value: function disable() {\n      this._enable = false;\n    }\n  }, {\n    key: "handleCaret",\n    value: function handleCaret(caret) {\n      var _this$_rangeTo = range_slicedToArray(this._rangeTo, 3),\n        a = _this$_rangeTo[0],\n        b = _this$_rangeTo[1],\n        c = _this$_rangeTo[2];\n      caret.setRow(a);\n      caret.setColumn([b, c]);\n    }\n  }, {\n    key: "setRange",\n    value: function setRange(another) {\n      var a = this._initialRange;\n      if (this._compareRange(a, another)) {\n        this._rangeFrom = a;\n        this._rangeTo = another;\n      } else {\n        this._rangeFrom = another;\n        this._rangeTo = a;\n      }\n    }\n  }, {\n    key: "_compareRange",\n    value: function _compareRange(r1, r2) {\n      if (r1[0] > r2[0]) {\n        return false;\n      }\n      if (r1[0] === r2[0] && r1[1] > r2[1]) {\n        return false;\n      }\n      if (r1[0] === r2[0] && r1[1] === r2[1] && r1[2] > r2[2]) {\n        return false;\n      }\n      return true;\n    }\n\n    // TODO \n  }, {\n    key: "getRangeCopy",\n    value: function getRangeCopy(editor) {\n      if (this._enable) {\n        var area = editor._area;\n        var caret = editor._caret;\n        var rangeFrom = this._rangeFrom;\n        var rangeTo = this._rangeTo;\n        var elemFrom = area.get(rangeFrom[0]).get(rangeFrom[1]);\n        var elemTo = area.get(rangeTo[0]).get(rangeTo[1]);\n        if (elemFrom === elemTo) {\n          var c = elemFrom.source;\n          return c.substring(rangeFrom[2], rangeTo[2]);\n        }\n        var flattenTxtElem = editor._flattenTxtElem;\n        var preContent = \'\';\n        var afterContent = \'\';\n        var fromIdx = flattenTxtElem.findIndex(elemFrom);\n        var toIdx = flattenTxtElem.findIndex(elemTo);\n        var elems = flattenTxtElem.slice(fromIdx, toIdx + 1);\n        var elements = elems.slice(1, elems.length - 1).filter(function (el) {\n          return el.type === \'text\';\n        });\n        preContent = elemFrom.source.substring(rangeFrom[2]);\n        afterContent = elemTo.source.substring(0, rangeTo[2]);\n        var content = preContent;\n        if (elemFrom.needWrap) {\n          content += \'\\n\';\n        }\n        elements.forEach(function (el) {\n          content += el.source;\n          if (el.needWrap) {\n            content += \'\\n\';\n          }\n        });\n        return content + afterContent;\n      }\n    }\n  }, {\n    key: "delete",\n    value: function _delete(editor, records) {\n      if (this._enable) {\n        var area = editor._area;\n        var caret = editor._caret;\n        var rangeFrom = this._rangeFrom;\n        var rangeTo = this._rangeTo;\n        var elemFrom = area.get(rangeFrom[0]).get(rangeFrom[1]);\n        var elemTo = area.get(rangeTo[0]).get(rangeTo[1]);\n        var _rangeFrom = range_slicedToArray(rangeFrom, 3),\n          row = _rangeFrom[0],\n          elem_idx = _rangeFrom[1],\n          offset = _rangeFrom[2];\n        records.push({\n          op: \'range\',\n          args: [rangeFrom.slice(), rangeTo.slice()]\n        });\n        if (elemFrom === elemTo) {\n          var c = elemFrom.source;\n          elemFrom.setSourceWithRecord(c.substring(0, rangeFrom[2]) + c.substring(rangeTo[2]), editor.spaceHolder, records);\n        } else {\n          var flattenTxtElem = editor._flattenTxtElem;\n          var preContent = \'\';\n          var afterContent = \'\';\n          var preElement;\n          var afterElement;\n          var fromIdx = flattenTxtElem.findIndex(elemFrom);\n          var toIdx = flattenTxtElem.findIndex(elemTo);\n          var endTextNeedWrap = false;\n          if (elemFrom.type === \'text\') {\n            preContent = elemFrom.source.substring(0, rangeFrom[2]);\n          } else {\n            preElement = flattenTxtElem.get(fromIdx - 1);\n          }\n          if (elemTo.type === \'text\') {\n            afterContent = elemTo.source.substring(rangeTo[2]);\n            endTextNeedWrap = elemTo.needWrap;\n          } else {\n            afterElement = flattenTxtElem.get(toIdx - 1);\n          }\n          if (preElement) {\n            flattenTxtElem.splice(fromIdx, toIdx - fromIdx + 1);\n            if (preElement.type === \'text\') {\n              if (preElement.needWrap) {\n                row -= 1;\n              } else {\n                elem_idx -= 1;\n              }\n              offset = preElement.source.length;\n              preElement.setSourceWithRecord(preElement.source + afterContent, editor.spaceHolder, records);\n              preElement.setNeedWrap(endTextNeedWrap, records);\n            } else {\n              var t = new TextElement(\'text\', preContent + afterContent);\n              t.setNeedWrap(endTextNeedWrap, records);\n              flattenTxtElem.splice(fromIdx, 0, t);\n            }\n          } else {\n            flattenTxtElem.splice(fromIdx, toIdx - fromIdx);\n            if (afterElement) {\n              var _t = new TextElement(\'text\', preContent);\n              flattenTxtElem.splice(fromIdx, 0, _t);\n            } else {\n              elemTo.setSourceWithRecord(preContent + afterContent, editor.spaceHolder, records);\n            }\n          }\n          if (flattenTxtElem.length() === 0) {\n            // elem_idx = 0;\n            flattenTxtElem.push(new TextElement(\'text\', \'\'));\n          }\n        }\n        this.disable();\n        caret.setRow(row);\n        caret.setColumn([elem_idx, offset]);\n      }\n    }\n  }]);\n  return Range;\n}();\n/* harmony default export */ const range = (Range);\n;// CONCATENATED MODULE: ./src/core/instance/text-group/undoredo.js\nfunction undoredo_toConsumableArray(arr) { return undoredo_arrayWithoutHoles(arr) || undoredo_iterableToArray(arr) || undoredo_unsupportedIterableToArray(arr) || undoredo_nonIterableSpread(); }\nfunction undoredo_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction undoredo_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return undoredo_arrayLikeToArray(arr); }\nfunction _toArray(arr) { return undoredo_arrayWithHoles(arr) || undoredo_iterableToArray(arr) || undoredo_unsupportedIterableToArray(arr) || undoredo_nonIterableRest(); }\nfunction undoredo_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction undoredo_slicedToArray(arr, i) { return undoredo_arrayWithHoles(arr) || undoredo_iterableToArrayLimit(arr, i) || undoredo_unsupportedIterableToArray(arr, i) || undoredo_nonIterableRest(); }\nfunction undoredo_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction undoredo_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return undoredo_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return undoredo_arrayLikeToArray(o, minLen); }\nfunction undoredo_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction undoredo_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction undoredo_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction undoredo_typeof(obj) { "@babel/helpers - typeof"; return undoredo_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, undoredo_typeof(obj); }\nfunction undoredo_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction undoredo_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, undoredo_toPropertyKey(descriptor.key), descriptor); } }\nfunction undoredo_createClass(Constructor, protoProps, staticProps) { if (protoProps) undoredo_defineProperties(Constructor.prototype, protoProps); if (staticProps) undoredo_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction undoredo_defineProperty(obj, key, value) { key = undoredo_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction undoredo_toPropertyKey(arg) { var key = undoredo_toPrimitive(arg, "string"); return undoredo_typeof(key) === "symbol" ? key : String(key); }\nfunction undoredo_toPrimitive(input, hint) { if (undoredo_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (undoredo_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction isSetSourceBatch(x) {\n  return x.length === 1 && x[0].op === \'setSource\';\n}\nvar UndoRedo = /*#__PURE__*/function () {\n  function UndoRedo() {\n    undoredo_classCallCheck(this, UndoRedo);\n    undoredo_defineProperty(this, "_undo", []);\n    undoredo_defineProperty(this, "_redo", []);\n    undoredo_defineProperty(this, "_editor", null);\n  }\n  undoredo_createClass(UndoRedo, [{\n    key: "write",\n    value: function write(x, caretRecord) {\n      if (x.length === 0) {\n        return;\n      }\n      if (isSetSourceBatch(x)) {\n        var t = x[0];\n        var lastUndo = this.getLastUndo();\n        if (lastUndo && isSetSourceBatch(lastUndo._batch)) {\n          var q = lastUndo._batch[0];\n          if (q.args[0] === t.args[0]) {\n            q.args[1] = t.args[1];\n            lastUndo._caretMetaTo = caretRecord.after;\n            return;\n          }\n        }\n      }\n      var r = new BatchAction(x);\n      r._caretMetaFrom = caretRecord.before;\n      r._caretMetaTo = caretRecord.after;\n      this._undo.push(r);\n      if (this._undo.length > UndoRedo._length) {\n        this._undo.splice(0, 1);\n      }\n      if (this._redo.length) {\n        this._redo = [];\n      }\n    }\n  }, {\n    key: "getLastUndo",\n    value: function getLastUndo() {\n      return this._undo[this._undo.length - 1];\n    }\n  }, {\n    key: "undo",\n    value: function undo() {\n      var x = this._undo.pop();\n      if (x) {\n        x.undo(this._editor);\n        this._redo.push(x);\n      }\n      return x;\n    }\n  }, {\n    key: "redo",\n    value: function redo() {\n      var x = this._redo.pop();\n      while (x && x.SKIP_REDO) {\n        x = this._redo.pop();\n      }\n      if (x) {\n        x.redo(this._editor);\n        this._undo.push(x);\n      }\n      return x;\n    }\n  }]);\n  return UndoRedo;\n}();\nundoredo_defineProperty(UndoRedo, "_length", 50);\n\nvar BatchAction = /*#__PURE__*/function () {\n  function BatchAction(batch) {\n    undoredo_classCallCheck(this, BatchAction);\n    undoredo_defineProperty(this, "_batch", []);\n    undoredo_defineProperty(this, "_caretMetaFrom", null);\n    undoredo_defineProperty(this, "_caretMetaTo", null);\n    this._batch = batch;\n  }\n  undoredo_createClass(BatchAction, [{\n    key: "updateCaretMetaTo",\n    value: function updateCaretMetaTo(meta) {\n      this._caretMetaTo = meta;\n    }\n  }, {\n    key: "undo",\n    value: function undo(editor) {\n      this._batch.slice().reverse().forEach(function (action) {\n        switch (action.op) {\n          case \'range\':\n            var _action$args = undoredo_slicedToArray(action.args, 2),\n              rangeFrom = _action$args[0],\n              rangeTo = _action$args[1];\n            var range = editor._range;\n            range.setInitialRange(rangeFrom);\n            range.setRange(rangeTo);\n            range.enable();\n            break;\n          case \'setSource\':\n            var _action$args2 = undoredo_slicedToArray(action.args, 3),\n              elem = _action$args2[0],\n              s = _action$args2[1],\n              ls = _action$args2[2];\n            elem.setSource(ls, editor.spaceHolder);\n            break;\n          case \'setNeedWrap\':\n            var _action$args3 = undoredo_slicedToArray(action.args, 3),\n              o = _action$args3[0],\n              p = _action$args3[1],\n              q = _action$args3[2];\n            o.needWrap = q;\n            o.dirty = true;\n            break;\n          case \'splice\':\n            var flattenTxtElem = editor._flattenTxtElem;\n            var _action$args4 = _toArray(action.args),\n              a = _action$args4[0],\n              b = _action$args4[1],\n              c = _action$args4.slice(2);\n            var removed = action.removed;\n            var i = 0;\n            if (c) {\n              i = c.length;\n            }\n            flattenTxtElem.splice.apply(flattenTxtElem, [a, i].concat(undoredo_toConsumableArray(removed)));\n            break;\n        }\n      });\n      editor._caret.fromRange(this._caretMetaFrom);\n    }\n  }, {\n    key: "redo",\n    value: function redo(editor) {\n      this._batch.forEach(function (action) {\n        switch (action.op) {\n          case \'setSource\':\n            var _action$args5 = undoredo_slicedToArray(action.args, 3),\n              elem = _action$args5[0],\n              s = _action$args5[1],\n              ls = _action$args5[2];\n            elem.setSource(s, editor.spaceHolder);\n            break;\n          case \'setNeedWrap\':\n            var _action$args6 = undoredo_slicedToArray(action.args, 3),\n              o = _action$args6[0],\n              p = _action$args6[1],\n              q = _action$args6[2];\n            o.needWrap = p;\n            o.dirty = true;\n            break;\n          case \'splice\':\n            var flattenTxtElem = editor._flattenTxtElem;\n            flattenTxtElem.splice.apply(flattenTxtElem, undoredo_toConsumableArray(action.args));\n            break;\n        }\n      });\n      editor._caret.fromRange(this._caretMetaTo);\n    }\n  }]);\n  return BatchAction;\n}();\n;// CONCATENATED MODULE: ./src/core/instance/text-group/command/base.js\nfunction base_typeof(obj) { "@babel/helpers - typeof"; return base_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, base_typeof(obj); }\nfunction base_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction base_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, base_toPropertyKey(descriptor.key), descriptor); } }\nfunction base_createClass(Constructor, protoProps, staticProps) { if (protoProps) base_defineProperties(Constructor.prototype, protoProps); if (staticProps) base_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction base_toPropertyKey(arg) { var key = base_toPrimitive(arg, "string"); return base_typeof(key) === "symbol" ? key : String(key); }\nfunction base_toPrimitive(input, hint) { if (base_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (base_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nvar Command = /*#__PURE__*/function () {\n  function Command(editor) {\n    base_classCallCheck(this, Command);\n    this._editor = editor;\n  }\n  base_createClass(Command, [{\n    key: "exec",\n    value: function exec() {}\n  }], [{\n    key: "create",\n    value: function create(editor) {\n      return new this(editor);\n    }\n  }]);\n  return Command;\n}();\n/* harmony default export */ const base = (Command);\n;// CONCATENATED MODULE: ./src/core/instance/text-group/command/movement.js\nfunction movement_typeof(obj) { "@babel/helpers - typeof"; return movement_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, movement_typeof(obj); }\nfunction movement_slicedToArray(arr, i) { return movement_arrayWithHoles(arr) || movement_iterableToArrayLimit(arr, i) || movement_unsupportedIterableToArray(arr, i) || movement_nonIterableRest(); }\nfunction movement_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction movement_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return movement_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return movement_arrayLikeToArray(o, minLen); }\nfunction movement_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction movement_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction movement_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction movement_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction movement_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, movement_toPropertyKey(descriptor.key), descriptor); } }\nfunction movement_createClass(Constructor, protoProps, staticProps) { if (protoProps) movement_defineProperties(Constructor.prototype, protoProps); if (staticProps) movement_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction movement_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) movement_setPrototypeOf(subClass, superClass); }\nfunction movement_setPrototypeOf(o, p) { movement_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return movement_setPrototypeOf(o, p); }\nfunction movement_createSuper(Derived) { var hasNativeReflectConstruct = movement_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = movement_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = movement_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return movement_possibleConstructorReturn(this, result); }; }\nfunction movement_possibleConstructorReturn(self, call) { if (call && (movement_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return movement_assertThisInitialized(self); }\nfunction movement_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction movement_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction movement_getPrototypeOf(o) { movement_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return movement_getPrototypeOf(o); }\nfunction movement_defineProperty(obj, key, value) { key = movement_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction movement_toPropertyKey(arg) { var key = movement_toPrimitive(arg, "string"); return movement_typeof(key) === "symbol" ? key : String(key); }\nfunction movement_toPrimitive(input, hint) { if (movement_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (movement_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\nvar ArrowLeftCommand = /*#__PURE__*/function (_Command) {\n  movement_inherits(ArrowLeftCommand, _Command);\n  var _super = movement_createSuper(ArrowLeftCommand);\n  function ArrowLeftCommand() {\n    movement_classCallCheck(this, ArrowLeftCommand);\n    return _super.apply(this, arguments);\n  }\n  movement_createClass(ArrowLeftCommand, [{\n    key: "exec",\n    value: function exec() {\n      var editor = this._editor;\n      editor._range.disable();\n      var flattenTxtElem = editor._flattenTxtElem;\n      var caret = editor._caret;\n      var row = caret.getRow();\n      var column = caret.getColumn();\n      var _column = movement_slicedToArray(column, 2),\n        elemidx = _column[0],\n        offset = _column[1];\n      var line = editor._area.get(row);\n      var element = line.get(elemidx);\n      var idx = flattenTxtElem.findIndex(element);\n      var result = element.shift(offset, -1);\n      switch (result) {\n        case \'prev\':\n          if (elemidx > 0) {\n            var el = line.get(elemidx - 1);\n            caret.setColumn([elemidx - 1, el.tailOffset()]);\n          } else if (idx > 0) {\n            var preRow = row - 1;\n            var preElemidx = editor._area.get(preRow).length() - 1;\n            var _offset = flattenTxtElem.get(idx - 1).tailOffset();\n            caret.setRow(preRow);\n            caret.setColumn([preElemidx, _offset]);\n          }\n          break;\n        case \'self\':\n          caret.setColumn(1, offset - 1);\n          break;\n      }\n      caret.refresh();\n      editor.syncShadowInputPosition();\n      editor._jflow._render();\n    }\n  }]);\n  return ArrowLeftCommand;\n}(base);\nmovement_defineProperty(ArrowLeftCommand, "_name", KEYBOARD_COMMANDS.ARROW_LEFT);\nvar ArrowRightCommand = /*#__PURE__*/function (_Command2) {\n  movement_inherits(ArrowRightCommand, _Command2);\n  var _super2 = movement_createSuper(ArrowRightCommand);\n  function ArrowRightCommand() {\n    movement_classCallCheck(this, ArrowRightCommand);\n    return _super2.apply(this, arguments);\n  }\n  movement_createClass(ArrowRightCommand, [{\n    key: "exec",\n    value: function exec() {\n      var editor = this._editor;\n      editor._range.disable();\n      var flattenTxtElem = editor._flattenTxtElem;\n      var caret = editor._caret;\n      var row = caret.getRow();\n      var column = caret.getColumn();\n      var _column2 = movement_slicedToArray(column, 2),\n        elemidx = _column2[0],\n        offset = _column2[1];\n      var line = editor._area.get(row);\n      var element = line.get(elemidx);\n      var idx = flattenTxtElem.findIndex(element);\n      var result = element.shift(offset, 1, idx === flattenTxtElem.length() - 1);\n      switch (result) {\n        case \'next\':\n          if (elemidx < line.length() - 1) {\n            var el = line.get(elemidx + 1);\n            if (element.type === \'text\' && el.type !== \'text\') {\n              caret.setColumn([elemidx + 2, el.headOffset()]);\n            } else {\n              caret.setColumn([elemidx + 1, el.headOffset()]);\n            }\n          } else if (idx < flattenTxtElem.length() - 1) {\n            var afterRow = row + 1;\n            var _offset2 = flattenTxtElem.get(idx + 1).headOffset();\n            caret.setRow(afterRow);\n            caret.setColumn([0, _offset2]);\n          }\n          break;\n        case \'self\':\n          caret.setColumn(1, offset + 1);\n          break;\n      }\n      caret.refresh();\n      editor.syncShadowInputPosition();\n      editor._jflow._render();\n    }\n  }]);\n  return ArrowRightCommand;\n}(base);\nmovement_defineProperty(ArrowRightCommand, "_name", KEYBOARD_COMMANDS.ARROW_RIGHT);\nvar ArrowUpCommand = /*#__PURE__*/function (_Command3) {\n  movement_inherits(ArrowUpCommand, _Command3);\n  var _super3 = movement_createSuper(ArrowUpCommand);\n  function ArrowUpCommand() {\n    movement_classCallCheck(this, ArrowUpCommand);\n    return _super3.apply(this, arguments);\n  }\n  movement_createClass(ArrowUpCommand, [{\n    key: "exec",\n    value: function exec() {\n      this._editor._range.disable();\n      var nextRow = this._editor._caret.getRow() - 1;\n      if (nextRow > -1) {\n        this._handler(nextRow);\n      }\n    }\n  }]);\n  return ArrowUpCommand;\n}(base);\nmovement_defineProperty(ArrowUpCommand, "_name", KEYBOARD_COMMANDS.ARROW_UP);\nvar ArrowDownCommand = /*#__PURE__*/function (_Command4) {\n  movement_inherits(ArrowDownCommand, _Command4);\n  var _super4 = movement_createSuper(ArrowDownCommand);\n  function ArrowDownCommand() {\n    movement_classCallCheck(this, ArrowDownCommand);\n    return _super4.apply(this, arguments);\n  }\n  movement_createClass(ArrowDownCommand, [{\n    key: "exec",\n    value: function exec() {\n      this._editor._range.disable();\n      var nextRow = this._editor._caret.getRow() + 1;\n      if (nextRow < this._editor._area.length()) {\n        this._handler(nextRow);\n      }\n    }\n  }]);\n  return ArrowDownCommand;\n}(base);\nmovement_defineProperty(ArrowDownCommand, "_name", KEYBOARD_COMMANDS.ARROW_DOWN);\nvar _mixin = {\n  _handler: function _handler(nextRow) {\n    var editor = this._editor;\n    var caret = editor._caret;\n    var row = caret.getRow();\n    var column = caret.getColumn();\n    var _column3 = movement_slicedToArray(column, 2),\n      elemidx = _column3[0],\n      offset = _column3[1];\n    var area = editor._area;\n    var line = area.get(row);\n    var currElem = line.get(elemidx);\n    var currElemReduceWidth = currElem.reduceWidth;\n    if (offset > 0) {\n      currElemReduceWidth += editor.measureTextWidth(currElem.getRenderSource(editor.spaceHolder).substring(0, offset));\n    }\n    var nextLine = area.get(nextRow);\n    var nextColumn = nextLine.getColumnNearest(currElemReduceWidth, editor.elementSpace, editor.fontSize, editor.fontFamily, editor);\n    caret.setRow(nextRow);\n    caret.setColumn(nextColumn);\n    caret.refresh();\n    editor.syncShadowInputPosition();\n    editor._jflow._render();\n  }\n};\nObject.assign(ArrowUpCommand.prototype, _mixin);\nObject.assign(ArrowDownCommand.prototype, _mixin);\n;// CONCATENATED MODULE: ./src/core/instance/text-group/command/input.js\nfunction input_typeof(obj) { "@babel/helpers - typeof"; return input_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, input_typeof(obj); }\nfunction input_slicedToArray(arr, i) { return input_arrayWithHoles(arr) || input_iterableToArrayLimit(arr, i) || input_unsupportedIterableToArray(arr, i) || input_nonIterableRest(); }\nfunction input_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction input_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return input_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return input_arrayLikeToArray(o, minLen); }\nfunction input_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction input_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction input_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction input_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction input_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, input_toPropertyKey(descriptor.key), descriptor); } }\nfunction input_createClass(Constructor, protoProps, staticProps) { if (protoProps) input_defineProperties(Constructor.prototype, protoProps); if (staticProps) input_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction input_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) input_setPrototypeOf(subClass, superClass); }\nfunction input_setPrototypeOf(o, p) { input_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return input_setPrototypeOf(o, p); }\nfunction input_createSuper(Derived) { var hasNativeReflectConstruct = input_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = input_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = input_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return input_possibleConstructorReturn(this, result); }; }\nfunction input_possibleConstructorReturn(self, call) { if (call && (input_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return input_assertThisInitialized(self); }\nfunction input_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction input_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction input_getPrototypeOf(o) { input_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return input_getPrototypeOf(o); }\nfunction input_defineProperty(obj, key, value) { key = input_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction input_toPropertyKey(arg) { var key = input_toPrimitive(arg, "string"); return input_typeof(key) === "symbol" ? key : String(key); }\nfunction input_toPrimitive(input, hint) { if (input_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (input_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\nfunction _blandAdjacentElement(editor, elem1, elem2, defaultOffset, records) {\n  if (!elem1) {\n    return [defaultOffset, false];\n  }\n  if (elem1.type === \'text\' && elem2.type === \'text\') {\n    var offset = elem1.source.length;\n    elem1.setSourceWithRecord(elem1.source + elem2.source, editor.spaceHolder, records);\n    elem1.setNeedWrap(elem2.needWrap, records);\n    return [offset, true];\n  }\n  return [defaultOffset, false];\n}\nvar Input = /*#__PURE__*/function (_Command) {\n  input_inherits(Input, _Command);\n  var _super = input_createSuper(Input);\n  function Input() {\n    var _this;\n    input_classCallCheck(this, Input);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    input_defineProperty(input_assertThisInitialized(_this), "cacheIdx", null);\n    return _this;\n  }\n  input_createClass(Input, [{\n    key: "exec",\n    value: function exec(kind, data) {\n      var editor = this._editor;\n      var range = editor._range;\n      var caret = editor._caret;\n      var flattenTxtElem = editor._flattenTxtElem;\n      var undoredo = editor._undoredo;\n      var records = flattenTxtElem.startRecord();\n      flattenTxtElem.recordBeforeCaret(caret);\n      // let _afterRangeDelete = false;\n      if (range.isEnable()) {\n        range["delete"](editor, records);\n        if (kind === KEYBOARD_INPUT.BACKSPACE || kind === KEYBOARD_INPUT.DELETE) {\n          flattenTxtElem.collectRecords();\n          flattenTxtElem.recordAfterCaret(caret);\n          this._editor.refresh();\n          undoredo.write(records, flattenTxtElem.getCaretRecord());\n          return;\n        } else {\n          this._editor.refresh();\n          // _afterRangeDelete = true;\n        }\n      }\n\n      var row = caret.getRow();\n      var _caret$getColumn = caret.getColumn(),\n        _caret$getColumn2 = input_slicedToArray(_caret$getColumn, 2),\n        elem_idx = _caret$getColumn2[0],\n        offset = _caret$getColumn2[1];\n      var area = editor._area;\n      var line = area.get(row);\n      var element = line.get(elem_idx);\n      var preElem = line.get(elem_idx - 1);\n      var content = \'\';\n      if (element.type === \'text\') {\n        content = element.source;\n      } else if ((preElem === null || preElem === void 0 ? void 0 : preElem.type) === \'text\') {\n        content = preElem.source;\n        element = preElem;\n        offset = content.length;\n        elem_idx -= 1;\n        caret.setColumn([elem_idx, content.length]);\n      } else {\n        var newElement = new TextElement(\'text\', \'\');\n        flattenTxtElem.insertBefore(element, newElement);\n        element = newElement;\n      }\n      var preContent = content.substring(0, offset);\n      var afterContent;\n      if (this.cacheIdx) {\n        afterContent = content.substring(this.cacheIdx[1]);\n      } else {\n        afterContent = content.substring(offset);\n      }\n      switch (kind) {\n        case KEYBOARD_INPUT.INPUT:\n          // if(_afterRangeDelete) {\n          //     element = flattenTxtElem.get(0);\n          //     afterContent = \'\';\n          //     preContent = \'\';\n          // }\n          if (/\\r?[\\n\\t]/.test(data)) {\n            var rows = data.split(/\\r?[\\n\\t]/) || \'\';\n            // source = source.replace(/\\t/, \'\');\n            var idx = flattenTxtElem.findIndex(element);\n            var _lastNeedWrap = element.needWrap;\n            element.setSourceWithRecord(preContent + rows.shift(), editor.spaceHolder, records);\n            element.setNeedWrap(true, records);\n            var temp = [];\n            var tn;\n            var _row = row;\n            var col;\n            while (rows.length) {\n              tn = new TextElement(\'text\', rows.shift());\n              tn.needWrap = true;\n              temp.push(tn);\n              _row++;\n            }\n            col = tn.source.length;\n            tn.source += afterContent;\n            tn.needWrap = _lastNeedWrap;\n            temp.forEach(function (t, i) {\n              flattenTxtElem.inersetAt(idx + 1 + i, t);\n            });\n            caret.setRow(_row);\n            caret.setColumn([0, col]);\n          } else {\n            preContent += data;\n            caret.setColumn(1, caret.getColumn(1) + data.length);\n            element.setSourceWithRecord(preContent + afterContent, editor.spaceHolder, records);\n          }\n          break;\n        case KEYBOARD_INPUT.COMPOSITION_START:\n          this.cacheIdx = [preContent.length, preContent.length];\n          break;\n        case KEYBOARD_INPUT.COMPOSITION_UPDATE:\n          preContent = preContent.substring(0, this.cacheIdx[0]);\n          preContent += data;\n          element.setSourceWithRecord(preContent + afterContent, editor.spaceHolder, records);\n          var _t = this.cacheIdx[0] + data.length;\n          caret.setColumn(1, _t);\n          this.cacheIdx[1] = _t;\n          break;\n        case KEYBOARD_INPUT.COMPOSITION_END:\n          preContent = preContent.substring(0, this.cacheIdx[0]);\n          caret.setColumn(1, this.cacheIdx[0] + data.length);\n          this.cacheIdx = null;\n          preContent += data;\n          element.setSourceWithRecord(preContent + afterContent, editor.spaceHolder, records);\n          break;\n        case KEYBOARD_INPUT.ENTER:\n          var lastNeedWrap = element.needWrap;\n          element.setSourceWithRecord(preContent, editor.spaceHolder, records);\n          element.setNeedWrap(true, records);\n          var t = new TextElement(\'text\', afterContent);\n          flattenTxtElem.insertAfter(element, t, lastNeedWrap);\n          caret.setRow(row + 1);\n          caret.setColumn([0, 0]);\n          break;\n        case KEYBOARD_INPUT.BACKSPACE:\n          var result = element.shift(offset, -1);\n          switch (result) {\n            case \'prev\':\n              var _idx = flattenTxtElem.findIndex(element);\n              if (elem_idx > 0) {\n                // 行内\n                flattenTxtElem.splice(_idx - 1, 1);\n                _idx -= 1;\n                // element.setSource(afterContent, records);\n                // element.dirty = true;\n                var _blandAdjacentElement2 = _blandAdjacentElement(editor, flattenTxtElem.get(_idx - 1), element, 0, records),\n                  _blandAdjacentElement3 = input_slicedToArray(_blandAdjacentElement2, 2),\n                  _offset = _blandAdjacentElement3[0],\n                  deleteop = _blandAdjacentElement3[1];\n                if (deleteop) {\n                  flattenTxtElem.remove(_idx);\n                }\n                caret.setColumn([elem_idx - (_offset > 0 || deleteop ? 2 : 1), _offset]);\n              } else if (_idx > 0) {\n                // 换行了\n                var preRow = row - 1;\n                var preElemidx = area.get(preRow).length() - 1;\n                var _blandAdjacentElement4 = _blandAdjacentElement(editor, flattenTxtElem.get(_idx - 1), element, 0, records),\n                  _blandAdjacentElement5 = input_slicedToArray(_blandAdjacentElement4, 2),\n                  _offset2 = _blandAdjacentElement5[0],\n                  _deleteop = _blandAdjacentElement5[1];\n                if (_deleteop) {\n                  flattenTxtElem.remove(_idx);\n                }\n                caret.setRow(preRow);\n                caret.setColumn([preElemidx, _offset2]);\n              }\n              break;\n            case \'self\':\n              preContent = preContent.substring(0, preContent.length - 1);\n              caret.setColumn(1, caret.getColumn(1) - 1);\n              element.setSourceWithRecord(preContent + afterContent, editor.spaceHolder, records);\n              break;\n          }\n          break;\n        case KEYBOARD_INPUT.DELETE:\n          var shiftresult = element.shift(offset, 1);\n          switch (shiftresult) {\n            case \'next\':\n              var _idx2 = flattenTxtElem.findIndex(element);\n              if (elem_idx < line.length() - 1) {\n                // 行内\n                flattenTxtElem.splice(_idx2 + 1, 1);\n                var nextElem = flattenTxtElem.get(_idx2 + 1);\n                var _blandAdjacentElement6 = _blandAdjacentElement(element, nextElem, element.source.length, records),\n                  _blandAdjacentElement7 = input_slicedToArray(_blandAdjacentElement6, 2),\n                  _offset3 = _blandAdjacentElement7[0],\n                  _deleteop2 = _blandAdjacentElement7[1];\n                if (_deleteop2) {\n                  flattenTxtElem.remove(_idx2 + 1);\n                }\n                caret.setColumn([elem_idx, _offset3]);\n              } else if (_idx2 < flattenTxtElem.length() - 1) {\n                // 换行了\n                var _nextElem = flattenTxtElem.get(_idx2 + 1);\n                var _blandAdjacentElement8 = _blandAdjacentElement(element, _nextElem, element.source.length, records),\n                  _blandAdjacentElement9 = input_slicedToArray(_blandAdjacentElement8, 2),\n                  _offset4 = _blandAdjacentElement9[0],\n                  _deleteop3 = _blandAdjacentElement9[1];\n                if (_deleteop3) {\n                  flattenTxtElem.remove(_idx2 + 1);\n                }\n                caret.setColumn([elem_idx, _offset4]);\n              }\n              break;\n            case \'self\':\n              afterContent = afterContent.substring(1);\n              element.setSourceWithRecord(preContent + afterContent, editor.spaceHolder, records);\n              break;\n          }\n          break;\n      }\n      flattenTxtElem.collectRecords();\n      flattenTxtElem.recordAfterCaret(caret);\n      undoredo.write(records, flattenTxtElem.getCaretRecord());\n      this._editor.refresh();\n    }\n  }]);\n  return Input;\n}(base);\ninput_defineProperty(Input, "_name", EDITOR_EVENTS.INPUT);\n;// CONCATENATED MODULE: ./src/core/instance/text-group/command/mouse.js\nfunction mouse_typeof(obj) { "@babel/helpers - typeof"; return mouse_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, mouse_typeof(obj); }\nfunction mouse_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction mouse_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, mouse_toPropertyKey(descriptor.key), descriptor); } }\nfunction mouse_createClass(Constructor, protoProps, staticProps) { if (protoProps) mouse_defineProperties(Constructor.prototype, protoProps); if (staticProps) mouse_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction mouse_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) mouse_setPrototypeOf(subClass, superClass); }\nfunction mouse_setPrototypeOf(o, p) { mouse_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return mouse_setPrototypeOf(o, p); }\nfunction mouse_createSuper(Derived) { var hasNativeReflectConstruct = mouse_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = mouse_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = mouse_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return mouse_possibleConstructorReturn(this, result); }; }\nfunction mouse_possibleConstructorReturn(self, call) { if (call && (mouse_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return mouse_assertThisInitialized(self); }\nfunction mouse_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction mouse_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction mouse_getPrototypeOf(o) { mouse_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return mouse_getPrototypeOf(o); }\nfunction mouse_defineProperty(obj, key, value) { key = mouse_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction mouse_toPropertyKey(arg) { var key = mouse_toPrimitive(arg, "string"); return mouse_typeof(key) === "symbol" ? key : String(key); }\nfunction mouse_toPrimitive(input, hint) { if (mouse_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (mouse_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\nvar StartEditCommand = /*#__PURE__*/function (_Command) {\n  mouse_inherits(StartEditCommand, _Command);\n  var _super = mouse_createSuper(StartEditCommand);\n  function StartEditCommand() {\n    mouse_classCallCheck(this, StartEditCommand);\n    return _super.apply(this, arguments);\n  }\n  mouse_createClass(StartEditCommand, [{\n    key: "exec",\n    value: function exec() {\n      var editor = this._editor;\n      if (!this._startEdit()) {\n        return;\n      }\n      var jflow = editor._jflow;\n      editor.moveCaretByHitPoint();\n      editor.createShadowInput();\n      editor._caret.animate(jflow);\n      editor.syncShadowInputPosition();\n    }\n  }, {\n    key: "_startEdit",\n    value: function _startEdit() {\n      var flag = true;\n      var editor = this._editor;\n      editor.dispatchEvent(new events(\'edit\', {\n        target: editor,\n        preventDefault: function preventDefault() {\n          flag = false;\n        }\n      }));\n      return flag;\n    }\n  }]);\n  return StartEditCommand;\n}(base);\nmouse_defineProperty(StartEditCommand, "_name", MOUSE_COMMANDS.START_EDIT);\nvar EditClickCommand = /*#__PURE__*/function (_Command2) {\n  mouse_inherits(EditClickCommand, _Command2);\n  var _super2 = mouse_createSuper(EditClickCommand);\n  function EditClickCommand() {\n    mouse_classCallCheck(this, EditClickCommand);\n    return _super2.apply(this, arguments);\n  }\n  mouse_createClass(EditClickCommand, [{\n    key: "exec",\n    value: function exec() {\n      var editor = this._editor;\n      editor.moveCaretByHitPoint();\n      editor._caret.refresh();\n      editor.syncShadowInputPosition();\n      editor._range.disable();\n    }\n  }]);\n  return EditClickCommand;\n}(base);\nmouse_defineProperty(EditClickCommand, "_name", MOUSE_COMMANDS.EDIT_CLICK);\nvar DoubleClickCommand = /*#__PURE__*/function (_Command3) {\n  mouse_inherits(DoubleClickCommand, _Command3);\n  var _super3 = mouse_createSuper(DoubleClickCommand);\n  function DoubleClickCommand() {\n    mouse_classCallCheck(this, DoubleClickCommand);\n    return _super3.apply(this, arguments);\n  }\n  mouse_createClass(DoubleClickCommand, [{\n    key: "exec",\n    value: function exec() {\n      var editor = this._editor;\n      editor.moveCaretByHitPoint();\n      var caret = editor._caret;\n      var range = editor._range;\n      var area = editor._area;\n      var row = caret.getRow();\n      var line = area.get(row);\n      var elem_idx = line.length() - 1;\n      range.setInitialRange([row, 0, 0]);\n      range.setRange([row, elem_idx, line.tail().tailOffset()]);\n      range.handleCaret(caret);\n      range.enable();\n      editor.syncShadowInputPosition();\n    }\n  }]);\n  return DoubleClickCommand;\n}(base);\nmouse_defineProperty(DoubleClickCommand, "_name", MOUSE_COMMANDS.DOUBLE_CLICK);\n;// CONCATENATED MODULE: ./src/core/instance/text-group/command/shift.js\nfunction shift_typeof(obj) { "@babel/helpers - typeof"; return shift_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, shift_typeof(obj); }\nfunction shift_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction shift_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, shift_toPropertyKey(descriptor.key), descriptor); } }\nfunction shift_createClass(Constructor, protoProps, staticProps) { if (protoProps) shift_defineProperties(Constructor.prototype, protoProps); if (staticProps) shift_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction shift_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) shift_setPrototypeOf(subClass, superClass); }\nfunction shift_setPrototypeOf(o, p) { shift_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return shift_setPrototypeOf(o, p); }\nfunction shift_createSuper(Derived) { var hasNativeReflectConstruct = shift_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = shift_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = shift_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return shift_possibleConstructorReturn(this, result); }; }\nfunction shift_possibleConstructorReturn(self, call) { if (call && (shift_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return shift_assertThisInitialized(self); }\nfunction shift_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction shift_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction shift_getPrototypeOf(o) { shift_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return shift_getPrototypeOf(o); }\nfunction shift_defineProperty(obj, key, value) { key = shift_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction shift_toPropertyKey(arg) { var key = shift_toPrimitive(arg, "string"); return shift_typeof(key) === "symbol" ? key : String(key); }\nfunction shift_toPrimitive(input, hint) { if (shift_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (shift_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\nvar ShiftUpCommand = /*#__PURE__*/function (_Command) {\n  shift_inherits(ShiftUpCommand, _Command);\n  var _super = shift_createSuper(ShiftUpCommand);\n  function ShiftUpCommand() {\n    shift_classCallCheck(this, ShiftUpCommand);\n    return _super.apply(this, arguments);\n  }\n  shift_createClass(ShiftUpCommand, [{\n    key: "exec",\n    value: function exec() {\n      var range = this._editor._range;\n      range.setInitialRange(null);\n      this._editor.toggleShift(false);\n    }\n  }]);\n  return ShiftUpCommand;\n}(base);\nshift_defineProperty(ShiftUpCommand, "_name", KEYBOARD_COMMANDS.SHIFT_UP);\nvar ShiftDownCommand = /*#__PURE__*/function (_Command2) {\n  shift_inherits(ShiftDownCommand, _Command2);\n  var _super2 = shift_createSuper(ShiftDownCommand);\n  function ShiftDownCommand() {\n    shift_classCallCheck(this, ShiftDownCommand);\n    return _super2.apply(this, arguments);\n  }\n  shift_createClass(ShiftDownCommand, [{\n    key: "exec",\n    value: function exec() {\n      var range = this._editor._range;\n      var caret = this._editor._caret;\n      range.setInitialRange(caret.toRange());\n      this._editor.toggleShift(true);\n    }\n  }]);\n  return ShiftDownCommand;\n}(base);\nshift_defineProperty(ShiftDownCommand, "_name", KEYBOARD_COMMANDS.SHIFT_DOWN);\nvar ShiftOnClickCommand = /*#__PURE__*/function (_Command3) {\n  shift_inherits(ShiftOnClickCommand, _Command3);\n  var _super3 = shift_createSuper(ShiftOnClickCommand);\n  function ShiftOnClickCommand() {\n    shift_classCallCheck(this, ShiftOnClickCommand);\n    return _super3.apply(this, arguments);\n  }\n  shift_createClass(ShiftOnClickCommand, [{\n    key: "exec",\n    value: function exec() {\n      var editor = this._editor;\n      editor.moveCaretByHitPoint();\n      var caret = this._editor._caret;\n      var range = this._editor._range;\n      range.setRange(caret.toRange());\n      range.enable();\n      range.handleCaret(caret);\n      caret.refresh();\n      editor.syncShadowInputPosition();\n    }\n  }]);\n  return ShiftOnClickCommand;\n}(base);\nshift_defineProperty(ShiftOnClickCommand, "_name", MOUSE_COMMANDS.SHIFT_ON_CLICK);\n;// CONCATENATED MODULE: ./src/core/instance/text-group/command/ctrl.js\nfunction ctrl_typeof(obj) { "@babel/helpers - typeof"; return ctrl_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, ctrl_typeof(obj); }\nfunction ctrl_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction ctrl_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, ctrl_toPropertyKey(descriptor.key), descriptor); } }\nfunction ctrl_createClass(Constructor, protoProps, staticProps) { if (protoProps) ctrl_defineProperties(Constructor.prototype, protoProps); if (staticProps) ctrl_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction ctrl_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) ctrl_setPrototypeOf(subClass, superClass); }\nfunction ctrl_setPrototypeOf(o, p) { ctrl_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return ctrl_setPrototypeOf(o, p); }\nfunction ctrl_createSuper(Derived) { var hasNativeReflectConstruct = ctrl_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = ctrl_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = ctrl_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return ctrl_possibleConstructorReturn(this, result); }; }\nfunction ctrl_possibleConstructorReturn(self, call) { if (call && (ctrl_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return ctrl_assertThisInitialized(self); }\nfunction ctrl_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction ctrl_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction ctrl_getPrototypeOf(o) { ctrl_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return ctrl_getPrototypeOf(o); }\nfunction ctrl_defineProperty(obj, key, value) { key = ctrl_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction ctrl_toPropertyKey(arg) { var key = ctrl_toPrimitive(arg, "string"); return ctrl_typeof(key) === "symbol" ? key : String(key); }\nfunction ctrl_toPrimitive(input, hint) { if (ctrl_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (ctrl_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\nvar CtrlACommand = /*#__PURE__*/function (_Command) {\n  ctrl_inherits(CtrlACommand, _Command);\n  var _super = ctrl_createSuper(CtrlACommand);\n  function CtrlACommand() {\n    ctrl_classCallCheck(this, CtrlACommand);\n    return _super.apply(this, arguments);\n  }\n  ctrl_createClass(CtrlACommand, [{\n    key: "exec",\n    value: function exec() {\n      var editor = this._editor;\n      var caret = editor._caret;\n      var range = editor._range;\n      var area = editor._area;\n      var row = area.length() - 1;\n      var line = area.get(row);\n      var elem_idx = line.length() - 1;\n      range.setInitialRange([0, 0, 0]);\n      range.setRange([row, elem_idx, line.tail().tailOffset()]);\n      range.handleCaret(caret);\n      range.enable();\n      editor.syncShadowInputPosition();\n    }\n  }]);\n  return CtrlACommand;\n}(base);\nctrl_defineProperty(CtrlACommand, "_name", KEYBOARD_COMMANDS.CTRLA);\n;// CONCATENATED MODULE: ./src/core/instance/text-group/command/undoredo.js\nfunction command_undoredo_typeof(obj) { "@babel/helpers - typeof"; return command_undoredo_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, command_undoredo_typeof(obj); }\nfunction command_undoredo_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction command_undoredo_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, command_undoredo_toPropertyKey(descriptor.key), descriptor); } }\nfunction command_undoredo_createClass(Constructor, protoProps, staticProps) { if (protoProps) command_undoredo_defineProperties(Constructor.prototype, protoProps); if (staticProps) command_undoredo_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction undoredo_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) undoredo_setPrototypeOf(subClass, superClass); }\nfunction undoredo_setPrototypeOf(o, p) { undoredo_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return undoredo_setPrototypeOf(o, p); }\nfunction undoredo_createSuper(Derived) { var hasNativeReflectConstruct = undoredo_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = undoredo_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = undoredo_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return undoredo_possibleConstructorReturn(this, result); }; }\nfunction undoredo_possibleConstructorReturn(self, call) { if (call && (command_undoredo_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return undoredo_assertThisInitialized(self); }\nfunction undoredo_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction undoredo_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction undoredo_getPrototypeOf(o) { undoredo_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return undoredo_getPrototypeOf(o); }\nfunction command_undoredo_defineProperty(obj, key, value) { key = command_undoredo_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction command_undoredo_toPropertyKey(arg) { var key = command_undoredo_toPrimitive(arg, "string"); return command_undoredo_typeof(key) === "symbol" ? key : String(key); }\nfunction command_undoredo_toPrimitive(input, hint) { if (command_undoredo_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (command_undoredo_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\nvar UndoCommand = /*#__PURE__*/function (_Command) {\n  undoredo_inherits(UndoCommand, _Command);\n  var _super = undoredo_createSuper(UndoCommand);\n  function UndoCommand() {\n    command_undoredo_classCallCheck(this, UndoCommand);\n    return _super.apply(this, arguments);\n  }\n  command_undoredo_createClass(UndoCommand, [{\n    key: "exec",\n    value: function exec() {\n      this._editor._range.disable();\n      this._editor._undoredo.undo();\n      this._editor.refresh();\n    }\n  }]);\n  return UndoCommand;\n}(base);\ncommand_undoredo_defineProperty(UndoCommand, "_name", KEYBOARD_COMMANDS.UNDO);\nvar RedoCommand = /*#__PURE__*/function (_Command2) {\n  undoredo_inherits(RedoCommand, _Command2);\n  var _super2 = undoredo_createSuper(RedoCommand);\n  function RedoCommand() {\n    command_undoredo_classCallCheck(this, RedoCommand);\n    return _super2.apply(this, arguments);\n  }\n  command_undoredo_createClass(RedoCommand, [{\n    key: "exec",\n    value: function exec() {\n      this._editor._range.disable();\n      this._editor._undoredo.redo();\n      this._editor.refresh();\n    }\n  }]);\n  return RedoCommand;\n}(base);\ncommand_undoredo_defineProperty(RedoCommand, "_name", KEYBOARD_COMMANDS.REDO);\n;// CONCATENATED MODULE: ./src/core/instance/text-group/command/clipboard.js\nfunction clipboard_typeof(obj) { "@babel/helpers - typeof"; return clipboard_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, clipboard_typeof(obj); }\nfunction clipboard_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction clipboard_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, clipboard_toPropertyKey(descriptor.key), descriptor); } }\nfunction clipboard_createClass(Constructor, protoProps, staticProps) { if (protoProps) clipboard_defineProperties(Constructor.prototype, protoProps); if (staticProps) clipboard_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction clipboard_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) clipboard_setPrototypeOf(subClass, superClass); }\nfunction clipboard_setPrototypeOf(o, p) { clipboard_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return clipboard_setPrototypeOf(o, p); }\nfunction clipboard_createSuper(Derived) { var hasNativeReflectConstruct = clipboard_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = clipboard_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = clipboard_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return clipboard_possibleConstructorReturn(this, result); }; }\nfunction clipboard_possibleConstructorReturn(self, call) { if (call && (clipboard_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return clipboard_assertThisInitialized(self); }\nfunction clipboard_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction clipboard_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction clipboard_getPrototypeOf(o) { clipboard_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return clipboard_getPrototypeOf(o); }\nfunction clipboard_defineProperty(obj, key, value) { key = clipboard_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction clipboard_toPropertyKey(arg) { var key = clipboard_toPrimitive(arg, "string"); return clipboard_typeof(key) === "symbol" ? key : String(key); }\nfunction clipboard_toPrimitive(input, hint) { if (clipboard_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (clipboard_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n\nvar CopyCommand = /*#__PURE__*/function (_Command) {\n  clipboard_inherits(CopyCommand, _Command);\n  var _super = clipboard_createSuper(CopyCommand);\n  function CopyCommand() {\n    clipboard_classCallCheck(this, CopyCommand);\n    return _super.apply(this, arguments);\n  }\n  clipboard_createClass(CopyCommand, [{\n    key: "exec",\n    value: function exec(event) {\n      var editor = this._editor;\n      var range = editor._range;\n      var content = range.getRangeCopy(editor);\n      if (content) {\n        event.clipboardData.setData("text/plain", content);\n      }\n    }\n  }]);\n  return CopyCommand;\n}(base);\nclipboard_defineProperty(CopyCommand, "_name", KEYBOARD_COMMANDS.COPY);\nvar CutCommand = /*#__PURE__*/function (_Command2) {\n  clipboard_inherits(CutCommand, _Command2);\n  var _super2 = clipboard_createSuper(CutCommand);\n  function CutCommand() {\n    clipboard_classCallCheck(this, CutCommand);\n    return _super2.apply(this, arguments);\n  }\n  clipboard_createClass(CutCommand, [{\n    key: "exec",\n    value: function exec(event) {\n      var editor = this._editor;\n      var range = editor._range;\n      var content = range.getRangeCopy(editor);\n      if (content) {\n        event.clipboardData.setData("text/plain", content);\n      }\n      if (range.isEnable()) {\n        var cmd = editor.commands.get(EDITOR_EVENTS.INPUT);\n        cmd.exec(KEYBOARD_INPUT.BACKSPACE);\n      }\n    }\n  }]);\n  return CutCommand;\n}(base);\nclipboard_defineProperty(CutCommand, "_name", KEYBOARD_COMMANDS.CUT);\nvar PasteCommand = /*#__PURE__*/function (_Command3) {\n  clipboard_inherits(PasteCommand, _Command3);\n  var _super3 = clipboard_createSuper(PasteCommand);\n  function PasteCommand() {\n    clipboard_classCallCheck(this, PasteCommand);\n    return _super3.apply(this, arguments);\n  }\n  clipboard_createClass(PasteCommand, [{\n    key: "exec",\n    value: function exec(pasteContent) {\n      var editor = this._editor;\n      if (pasteContent) {\n        var _preventDefault = false;\n        editor.dispatchEvent(new events(\'paste\', {\n          content: pasteContent,\n          preventDefault: function preventDefault() {\n            _preventDefault = true;\n          }\n        }));\n        if (!_preventDefault) {\n          var cmd = editor.commands.get(EDITOR_EVENTS.INPUT);\n          cmd.exec(KEYBOARD_INPUT.INPUT, pasteContent);\n        }\n      }\n    }\n  }]);\n  return PasteCommand;\n}(base);\nclipboard_defineProperty(PasteCommand, "_name", KEYBOARD_COMMANDS.PASTE);\n;// CONCATENATED MODULE: ./src/core/instance/text-group/command/index.js\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./src/core/instance/text-group/text-group.js\nfunction text_group_typeof(obj) { "@babel/helpers - typeof"; return text_group_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, text_group_typeof(obj); }\nfunction text_group_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction text_group_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? text_group_ownKeys(Object(source), !0).forEach(function (key) { text_group_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : text_group_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction text_group_defineProperty(obj, key, value) { key = text_group_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction text_group_slicedToArray(arr, i) { return text_group_arrayWithHoles(arr) || text_group_iterableToArrayLimit(arr, i) || text_group_unsupportedIterableToArray(arr, i) || text_group_nonIterableRest(); }\nfunction text_group_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction text_group_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction text_group_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction text_group_toConsumableArray(arr) { return text_group_arrayWithoutHoles(arr) || text_group_iterableToArray(arr) || text_group_unsupportedIterableToArray(arr) || text_group_nonIterableSpread(); }\nfunction text_group_nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction text_group_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return text_group_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return text_group_arrayLikeToArray(o, minLen); }\nfunction text_group_iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }\nfunction text_group_arrayWithoutHoles(arr) { if (Array.isArray(arr)) return text_group_arrayLikeToArray(arr); }\nfunction text_group_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction text_group_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction text_group_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, text_group_toPropertyKey(descriptor.key), descriptor); } }\nfunction text_group_createClass(Constructor, protoProps, staticProps) { if (protoProps) text_group_defineProperties(Constructor.prototype, protoProps); if (staticProps) text_group_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction text_group_toPropertyKey(arg) { var key = text_group_toPrimitive(arg, "string"); return text_group_typeof(key) === "symbol" ? key : String(key); }\nfunction text_group_toPrimitive(input, hint) { if (text_group_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (text_group_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction text_group_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) text_group_setPrototypeOf(subClass, superClass); }\nfunction text_group_setPrototypeOf(o, p) { text_group_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return text_group_setPrototypeOf(o, p); }\nfunction text_group_createSuper(Derived) { var hasNativeReflectConstruct = text_group_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = text_group_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = text_group_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return text_group_possibleConstructorReturn(this, result); }; }\nfunction text_group_possibleConstructorReturn(self, call) { if (call && (text_group_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return text_group_assertThisInitialized(self); }\nfunction text_group_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction text_group_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction text_group_getPrototypeOf(o) { text_group_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return text_group_getPrototypeOf(o); }\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar TextGroup = /*#__PURE__*/function (_Node) {\n  text_group_inherits(TextGroup, _Node);\n  var _super = text_group_createSuper(TextGroup);\n  function TextGroup(configs) {\n    var _this;\n    text_group_classCallCheck(this, TextGroup);\n    _this = _super.call(this, configs);\n    _this.type = \'TextGroup\';\n    _this.initStack(configs);\n    _this.initLayout(configs);\n    _this._undoredo = new UndoRedo();\n    _this._undoredo._editor = text_group_assertThisInitialized(_this);\n    _this._caret = new caret();\n    _this._range = new range();\n    _this._shadowInput = undefined;\n    _this.textColor = configs.textColor || \'transparent\';\n    _this.fontFamily = configs.fontFamily || \'-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Helvetica,Tahoma,Arial,Noto Sans,PingFang SC,Microsoft YaHei,Hiragino Sans GB,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji\';\n    _this.fontSize = configs.fontSize || \'28px\';\n    _this.fontWeight = configs.fontWeight || \'\';\n    _this.elementSpace = configs.elementSpace || 5;\n    _this.lineSpace = configs.lineSpace || 5;\n    _this.placeholder = configs.placeholder || \'请输入\';\n    _this.placeholderColor = configs.placeholderColor || \'#eee\';\n    _this.cursorColor = configs.cursorColor || \'#60CFC4\';\n    _this.textRangeColor = configs.textRangeColor || \'#4E75EC1A\';\n    _this.minWidth = configs.minWidth || 0;\n    _this.spaceHolder = {\n      enable: false\n    };\n    if (configs.spacePlaceholder) {\n      Object.assign(_this.spaceHolder, {\n        enable: true,\n        spacePlaceholder: configs.spacePlaceholder,\n        spacePlaceholderColor: configs.spacePlaceholderColor,\n        returnFont: configs.returnFont\n      });\n    }\n    _this.resolver = function () {\n      var elements = configs.resolver();\n      if (elements.length === 0 || elements[elements.length - 1].type !== \'text\') {\n        elements.push(new TextElement(\'text\', \'\'));\n      }\n      elements.forEach(function (el) {\n        if (el.type === \'text\') {\n          el.setSource(el.source, _this.spaceHolder);\n        }\n      });\n      return elements;\n    };\n\n    // this._lines = [];\n    _this._area = new Area();\n    _this._flattenTxtElem = FlattenTextElements.create(_this.resolver());\n    _this._status = {\n      editing: false,\n      dragover: false\n    };\n    _this.commands = new Map();\n    _this.registCommand(StartEditCommand);\n    _this.registCommand(EditClickCommand);\n    _this.registCommand(ShiftUpCommand);\n    _this.registCommand(ShiftDownCommand);\n    _this.registCommand(ShiftOnClickCommand);\n    _this.registCommand(Input);\n    _this.registCommand(ArrowLeftCommand);\n    _this.registCommand(ArrowRightCommand);\n    _this.registCommand(ArrowUpCommand);\n    _this.registCommand(ArrowDownCommand);\n    _this.registCommand(CtrlACommand);\n    _this.registCommand(DoubleClickCommand);\n    // this.registCommand(ReturnCommand);\n    // this.registCommand(DeleteCommand);\n    _this.registCommand(UndoCommand);\n    _this.registCommand(RedoCommand);\n    _this.registCommand(CopyCommand);\n    _this.registCommand(CutCommand);\n    _this.registCommand(PasteCommand);\n    _this._makeFunctional();\n    _this._cacheViewBox = [];\n    return _this;\n  }\n  text_group_createClass(TextGroup, [{\n    key: "currentLineHeight",\n    get: function get() {\n      return this.lineHeight || parseInt(this.fontSize);\n    }\n  }, {\n    key: "registCommand",\n    value: function registCommand(cmd) {\n      if (!this.commands.has(cmd._name)) {\n        this.commands.set(cmd._name, cmd.create(this));\n      }\n    }\n  }, {\n    key: "_makeFunctional",\n    value: function _makeFunctional() {\n      var _this2 = this;\n      this.addEventListener(\'dblclick\', function (event) {\n        if (event.currentTarget !== _this2) {\n          return;\n        }\n        event.detail.bubbles = false;\n        if (_this2._status.editing) {\n          _this2.execCommand(MOUSE_COMMANDS.DOUBLE_CLICK);\n        }\n      });\n      this.addEventListener(\'click\', function (event) {\n        if (event.currentTarget !== _this2) {\n          return;\n        }\n        event.detail.bubbles = false;\n        var commnd;\n        if (_this2._status.editing) {\n          if (_this2._status.shiftOn) {\n            commnd = MOUSE_COMMANDS.SHIFT_ON_CLICK;\n          } else {\n            commnd = MOUSE_COMMANDS.EDIT_CLICK;\n          }\n        } else {\n          commnd = MOUSE_COMMANDS.START_EDIT;\n        }\n        _this2.execCommand(commnd);\n      });\n      this.addEventListener(\'blur\', function (event) {\n        _this2._status.editing = false;\n        if (_this2._shadowInput) {\n          // this._shadowInput.releaseEventListenr();\n          _this2._shadowInput.destroy();\n          _this2._shadowInput = undefined;\n        }\n        if (_this2._belongs) {\n          _this2._jflow._render();\n        }\n        _this2.dispatchEvent(new events(\'change\', {\n          target: _this2,\n          textElements: _this2._flattenTxtElem.copy()\n        }));\n        _this2._range.disable();\n        _this2._caret.cancelAnimate();\n      });\n      this.addEventListener(\'instancePressStart\', function (event) {\n        if (_this2._status.editing && !_this2._status.shiftOn) {\n          event.detail.bubbles = false;\n          event.detail.preventDefault();\n          // event.detail.jflow.setMovingTargets(null);\n          var point = _this2._currentp;\n          var c = _this2._positionToCursorOffset(point);\n          // this._cursor = c;\n          var range = _this2._range;\n          range.setInitialRange([c.row].concat(text_group_toConsumableArray(c.column)));\n          var jflow = event.detail.jflow;\n          var moved = false;\n          var t = function (e) {\n            _this2._status.editing = false;\n            moved = true;\n            var offsetX = e.offsetX,\n              offsetY = e.offsetY;\n            var p = jflow._calculatePointBack([offsetX, offsetY]);\n            jflow._stack.checkHit(p);\n            var point = _this2._currentp;\n            var c = _this2._positionToCursorOffset(point);\n            // this._cursor = c;\n            range.setRange([c.row].concat(text_group_toConsumableArray(c.column)));\n            range.enable();\n          }.bind(_this2);\n          document.addEventListener(\'pointermove\', t);\n          document.addEventListener(\'pointerup\', function (e) {\n            document.removeEventListener(\'pointermove\', t);\n            range.setInitialRange(null);\n            if (!moved) {\n              return;\n            }\n            range.handleCaret(_this2._caret);\n            _this2._status.editing = true;\n            _this2._shadowInput.focus();\n          }, {\n            once: true\n          });\n        }\n      });\n      this.addEventListener(\'dragenter\', function () {\n        _this2.moveCaretByHitPoint();\n        _this2._status.dragover = true;\n      });\n      this.addEventListener(\'dragover\', function () {\n        _this2.moveCaretByHitPoint();\n      });\n      this.addEventListener(\'dragleave\', function () {\n        _this2._status.dragover = false;\n      });\n      var onDrop = function (event) {\n        if (!_this2._status.dragover) {\n          return;\n        }\n        event.detail.bubbles = false;\n        _this2._status.dragover = false;\n        var caret = _this2._caret;\n        var row = caret.getRow();\n        var column = caret.getColumn();\n        var line = _this2._area.get(row);\n        var _column = text_group_slicedToArray(column, 2),\n          elemidx = _column[0],\n          offset = _column[1];\n        var element = line.get(elemidx);\n        var preElem = line.get(elemidx - 1);\n        var flattenTxtElem = _this2._flattenTxtElem;\n        var idx = flattenTxtElem.findIndex(element);\n        if (element.type !== \'text\' && (preElem === null || preElem === void 0 ? void 0 : preElem.type) === \'text\') {\n          offset = preElem.source.length;\n          idx = flattenTxtElem.findIndex(preElem);\n        }\n        var lastLength = flattenTxtElem.length();\n        _this2.dispatchEvent(new events(\'insert\', text_group_objectSpread(text_group_objectSpread({}, event.detail), {}, {\n          type: event.type,\n          textElements: flattenTxtElem.copy(),\n          idx: idx,\n          offset: offset\n        })));\n        // after insert\n        flattenTxtElem = _this2._flattenTxtElem;\n        if (_this2._status.editing) {\n          if (flattenTxtElem.length() > lastLength) {\n            caret.setColumn([elemidx + flattenTxtElem.length() - lastLength, 0]);\n          }\n          _this2._shadowInput.focus();\n        }\n        if (_this2._status.editing) {\n          _this2._caret.refresh();\n        }\n        _this2.syncShadowInputPosition();\n        _this2._range.disable();\n      }.bind(this);\n      this.addEventListener(\'pressEnd\', onDrop);\n      this.addEventListener(\'drop\', onDrop);\n    }\n  }, {\n    key: "toggleShift",\n    value: function toggleShift(val) {\n      this._status.shiftOn = val;\n    }\n  }, {\n    key: "execCommand",\n    value: function execCommand(kind, data) {\n      var cmd = this.commands.get(kind);\n      cmd.exec(data);\n    }\n  }, {\n    key: "createShadowInput",\n    value: function createShadowInput() {\n      var _this3 = this;\n      var jflow = this._jflow;\n      var shadowInput = new shadow_input(jflow.DOMwrapper);\n      var _a = function _a(e) {\n        var kind = e.detail.kind;\n        var data = e.detail.data;\n        _this3.execCommand(kind, data);\n      };\n      var _b = function _b(e) {\n        var kind = e.detail.kind;\n        var data = e.detail.data;\n        var cmd = _this3.commands.get(EDITOR_EVENTS.INPUT);\n        cmd.exec(kind, data);\n      };\n      shadowInput.addEventListener(EDITOR_EVENTS.CONTROL_CMD, _a);\n      shadowInput.addEventListener(EDITOR_EVENTS.INPUT, _b);\n      shadowInput.removeLisenter = function () {\n        shadowInput.removeEventListener(EDITOR_EVENTS.CONTROL_CMD, _a);\n        shadowInput.removeEventListener(EDITOR_EVENTS.INPUT, _b);\n        shadowInput.removeLisenter = null;\n      };\n      this._shadowInput = shadowInput;\n      this._status.editing = true;\n      jflow.setFocusInstance(this);\n    }\n  }, {\n    key: "moveCaretByHitPoint",\n    value: function moveCaretByHitPoint() {\n      var point = this._currentp;\n      var caret = this._caret;\n      var _this$_positionToCurs = this._positionToCursorOffset(point),\n        row = _this$_positionToCurs.row,\n        column = _this$_positionToCurs.column;\n      caret.setRow(row);\n      caret.setColumn(column);\n    }\n  }, {\n    key: "refresh",\n    value: function refresh() {\n      this.recalculateUp();\n      this.syncShadowInputPosition();\n      this._jflow._render();\n    }\n  }, {\n    key: "refreshTextElements",\n    value: function refreshTextElements() {\n      this._flattenTxtElem = FlattenTextElements.create(this.resolver());\n    }\n  }, {\n    key: "_positionToCursorOffset",\n    value: function _positionToCursorOffset(point) {\n      var _point = text_group_slicedToArray(point, 2),\n        x = _point[0],\n        y = _point[1];\n      // const [x0, y0] = this.anchor;\n      var area = this._area;\n      var w = this.width / 2;\n      var h = this.height / 2;\n      var offsetX = x + w;\n      var offsetY = y + h;\n      var row = area.getLineAbove(offsetY);\n      var currLine = area.get(row);\n      var column = currLine.getColumnNearest(offsetX, this.elementSpace, this.fontSize, this.fontFamily, this);\n      return {\n        row: row,\n        column: column\n      };\n    }\n  }, {\n    key: "_caretToPosition",\n    value: function _caretToPosition() {\n      var _this4 = this;\n      var row = this._caret.getRow();\n      var column = this._caret.getColumn();\n      var line = this._area.get(row);\n      var _column2 = text_group_slicedToArray(column, 2),\n        elemidx = _column2[0],\n        offset = _column2[1];\n      var meta = line.get(elemidx);\n      var idx = this._flattenTxtElem.findIndex(meta);\n      var preElem = this._flattenTxtElem.get(idx - 1);\n      var cw;\n      var c_len = this.currentLineHeight / 2;\n      if (meta.type === \'text\') {\n        var c = meta.getRenderSource(this.spaceHolder).substring(0, offset);\n        requestCacheCanvas(function (ctx) {\n          ctx.beginPath();\n          ctx.font = "".concat(_this4.fontSize, " ").concat(_this4.fontFamily);\n          cw = meta.anchorX - meta.width / 2 + ctx.measureText(c).width;\n        });\n      } else {\n        cw = meta.anchorX - meta.width / 2;\n        c_len = Math.max(c_len, meta.height / 2);\n      }\n      if (offset === 0 && preElem && preElem.type !== \'text\') {\n        c_len = Math.max(c_len, preElem.height / 2);\n      }\n      return [cw, c_len, line.anchorY, preElem, meta];\n    }\n  }, {\n    key: "syncShadowInputPosition",\n    value: function syncShadowInputPosition() {\n      if (this._status.editing) {\n        var _this$_caretToPositio = this._caretToPosition(),\n          _this$_caretToPositio2 = text_group_slicedToArray(_this$_caretToPositio, 3),\n          cw = _this$_caretToPositio2[0],\n          c_len = _this$_caretToPositio2[1],\n          anchorY = _this$_caretToPositio2[2];\n        var point = this.calculateToRealWorld([cw, anchorY + c_len]);\n        var canvasMeta = this._jflow.canvasMeta;\n        var px = Math.min(canvasMeta.actual_width - 120, point[0]);\n        // return [px, point[1]];\n        this._shadowInput.syncPosition(px, point[1]);\n        this._shadowInput.focus();\n      }\n    }\n  }, {\n    key: "render",\n    value: function render(ctx) {\n      var _this5 = this;\n      ctx.save();\n      if (this._isMoving) {\n        ctx.globalAlpha = 0.6;\n      } else if (this.opacity !== 1) {\n        ctx.globalAlpha = this.opacity;\n      }\n      var _this$anchor = text_group_slicedToArray(this.anchor, 2),\n        cx = _this$anchor[0],\n        cy = _this$anchor[1];\n      var jflow = this._jflow;\n      var area = this._area;\n      ctx.translate(cx, cy);\n      // ctx.beginPath();\n      // ctx.rect(-width/2, -height/2, width, height);\n      // ctx.stroke();\n      var flattenTxtElem = this._flattenTxtElem;\n      if (flattenTxtElem.isEmpty()) {\n        ctx.beginPath();\n        ctx.font = "".concat(this.fontWeight, " ").concat(this.fontSize, " ").concat(this.fontFamily);\n        ctx.textAlign = \'center\';\n        ctx.textBaseline = \'middle\';\n        ctx.fillStyle = this.placeholderColor;\n        ctx.fillText(this.placeholder, 0, 0);\n        this._randerCursor(ctx);\n        ctx.translate(-cx, -cy);\n        ctx.restore();\n        return;\n      }\n      ctx.beginPath();\n      ctx.font = "".concat(this.fontWeight, " ").concat(this.fontSize, " ").concat(this.fontFamily);\n      ctx.textAlign = \'center\';\n      ctx.textBaseline = \'middle\';\n      ctx.fillStyle = this.textColor;\n      area.forEach(function (line) {\n        line.forEach(function (el) {\n          if (el.type === \'text\') {\n            el.render(ctx, _this5.spaceHolder, _this5.textColor);\n            // ctx.fillText(el.source, el.anchorX, el.anchorY)\n          }\n        });\n      });\n\n      flattenTxtElem.forEach(function (elem) {\n        if (elem.type !== \'text\') {\n          var instance = jflow.getRenderNodeBySource(elem.source);\n          if (instance && instance.visible) {\n            ctx.save();\n            instance.render(ctx);\n            ctx.restore();\n          }\n        }\n      });\n      this._randerCursor(ctx);\n      this._renderRange(ctx);\n      ctx.translate(-cx, -cy);\n      ctx.restore();\n    }\n  }, {\n    key: "_randerCursor",\n    value: function _randerCursor(ctx) {\n      if (this._caret.isShow() && (this._status.editing || this._status.dragover)) {\n        var _this$_caretToPositio3 = this._caretToPosition(),\n          _this$_caretToPositio4 = text_group_slicedToArray(_this$_caretToPositio3, 3),\n          cw = _this$_caretToPositio4[0],\n          c_len = _this$_caretToPositio4[1],\n          anchorY = _this$_caretToPositio4[2];\n        ctx.beginPath();\n        ctx.moveTo(cw, anchorY - c_len);\n        ctx.lineTo(cw, anchorY + c_len);\n        ctx.lineWidth = 2;\n        ctx.strokeStyle = this.cursorColor;\n        ctx.stroke();\n      }\n    }\n  }, {\n    key: "_renderRange",\n    value: function _renderRange(ctx) {\n      var range = this._range;\n      if (range.isEnable()) {\n        var area = this._area;\n        var textRangeColor = this.textRangeColor;\n        var blockheight = this.height;\n        var blockwidth = this.width;\n        var lineSpace = this.lineSpace;\n        var _range$getRangeFrom = range.getRangeFrom(),\n          _range$getRangeFrom2 = text_group_slicedToArray(_range$getRangeFrom, 3),\n          r_f = _range$getRangeFrom2[0],\n          idx_f = _range$getRangeFrom2[1],\n          offset_f = _range$getRangeFrom2[2];\n        var _range$getRangeTo = range.getRangeTo(),\n          _range$getRangeTo2 = text_group_slicedToArray(_range$getRangeTo, 3),\n          r_t = _range$getRangeTo2[0],\n          idx_t = _range$getRangeTo2[1],\n          offset_t = _range$getRangeTo2[2];\n        if (r_f === r_t) {\n          if (idx_f === idx_t && offset_f == offset_t) {\n            return;\n          }\n          var line = area.get(r_f);\n          var space = r_f === area.length() - 1 ? 0 : lineSpace;\n          var lty = line.reduceHeight - space - line.height - blockheight / 2;\n          var height = line.height;\n          var x1 = this._measureElementOffsetX(line.get(idx_f), offset_f, ctx);\n          var x2 = this._measureElementOffsetX(line.get(idx_t), offset_t, ctx);\n          ctx.beginPath();\n          ctx.rect(x1, lty, x2 - x1, height);\n          ctx.fillStyle = textRangeColor;\n          ctx.fill();\n        } else {\n          var _r = r_f;\n          var beginning = true;\n          while (_r <= r_t) {\n            var _line = area.get(_r);\n            var _space = _r === area.length() - 1 ? 0 : lineSpace;\n            var _lty = _line.reduceHeight - _space - _line.height - blockheight / 2;\n            var _height = _line.height;\n            if (beginning) {\n              var elem = _line.get(idx_f);\n              var x = this._measureElementOffsetX(elem, offset_f, ctx);\n              var lastElem = _line.tail();\n              var t = lastElem.anchorX + lastElem.width / 2;\n              ctx.beginPath();\n              ctx.rect(x, _lty, t - x, _height);\n              ctx.fillStyle = textRangeColor;\n              ctx.fill();\n            } else if (_r === r_t) {\n              var _elem = _line.get(idx_t);\n              var _x2 = this._measureElementOffsetX(_elem, offset_t, ctx);\n              ctx.beginPath();\n              ctx.rect(-blockwidth / 2, _lty, _elem.reduceWidth + (_x2 - _elem.anchorX + _elem.width / 2), _height);\n              ctx.fillStyle = textRangeColor;\n              ctx.fill();\n            } else {\n              ctx.beginPath();\n              ctx.rect(-blockwidth / 2, _lty, _line.width, _height);\n              ctx.fillStyle = textRangeColor;\n              ctx.fill();\n            }\n            beginning = false;\n            _r++;\n          }\n        }\n      }\n    }\n  }, {\n    key: "_measureElementOffsetX",\n    value: function _measureElementOffsetX(element, offset, ctx) {\n      if (element.type !== \'text\' || offset === 0) {\n        return element.anchorX - element.width / 2;\n      }\n      return element.anchorX - element.width / 2 + ctx.measureText(element.getRenderSource(this.spaceHolder).substring(0, offset)).width;\n    }\n  }, {\n    key: "measureTextWidth",\n    value: function measureTextWidth(content) {\n      var _this6 = this;\n      var t;\n      requestCacheCanvas(function (ctx) {\n        ctx.font = "".concat(_this6.fontSize, " ").concat(_this6.fontFamily);\n        t = ctx.measureText(content).width;\n      });\n      return t;\n    }\n  }, {\n    key: "getBoundingDimension",\n    value: function getBoundingDimension() {\n      return {\n        width: this.width,\n        height: this.height\n      };\n    }\n  }, {\n    key: "getBoundingRect",\n    value: function getBoundingRect() {\n      var anchor = this.anchor;\n      var w = this.width / 2;\n      var h = this.height / 2;\n      var ltx = anchor[0] - w;\n      var lty = anchor[1] - h;\n      var rbx = anchor[0] + w;\n      var rby = anchor[1] + h;\n      var br = this._boundingrect;\n      br[0] = ltx;\n      br[1] = lty;\n      br[2] = rbx;\n      br[3] = rby;\n      return br;\n    }\n  }, {\n    key: "_getViewBox",\n    value: function _getViewBox() {\n      var belongs_vbox = this._belongs.getCacheViewBox();\n      var cacheViewBox = this._cacheViewBox;\n      this._calculatePointBackWithPoint(belongs_vbox[0], belongs_vbox[1], cacheViewBox, 0, 1);\n      this._calculatePointBackWithPoint(belongs_vbox[2], belongs_vbox[3], cacheViewBox, 2, 3);\n      return this._cacheViewBox;\n    }\n  }, {\n    key: "getCacheViewBox",\n    value: function getCacheViewBox() {\n      return this._cacheViewBox;\n    }\n  }, {\n    key: "calculateToCoordination",\n    value: function calculateToCoordination(point) {\n      var _point2 = text_group_slicedToArray(point, 2),\n        gx = _point2[0],\n        gy = _point2[1];\n      var _this$anchor2 = text_group_slicedToArray(this.anchor, 2),\n        cx = _this$anchor2[0],\n        cy = _this$anchor2[1];\n      // const p = [cx + anchor[0] - spanH, cy + anchor[1] - spanV];\n      var p = [gx + cx, gy + cy];\n      if (this._belongs && this._belongs.calculateToCoordination) {\n        return this._belongs.calculateToCoordination(p);\n      } else {\n        return p;\n      }\n    }\n  }, {\n    key: "calculateToRealWorld",\n    value: function calculateToRealWorld(point) {\n      var _point3 = text_group_slicedToArray(point, 2),\n        gx = _point3[0],\n        gy = _point3[1];\n      var _this$anchor3 = text_group_slicedToArray(this.anchor, 2),\n        cx = _this$anchor3[0],\n        cy = _this$anchor3[1];\n      var p = [gx + cx, gy + cy];\n      if (this._belongs && this._belongs.calculateToRealWorld) {\n        return this._belongs.calculateToRealWorld(p);\n      }\n    }\n  }, {\n    key: "calculateToRealWorldWithPointer",\n    value: function calculateToRealWorldWithPointer(outpoint, inpoint) {\n      outpoint[0] = inpoint[0] + this.anchor[0];\n      outpoint[1] = inpoint[1] + this.anchor[1];\n      if (this._belongs && this._belongs.calculateToRealWorldWithPointer) {\n        return this._belongs.calculateToRealWorldWithPointer(outpoint, outpoint);\n      }\n    }\n  }, {\n    key: "_calculatePointBack",\n    value: function _calculatePointBack(point) {\n      var _point4 = text_group_slicedToArray(point, 2),\n        gx = _point4[0],\n        gy = _point4[1];\n      var _this$anchor4 = text_group_slicedToArray(this.anchor, 2),\n        cx = _this$anchor4[0],\n        cy = _this$anchor4[1];\n      var p = [gx - cx, gy - cy];\n      return p;\n    }\n  }, {\n    key: "_calculatePointBackWithPoint",\n    value: function _calculatePointBackWithPoint(a, b, arr, idx1, idx2) {\n      arr[idx1] = a - this.anchor[0];\n      arr[idx2] = b - this.anchor[1];\n    }\n  }, {\n    key: "isHit",\n    value: function isHit(point, condition) {\n      var p = this._calculatePointBack(point);\n      var jflow = this._jflow;\n      this._currentp = p; // 暂存，为了后续计算别的位置\n      var validInstance = [];\n      var flattenTxtElem = this._flattenTxtElem;\n      flattenTxtElem.forEach(function (elem) {\n        if (elem.type !== \'text\') {\n          var instance = jflow.getRenderNodeBySource(elem.source);\n          if (instance.visible) {\n            validInstance.push(instance);\n          }\n        }\n      });\n      var target = this._stack.checkHit(p, condition, function (i) {\n        return validInstance.includes(i);\n      });\n      if (target) return target;\n      var anchor = this.anchor;\n      var w = this.width / 2;\n      var h = this.height / 2;\n      return point[0] > anchor[0] - w && point[0] < anchor[0] + w && point[1] > anchor[1] - h && point[1] < anchor[1] + h;\n    }\n  }, {\n    key: "clone",\n    value: function clone() {\n      var _this7 = this;\n      var t = new shadow_cache({\n        width: this.width,\n        height: this.height,\n        cache: function cache(ctx) {\n          var _this7$anchor = text_group_slicedToArray(_this7.anchor, 2),\n            cx = _this7$anchor[0],\n            cy = _this7$anchor[1];\n          ctx.translate(-cx + _this7.width / 2, -cy + _this7.height / 2);\n          _this7.render(ctx);\n        }\n      });\n      return t;\n    }\n  }, {\n    key: "destroy",\n    value: function destroy() {\n      if (this._jflow._focus.instance === this) {\n        this._jflow.blur();\n      }\n    }\n  }]);\n  return TextGroup;\n}(node);\nObject.assign(TextGroup.prototype, stackMixin);\nObject.assign(TextGroup.prototype, layoutMixin);\nObject.assign(TextGroup.prototype, {\n  // 屏蔽这两个方法，只根据reflow重算\n  _getBoundingGroupRect: function _getBoundingGroupRect() {},\n  resetChildrenPosition: function resetChildrenPosition() {},\n  reflow: function reflow() {\n    var _this8 = this;\n    var lineHeight = this.currentLineHeight;\n    var flattenTxtElem = this._flattenTxtElem;\n    var area = this._area;\n    if (flattenTxtElem.isEmpty()) {\n      var width = 0;\n      var t = flattenTxtElem.get(0);\n      requestCacheCanvas(function (ctx) {\n        ctx.font = "".concat(_this8.fontSize, " ").concat(_this8.fontFamily);\n        width = ctx.measureText(_this8.placeholder).width;\n      });\n      var _line2 = area.truncate({\n        height: lineHeight,\n        reduceHeight: lineHeight\n      });\n      _line2.insert(0, t);\n      Object.assign(t, {\n        anchorX: -width / 2,\n        height: lineHeight,\n        isTail: true\n      });\n      this.width = width;\n      this.height = lineHeight;\n      return;\n    }\n    var jflow = this._jflow;\n    var spaceHolder = this.spaceHolder;\n    requestCacheCanvas(function (ctx) {\n      ctx.font = "".concat(_this8.fontSize, " ").concat(_this8.fontFamily);\n      flattenTxtElem.forEach(function (element) {\n        if (element.type === \'text\' && element.dirty) {\n          element.preCalculateText(ctx, spaceHolder);\n        }\n      });\n    });\n    var nextArea = new Area();\n    nextArea.truncate({\n      height: lineHeight\n    });\n    var line = nextArea.get(0);\n    var allHeight = 0;\n    var allWidth = 0;\n    var lastElem = null;\n    var lineSpace = this.lineSpace;\n    var elementSpace = this.elementSpace;\n    flattenTxtElem.forEach(function (element) {\n      line.push(element);\n      element.reduceWidth = line.width;\n      if (element.type === \'text\') {\n        element.height = lineHeight;\n        line.width += element.width;\n        if (element.needWrap) {\n          allHeight += line.height + lineSpace;\n          line.reduceHeight = allHeight;\n          allWidth = Math.max(line.width, allWidth);\n          line = Line.create({\n            height: lineHeight\n          });\n          nextArea.push(line);\n        }\n      } else {\n        var node = jflow.getRenderNodeBySource(element.source);\n        element.height = node.height;\n        line.height = Math.max(line.height, node.height);\n        var margin = !lastElem || lastElem.type === \'text\' ? elementSpace * 2 : elementSpace;\n        line.width += node.width + margin;\n      }\n      lastElem = element;\n    });\n    flattenTxtElem.tail().isTail = true;\n    allHeight += line.height;\n    line.reduceHeight = allHeight;\n    allWidth = Math.max(this.minWidth, Math.max(line.width, allWidth));\n    var hh = allHeight / 2;\n    var hw = allWidth / 2;\n    var ty = -hh;\n    var lastReduceY = 0;\n    nextArea.forEach(function (l) {\n      var height = l.height,\n        reduceHeight = l.reduceHeight;\n      var anchorY = ty + lastReduceY + height / 2;\n      l.anchorY = anchorY;\n      var reduceX = -hw;\n      var lastel = null;\n      l.forEach(function (el) {\n        if (el.type === \'text\') {\n          el.anchorY = anchorY;\n          el.anchorX = reduceX + el.width / 2;\n          reduceX += el.width;\n        } else {\n          var renderNode = jflow.getRenderNodeBySource(el.source);\n          var doubleMargin = !lastel || lastel.type === \'text\';\n          var margin = doubleMargin ? elementSpace * 2 : elementSpace;\n          el.width = renderNode.width;\n          el.anchorY = anchorY;\n          el.anchorX = reduceX + el.width / 2 + (doubleMargin ? margin / 2 : 0);\n          renderNode.anchor = [el.anchorX, el.anchorY];\n          reduceX += el.width + margin;\n        }\n        lastel = el;\n      });\n      lastReduceY = reduceHeight;\n    });\n    this._area = nextArea;\n    this.width = allWidth;\n    this.height = allHeight;\n  },\n  doRecalculate: function doRecalculate() {\n    if (this.__mounted__) {\n      this.recalculateUp();\n    } else {\n      this.recalculate();\n      this.__mounted__ = true;\n    }\n  }\n});\n/* harmony default export */ const text_group = (TextGroup);\n;// CONCATENATED MODULE: ./src/core/instance/node-placeholder.js\nfunction node_placeholder_typeof(obj) { "@babel/helpers - typeof"; return node_placeholder_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, node_placeholder_typeof(obj); }\nfunction node_placeholder_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, node_placeholder_toPropertyKey(descriptor.key), descriptor); } }\nfunction node_placeholder_createClass(Constructor, protoProps, staticProps) { if (protoProps) node_placeholder_defineProperties(Constructor.prototype, protoProps); if (staticProps) node_placeholder_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction node_placeholder_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction node_placeholder_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) node_placeholder_setPrototypeOf(subClass, superClass); }\nfunction node_placeholder_setPrototypeOf(o, p) { node_placeholder_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return node_placeholder_setPrototypeOf(o, p); }\nfunction node_placeholder_createSuper(Derived) { var hasNativeReflectConstruct = node_placeholder_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = node_placeholder_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = node_placeholder_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return node_placeholder_possibleConstructorReturn(this, result); }; }\nfunction node_placeholder_possibleConstructorReturn(self, call) { if (call && (node_placeholder_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return node_placeholder_assertThisInitialized(self); }\nfunction node_placeholder_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction node_placeholder_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction node_placeholder_getPrototypeOf(o) { node_placeholder_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return node_placeholder_getPrototypeOf(o); }\nfunction node_placeholder_defineProperty(obj, key, value) { key = node_placeholder_toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction node_placeholder_toPropertyKey(arg) { var key = node_placeholder_toPrimitive(arg, "string"); return node_placeholder_typeof(key) === "symbol" ? key : String(key); }\nfunction node_placeholder_toPrimitive(input, hint) { if (node_placeholder_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (node_placeholder_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\n\n\n// export const PLACEHOLDER_SYMBOL = Symbol(\'PLACEHOLDER_SYMBOL\');\n\nvar NodePlaceholder = /*#__PURE__*/function (_Node) {\n  node_placeholder_inherits(NodePlaceholder, _Node);\n  var _super = node_placeholder_createSuper(NodePlaceholder);\n  function NodePlaceholder() {\n    var _this;\n    node_placeholder_classCallCheck(this, NodePlaceholder);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = _super.call.apply(_super, [this].concat(args));\n    node_placeholder_defineProperty(node_placeholder_assertThisInitialized(_this), "type", \'NODE_PLACEHOLDER\');\n    return _this;\n  }\n  return node_placeholder_createClass(NodePlaceholder);\n}(node);\n;// CONCATENATED MODULE: ./src/core/flow/index.js\nfunction flow_typeof(obj) { "@babel/helpers - typeof"; return flow_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, flow_typeof(obj); }\nfunction flow_slicedToArray(arr, i) { return flow_arrayWithHoles(arr) || flow_iterableToArrayLimit(arr, i) || flow_unsupportedIterableToArray(arr, i) || flow_nonIterableRest(); }\nfunction flow_nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }\nfunction flow_unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return flow_arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return flow_arrayLikeToArray(o, minLen); }\nfunction flow_arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction flow_iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }\nfunction flow_arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\nfunction flow_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\nfunction flow_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, flow_toPropertyKey(descriptor.key), descriptor); } }\nfunction flow_createClass(Constructor, protoProps, staticProps) { if (protoProps) flow_defineProperties(Constructor.prototype, protoProps); if (staticProps) flow_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }\nfunction flow_toPropertyKey(arg) { var key = flow_toPrimitive(arg, "string"); return flow_typeof(key) === "symbol" ? key : String(key); }\nfunction flow_toPrimitive(input, hint) { if (flow_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (flow_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }\nfunction flow_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) flow_setPrototypeOf(subClass, superClass); }\nfunction flow_createSuper(Derived) { var hasNativeReflectConstruct = flow_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = flow_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = flow_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return flow_possibleConstructorReturn(this, result); }; }\nfunction flow_possibleConstructorReturn(self, call) { if (call && (flow_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return flow_assertThisInitialized(self); }\nfunction flow_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\nfunction flow_wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; flow_wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !flow_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return flow_construct(Class, arguments, flow_getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return flow_setPrototypeOf(Wrapper, Class); }; return flow_wrapNativeSuper(Class); }\nfunction flow_construct(Parent, args, Class) { if (flow_isNativeReflectConstruct()) { flow_construct = Reflect.construct.bind(); } else { flow_construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) flow_setPrototypeOf(instance, Class.prototype); return instance; }; } return flow_construct.apply(null, arguments); }\nfunction flow_isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction flow_isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }\nfunction flow_setPrototypeOf(o, p) { flow_setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return flow_setPrototypeOf(o, p); }\nfunction flow_getPrototypeOf(o) { flow_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return flow_getPrototypeOf(o); }\n\n\n\n\n\n\n\n\n\n\n\n\n// import { setUniqueId, getUniqueId } from \'../utils/functions\';\n\n\n\n\n\n\n\n\n\n\n// import { createInputTextStyle } from \'../instance/text\';\n// createInputTextStyle();\n/**\n * @funtion setInitialPosition\n * @param {Number} RealboxX - 内容映射到canvas上的 X\n * @param {Number} RealboxY - 内容映射到canvas上的 Y \n * @param {Number} RealboxW - 内容映射到canvas上的宽度\n * @param {Number} RealboxH - 内容映射到canvas上的高度 \n * @param {Number} CanvasWidth  - 视窗宽度\n * @param {Number} CanvasHeight  - 视窗高度\n * @return {Object} - 初始位置 { x, y }\n */\n\n/**\n * @funtion linkGen\n * @param {Node} from - 出发绘图节点\n * @param {Node} to - 临时节点，当前鼠标指的地方\n * @return {BaseeLink} - 连线对象\n */\n\n/** \n * @class Group\n * @classdesc 矩形组单元 由 {@link GroupFactory} 通过 {@link Rectangle} 生成\n * @groupfrom Rectangle\n * @augments GroupTemplate\n * @augments Rectangle\n * @param {(Rectangle~RectangleConfigs|GroupTemplate~GroupConfigs)} configs - 配置\n */\nvar Group = groupFactory(rectangle);\n/** \n * @class CapsuleGroup\n * @classdesc 胶囊组单元 由 {@link GroupFactory} 通过 {@link Capsule} 生成\n * @groupfrom Capsule\n * @augments GroupTemplate\n * @augments Capsule\n * @param {(Capsule~CapsuleConfigs|GroupTemplate~GroupConfigs)} configs - 配置\n */\nvar CapsuleGroup = groupFactory(capsule);\n/** \n * @class RhombusGroup\n * @classdesc 菱形组单元 由 {@link GroupFactory} 通过 {@link Rhombus} 生成\n * @augments GroupTemplate\n * @augments Rhombus\n * @groupfrom Rhombus\n * @param {(Rhombus~RhombusConfigs|GroupTemplate~GroupConfigs)} configs - 配置\n */\nvar RhombusGroup = groupFactory(rhombus);\n/** \n * @class DiamondGroup\n * @classdesc 钻石形组单元 由 {@link GroupFactory} 通过 {@link Diamond} 生成\n * @groupfrom Diamond\n * @augments GroupTemplate\n * @augments Diamond\n * @param {(Diamond~DiamondConfigs|GroupTemplate~GroupConfigs)} configs - 配置\n */\nvar DiamondGroup = groupFactory(diamond, {\n  shapeShift: function shapeShift(width, height) {\n    return [width + height * 0.28865, height];\n  }\n});\n/** \n * @class DiamondVerticalGroup\n * @classdesc 垂直钻石形组单元 由 {@link GroupFactory} 通过 {@link DiamondVertical} 生成\n * @groupfrom DiamondVertical\n * @augments GroupTemplate\n * @augments DiamondVertical\n * @param {(Diamond~DiamondConfigs|GroupTemplate~GroupConfigs)} configs - 配置\n */\nvar DiamondVerticalGroup = groupFactory(diamond_vertical, {\n  shapeShift: function shapeShift(width, height) {\n    return [width, height + width * 0.5773];\n  }\n});\n/** \n * @class CapsuleVerticalGroup\n * @classdesc 垂直钻石形组单元 由 {@link GroupFactory} 通过 {@link CapsuleVertical} 生成\n * @groupfrom CapsuleVertical\n * @augments GroupTemplate\n * @augments CapsuleVertical\n * @param {(Capsule~CapsuleConfigs|GroupTemplate~GroupConfigs)} configs - 配置\n */\nvar CapsuleVerticalGroup = groupFactory(capsule_vertical);\nvar PointGroup = groupFactory(point, {\n  shapeShift: function shapeShift(width, height, p) {\n    var r = Math.ceil(Math.sqrt(width * width + height * height) / 2);\n    p.radius = r;\n    var w = r * 2;\n    return [w, w];\n  }\n});\n\n/**\n * @typedef JFlow~JFlowConfigs\n * @type {object}\n * @property {Boolean} allowDrop      - 是否允许 dragdrop\n * @property {Number} maxZoom         - 最大缩放\n * @property {Number} minZoom         - 最小缩放\n * @property {number} initialZoom     - 初始缩放比\n * @property {EventAdapter~pluginDef} eventAdapter\n */\n\n/**\n * @typedef {JFlow~JFlowConfigs | LayoutMixin~LayoutConfigs} JFlow~JFlowLayoutConfigs\n */\n/** \n * JFlow 对象\n * JFlow 是 canvas 上面封装的一个顶层对象，具有处理事件和绘制的功能\n * @constructor JFlow\n * @param {JFlow~JFlowLayoutConfigs} configs - 配置项\n * @mixes LayoutMixin\n * @mixes StackMixin\n * @mixes MessageMixin\n */\nvar JFlow = /*#__PURE__*/function (_EventTarget) {\n  flow_inherits(JFlow, _EventTarget);\n  var _super = flow_createSuper(JFlow);\n  function JFlow(configs) {\n    var _this;\n    flow_classCallCheck(this, JFlow);\n    _this = _super.call(this);\n    _this.uniqueName = \'jflow\';\n    /**\n     * @member {EventAdapter} eventAdapter    - eventAdapter 对象\n     **/\n    _this.eventAdapter = new adapter(configs.eventAdapter);\n    _this.initNodeWeakMap();\n    _this.initAnime();\n    _this.initStack(configs);\n    _this.initLayout(configs);\n    /** @member {Context2d}     - Context2d 对象 */\n    _this.ctx = null;\n    /** @member {Element}       - canvas 元素 */\n    _this.canvas = null;\n    /** @member {number}       - 设备DPR */\n    _this.dpr = 1;\n    /** @member {number}       - 内边距 */\n    _this.padding = 20;\n    _this.position = null;\n    /** @member {number}     - 缩放 */\n    _this.scale = null;\n    /** @member {number}     - 初始缩放 */\n    _this.initialZoom = configs.initialZoom;\n    /** @member {setInitialPosition} - 初始位置计算 */\n    _this.initialPosition = configs.setInitialPosition;\n    /** @member {number}     - 最大缩放 */\n    _this.maxZoom = configs.maxZoom || 3;\n    /** @member {number}     - 最小缩放 */\n    _this.minZoom = configs.minZoom || .5;\n    _this.NodeRenderTop = !!configs.NodeRenderTop;\n    _this.worldMargin = configs.worldMargin;\n    _this.draggingbehavior = Object.assign({\n      panInBorder: {\n        enable: true,\n        padding: 20,\n        deltamovement: 8,\n        allowMovingTargetInPan: true\n      }\n    }, configs.draggingbehavior || {});\n    _this.scrollBarBehavior = Object.assign({\n      enable: true\n    }, configs.scrollBarBehavior || {});\n    // this.initScale = 1;\n    // this.initPosition = null\n    _this.offeset = null;\n    _this._lastState = {\n      x: null,\n      y: null,\n      dragging: false,\n      processing: false\n    };\n    _this._lastDragState = {\n      target: null,\n      targetLink: null,\n      processing: false\n    };\n    _this._target = {\n      instance: null,\n      link: null,\n      moving: null,\n      isInstanceDirty: false,\n      isLinkDirty: false,\n      // isMovingDirty: false, \n      cache: {\n        stack: null,\n        belongs: null,\n        point: null\n      },\n      meta: {\n        x: undefined,\n        y: undefined,\n        initialX: undefined,\n        initialY: undefined\n      },\n      status: {\n        dragovering: false,\n        dragging: false,\n        processing: false,\n        movingState: false\n      }\n    };\n    _this._focus = {\n      instance: null\n    };\n    _this._dragOverTarget = null;\n    // this.lock = configs.lock;\n\n    _this.allowDrop = configs.allowDrop;\n    // 临时绘制的对象\n    _this._tempNode = null;\n    _this._tempLink = null;\n    _this.mode = JFLOW_MODE.DEFAULT;\n    _this._allowMovingTarget = true;\n    _this.canvasMeta = {};\n    _this._cacheViewBox = [];\n    _this.__mounted__ = false;\n\n    // this._allowZoom = true;\n    return _this;\n  }\n\n  // allowZoom() {\n  //     this._allowZoom = true;\n  // }\n\n  // abandonZoom() {\n  //     this._allowZoom = false;\n  // }\n  /**\n   * 设置当前拖动的 JFlow 对象\n   * @param {Object[]} targets - 具有 anchor 属性的对象\n   */\n  flow_createClass(JFlow, [{\n    key: "setMovingTargets",\n    value: function setMovingTargets(targets) {\n      Object.assign(this._target, {\n        moving: targets\n      });\n    }\n\n    /**\n     * 设置当前拖动的 JFlow 对象\n     * @param {Instance} instance - JFlow 对象\n     */\n  }, {\n    key: "setTempDraggingInstance",\n    value: function setTempDraggingInstance(instance) {\n      instance._belongs = this;\n      this._tempNode = instance;\n      Object.assign(this._target, {\n        moving: [this._tempNode],\n        dragging: true\n      });\n    }\n\n    /**\n     * 取消当前拖动的 JFlow 对象\n     * @return {number[]} point - JFlow 坐标\n     */\n  }, {\n    key: "removeTempDraggingInstance",\n    value: function removeTempDraggingInstance() {\n      if (this._tempNode) {\n        // this.removeFromStack(this._tempNode);\n        var anchor = this._tempNode.anchor;\n        this._tempNode = null;\n        return anchor;\n      }\n    }\n    /**\n     * 关闭默认对象拖动效果\n     */\n  }, {\n    key: "preventDefaultDragging",\n    value: function preventDefaultDragging() {\n      this._allowMovingTarget = false;\n    }\n    /**\n     * 开启默认对象拖动效果\n     */\n  }, {\n    key: "allowDefaultDragging",\n    value: function allowDefaultDragging() {\n      this._allowMovingTarget = true;\n    }\n    /**\n     * 在 Document 元素上初始化实例\n     * @param {Element} dom \n     */\n  }, {\n    key: "$mount",\n    value: function $mount(dom) {\n      var _this2 = this;\n      var _createCanvas = createCanvas(dom),\n        canvas = _createCanvas.canvas,\n        ctx = _createCanvas.ctx,\n        dpr = _createCanvas.scale,\n        c_width = _createCanvas.width,\n        c_height = _createCanvas.height,\n        raw_width = _createCanvas.raw_width,\n        raw_height = _createCanvas.raw_height,\n        left = _createCanvas.left,\n        top = _createCanvas.top;\n      this.reflow();\n      this.ctx = ctx; //new CanvasContext2d(ctx, dpr);\n      this.DOMwrapper = dom;\n      this.canvas = canvas;\n      this.canvas.setAttribute(\'data-jflow\', true);\n      this.canvas.$jflow = this;\n      this.canvasMeta = {\n        width: raw_width,\n        height: raw_height,\n        actual_width: c_width,\n        actual_height: c_height\n      };\n      this.dpr = dpr;\n      this._getBoundingGroupRect();\n      var padding = this.padding;\n      var _this$bounding_box = this.bounding_box,\n        p_width = _this$bounding_box.width,\n        p_height = _this$bounding_box.height,\n        p_x = _this$bounding_box.x,\n        p_y = _this$bounding_box.y;\n      var contentBox = {\n        x: padding,\n        y: padding,\n        width: c_width - padding * 2,\n        height: c_height - padding * 2\n      };\n      var position = {\n        x: 0,\n        y: 0,\n        offsetX: 0,\n        offsetY: 0\n      };\n      var w_ratio = contentBox.width / p_width;\n      var h_ratio = contentBox.height / p_height;\n      var align = w_ratio <= h_ratio ? \'x\' : \'y\';\n      var scaleRatio;\n      if (this.initialZoom) {\n        scaleRatio = this.initialZoom;\n      } else {\n        scaleRatio = Math.min(w_ratio, h_ratio);\n      }\n      this.scale = scaleRatio;\n      if (scaleRatio > this.maxZoom) {\n        this.maxZoom = scaleRatio;\n      }\n      if (scaleRatio < this.minZoom) {\n        this.minZoom = scaleRatio;\n      }\n      var realboxX = p_x * scaleRatio;\n      var realboxY = p_y * scaleRatio;\n      var realboxW = contentBox.width;\n      var realboxH = contentBox.height;\n      if (this.initialPosition) {\n        var _this$initialPosition = this.initialPosition(realboxX, realboxY, realboxW, realboxH, contentBox.x, contentBox.y, c_width, c_height, p_x, p_y, p_width, p_height),\n          x = _this$initialPosition.x,\n          y = _this$initialPosition.y;\n        position.x = x;\n        position.y = y;\n      } else {\n        position.x = align === \'x\' ? contentBox.x : (realboxW - p_width * scaleRatio) / 2 + padding;\n        position.y = align === \'y\' ? contentBox.y : (realboxH - p_height * scaleRatio) / 2 + padding;\n      }\n      position.offsetX = position.x - realboxX;\n      position.offsetY = position.y - realboxY;\n      this.position = position;\n      this._readyToRender = true;\n      if (this.scrollBarBehavior.enable) {\n        this.initScrollBar(this.scrollBarBehavior);\n      }\n      // this.initSchedule();\n      // this.scheduleRender(() => {\n      //     this._createEventHandler();\n      // });\n      this.__render();\n      this._createEventHandler();\n      listenOnDevicePixelRatio(function (dpr) {\n        _this2.dpr = dpr;\n        // this.ctx.setDPR(dpr)\n        _this2.resizeCanvas();\n        _this2.scheduleRender();\n      }, function (handler) {\n        _this2.destroyDprListener = handler;\n      });\n      this.__mounted__ = true;\n    }\n\n    /**\n     * 设置Jflow进入连线模式\n     * @param {Object} source - 当前连线的出发原始数据\n     * @param {linkGen} linkGen - 生成连线单元的方法\n     */\n  }, {\n    key: "setLinkingMode",\n    value: function setLinkingMode(source, linkGen, isTail) {\n      var renderNode = this.getRenderNodeBySource(source);\n      this._tempNode = new ghostNode();\n      if (isTail) {\n        this._tempLink = linkGen({\n          from: this._tempNode,\n          to: renderNode\n        });\n      } else {\n        this._tempLink = linkGen({\n          from: renderNode,\n          to: this._tempNode\n        });\n      }\n      this.sendMessage({\n        instance: source\n      });\n      this.mode = JFLOW_MODE.LINKING;\n    }\n  }, {\n    key: "isInLinkingMode",\n    value: function isInLinkingMode() {\n      return this.mode === JFLOW_MODE.LINKING;\n    }\n\n    /**\n     * 连线模式下，设置当前临时连线的属性\n     * @param {BaseLink~Configs} configs - 当前连线的出发原始数据\n     */\n  }, {\n    key: "setLinkingLink",\n    value: function setLinkingLink(configs) {\n      if (this.mode === JFLOW_MODE.LINKING) {\n        this._tempLink.setConfig(configs);\n      }\n    }\n    /**\n     * 连线模式下，重连回临时鼠标节点\n     */\n  }, {\n    key: "resetLinkingLink",\n    value: function resetLinkingLink() {\n      if (this.mode === JFLOW_MODE.LINKING) {\n        this._tempLink.setConfig({\n          to: this._tempNode\n        });\n      }\n    }\n  }, {\n    key: "clearTemp",\n    value: function clearTemp() {\n      if (this._tempNode) {\n        this._tempNode.destroy();\n        this._tempNode = null;\n      }\n      if (this._tempLink) {\n        this._tempLink.destroy();\n        this._tempLink = null;\n      }\n      this._render();\n    }\n  }, {\n    key: "preventClearTemp",\n    value: function preventClearTemp() {\n      this._preventClearTemp = true;\n    }\n\n    /**\n     * 外层容器大小变化后，调用此方法可以改变当前canvas的状态\n     */\n  }, {\n    key: "resizeCanvas",\n    value: function resizeCanvas() {\n      if (this.canvas && this.DOMwrapper) {\n        var _resizeCanvas2 = canvas_resizeCanvas(this.canvas, this.DOMwrapper),\n          c_width = _resizeCanvas2.width,\n          c_height = _resizeCanvas2.height,\n          raw_width = _resizeCanvas2.raw_width,\n          raw_height = _resizeCanvas2.raw_height;\n        this.canvasMeta = {\n          width: raw_width,\n          height: raw_height,\n          actual_width: c_width,\n          actual_height: c_height\n        };\n      }\n    }\n  }, {\n    key: "setFocusInstance",\n    value: function setFocusInstance(node) {\n      this._focus.instance = node;\n    }\n\n    /**\n     * 移动画布到以目标绘图节点为中心的位置上\n     * @param {Node} node - 绘图节点\n     */\n  }, {\n    key: "focusOn",\n    value: function focusOn(node) {\n      var center = this._calculatePointBack([this.canvasMeta.actual_width / 2, this.canvasMeta.actual_height / 2]);\n      var offset = node.anchor;\n      if (node._belongs.calculateToCoordination) {\n        offset = node._belongs.calculateToCoordination(offset);\n      }\n      var deltaX = (center[0] - offset[0]) * this.scale;\n      var deltaY = (center[1] - offset[1]) * this.scale;\n      this._recalculatePosition(deltaX, deltaY);\n      this._render();\n    }\n  }, {\n    key: "_getBoundingGroupRect",\n    value: function _getBoundingGroupRect() {\n      var points = this._stack.getBoundingRectPoints();\n      if (this.bounding_box) {\n        this.bounding_box = bounding_box(points);\n        var _this$bounding_box2 = this.bounding_box,\n          nowx = _this$bounding_box2.x,\n          nowy = _this$bounding_box2.y;\n        var scale = this.scale;\n        this.position.x = this.position.offsetX + nowx * scale;\n        this.position.y = this.position.offsetY + nowy * scale;\n      } else {\n        this.bounding_box = bounding_box(points);\n      }\n    }\n  }, {\n    key: "_createEventHandler",\n    value: function _createEventHandler() {\n      var _this3 = this;\n      var canvas = this.canvas;\n      var destroyListener;\n      this.eventAdapter.apply(this);\n      var destroyPlainEventListener = function destroyPlainEventListener() {\n        _this3.eventAdapter.unload(_this3);\n        _this3.destroyDprListener();\n      };\n      destroyListener = destroyPlainEventListener;\n      if (this.allowDrop) {\n        var dragoverHandler = this._onDragover.bind(this);\n        var dropHandler = this._onDrop.bind(this);\n        var dragleaveHanlder = this._onDragLeave.bind(this);\n        canvas.addEventListener(\'dragstart\', function (e) {\n          e.preventDefault();\n        });\n        canvas.addEventListener(\'dragover\', dragoverHandler);\n        canvas.addEventListener(\'drop\', dropHandler);\n        canvas.addEventListener(\'dragleave\', dragleaveHanlder);\n        destroyListener = function destroyListener() {\n          destroyPlainEventListener();\n          canvas.removeEventListener(\'dragover\', dragoverHandler);\n          canvas.removeEventListener(\'drop\', dropHandler);\n          canvas.removeEventListener(\'dragleave\', dragleaveHanlder);\n        };\n      }\n      this.destroy = destroyListener;\n    }\n  }, {\n    key: "_targetLockOn",\n    value: function _targetLockOn(offsetPoint, event) {\n      var _this4 = this;\n      var point = this._calculatePointBack(offsetPoint);\n      var topLayerPoint = point;\n      this._currentp = point;\n      var stack = this._stack;\n      var br = this._getViewBox();\n      var target = stack.checkHit(point,\n      // 应用于所有\n      function (instance) {\n        return _this4._target.status.dragging && instance === _this4._getMovingTarget();\n      },\n      // 仅对于本层过滤\n      function (instance) {\n        return doOverlap(br, instance.getBoundingRect());\n      });\n      var linkStack = this._linkStack;\n      var belongs = this;\n      /*\n      if(target) {\n          linkStack = target._belongs._linkStack;\n          point = target._belongs._currentp;\n          stack = target._belongs._stack;\n          belongs = target._belongs\n      }*/\n      // 暂时设定只有顶层有连线\n      var targetLink;\n      if (!target || target._belongs === this) {\n        targetLink = linkStack.checkHit(point, function (link) {\n          if (!_this4._target.status.dragging) {\n            return false;\n          }\n          var movingtarget = _this4._getMovingTarget();\n          return link.from === movingtarget || link.to === movingtarget;\n        });\n      }\n      if (!targetLink) {\n        targetLink = linkStack.checkHit(point, function (link) {\n          return !link.ON_TOP;\n        });\n      }\n      Object.assign(this._target, {\n        instance: target,\n        link: targetLink,\n        isInstanceDirty: target === this._target.instance,\n        isLinkDirty: targetLink === this._target.link\n      });\n      Object.assign(this._target.cache, {\n        stack: stack,\n        belongs: belongs,\n        point: point,\n        topLayerPoint: topLayerPoint\n      });\n      Object.assign(this._target.meta, {\n        x: offsetPoint[0],\n        y: offsetPoint[1]\n      });\n      if (event === \'pressStart\' && !this._target.status.dragging && !this._target.status.dragovering) {\n        var movingtarget = target;\n        while (movingtarget && movingtarget._belongs.lock && movingtarget !== this) {\n          movingtarget = movingtarget._belongs;\n        }\n        this.setMovingTargets(movingtarget && [movingtarget]);\n        if (movingtarget) {\n          /**\n           * \n           * 开始拖拽时，拖拽对象设置之前\n           * @event Node#afterResolveMovingTarget\n           * @type {object}\n           * @property {Event} event           - 原始事件 \n           * @property {JFlow} jflow           - 当前JFlow对象 \n           * @property {Node} target           - 目标节点\n           */\n          target.bubbleEvent(new events(\'afterResolveMovingTarget\', {\n            event: event,\n            target: movingtarget,\n            jflow: this,\n            bubbles: true\n          }));\n        }\n      }\n      if ([\'pressStart\', \'click\', \'dblclick\', \'contextclick\'].includes(event)) {\n        if (this._focus.instance && this._focus.instance !== target) {\n          this._focus.instance.dispatchEvent(new events(\'blur\', {\n            relatedTarget: target\n          }));\n          this._focus.instance = null;\n        }\n      }\n      return this._target;\n    }\n  }, {\n    key: "blur",\n    value: function blur() {\n      if (this._focus.instance) {\n        this._focus.instance.dispatchEvent(new events(\'blur\', {\n          relatedTarget: null\n        }));\n        this._focus.instance = null;\n      }\n    }\n  }, {\n    key: "_getMovingTarget",\n    value: function _getMovingTarget() {\n      return this._target.moving && this._target.moving[0];\n    }\n  }, {\n    key: "_processDragOver",\n    value: function _processDragOver(instance, event) {\n      if (this._dragOverTarget !== instance) {\n        var _this$readMessage;\n        var target = (_this$readMessage = this.readMessage()) === null || _this$readMessage === void 0 ? void 0 : _this$readMessage.instance;\n        this._dragCurrentData = target;\n        var point = this._target.cache.point;\n        // console.log(\'_processDragOver\', this._dragOverTarget)\n        if (this._dragOverTarget) {\n          var oldIns = this._dragOverTarget;\n          /**\n          * dragleave 退出事件\n          * @event Instance#dragleave\n          * @type {object}\n          * @property {Event} event           - 原始事件 \n          * @property {Object} instance       - dragleave的对象 \n          * @property {target} target         - drag 携带的对象（特指从外面拖进canvas的对象） \n          */\n          oldIns.dispatchEvent(new events(\'dragleave\', {\n            event: event,\n            instance: oldIns,\n            target: target,\n            jflow: this,\n            point: point\n          }));\n        }\n        if (instance) {\n          /**\n          * dragenter 进入事件\n          * @event Instance#dragenter\n          * @type {object}\n          * @property {Event} event           - 原始事件 \n          * @property {Object} instance       - dragenter的对象 \n          * @property {target} target         - drag 携带的对象（特指从外面拖进canvas的对象） \n          */\n          instance.dispatchEvent(new events(\'dragenter\', {\n            event: event,\n            instance: instance,\n            target: target,\n            jflow: this,\n            point: point\n          }));\n        }\n        this._dragOverTarget = instance;\n      } else if (this._dragOverTarget) {\n        /**\n        * dragover 进入事件\n        * @event Instance#dragover\n        * @type {object}\n        * @property {Event} event           - 原始事件 \n        * @property {Object} instance       - dragover的对象 \n        * @property {target} target         - drag 携带的对象（特指从外面拖进canvas的对象） \n        */\n        this._dragOverTarget.dispatchEvent(new events(\'dragover\', {\n          event: event,\n          instance: instance,\n          jflow: this,\n          target: this._dragCurrentData\n        }));\n      }\n      this._processPanInBorder();\n    }\n  }, {\n    key: "_processPanInBorder",\n    value: function _processPanInBorder() {\n      var _this$draggingbehavio,\n        _this5 = this;\n      if ((_this$draggingbehavio = this.draggingbehavior) !== null && _this$draggingbehavio !== void 0 && (_this$draggingbehavio = _this$draggingbehavio.panInBorder) !== null && _this$draggingbehavio !== void 0 && _this$draggingbehavio.enable) {\n        if (!this.draggingbehavior.panInBorder.timer) {\n          this.draggingbehavior.panInBorder.timer = Date.now();\n        }\n        if (Date.now() - this.draggingbehavior.panInBorder.timer > 500) {\n          var _this$_cacheViewBox = flow_slicedToArray(this._cacheViewBox, 4),\n            x = _this$_cacheViewBox[0],\n            y = _this$_cacheViewBox[1],\n            w = _this$_cacheViewBox[2],\n            h = _this$_cacheViewBox[3];\n          var _this$_currentp = flow_slicedToArray(this._currentp, 2),\n            px = _this$_currentp[0],\n            py = _this$_currentp[1];\n          var _this$draggingbehavio2 = this.draggingbehavior.panInBorder,\n            padding = _this$draggingbehavio2.padding,\n            deltamovement = _this$draggingbehavio2.deltamovement;\n          var deltaX = 0;\n          var deltaY = 0;\n          if (px < x + padding) {\n            deltaX = deltamovement;\n          }\n          if (px > w - padding) {\n            deltaX = -deltamovement;\n          }\n          if (py < y + padding) {\n            deltaY = deltamovement;\n          }\n          if (py > h - padding) {\n            deltaY = -deltamovement;\n          }\n          if (this.__processOverAnime) {\n            this.__processOverAnime.cancel();\n          }\n          if (deltaX || deltaY) {\n            this.__processOverAnime = this.requestJFlowAnime(function () {\n              _this5.panHandler(deltaX, deltaY);\n            });\n          } else {\n            this.draggingbehavior.panInBorder.timer = null;\n          }\n        }\n      }\n    }\n  }, {\n    key: "_onDragover",\n    value: function _onDragover(event) {\n      var _this6 = this;\n      event.preventDefault();\n      event.stopPropagation();\n      if (this._lastDragState.processing) return;\n      this._lastDragState.processing = true;\n      var offsetX = event.offsetX,\n        offsetY = event.offsetY;\n      Object.assign(this._target.status, {\n        dragovering: true\n      });\n      this._targetLockOn([offsetX, offsetY]);\n      var instance = this._target.instance || this._target.link;\n      this._processDragOver(instance, event);\n      if (this._target.isLinkDirty || this._target.isInstanceDirty) {\n        Promise.resolve().then(function () {\n          // this._render();    \n          _this6._target.isLinkDirty = false;\n          _this6._target.isInstanceDirty = false;\n          _this6._lastDragState.processing = false;\n        });\n      } else {\n        this._lastDragState.processing = false;\n      }\n    }\n  }, {\n    key: "_cancelPanInBorder",\n    value: function _cancelPanInBorder() {\n      var _this$draggingbehavio3;\n      if (this.__processOverAnime) {\n        this.__processOverAnime.cancel();\n      }\n      if ((_this$draggingbehavio3 = this.draggingbehavior) !== null && _this$draggingbehavio3 !== void 0 && _this$draggingbehavio3.panInBorder) {\n        this.draggingbehavior.panInBorder.timer = null;\n      }\n    }\n  }, {\n    key: "_onDragLeave",\n    value: function _onDragLeave() {\n      this._cancelPanInBorder();\n    }\n  }, {\n    key: "_onDrop",\n    value: function _onDrop(event) {\n      var _this7 = this;\n      this._cancelPanInBorder();\n      var payload = this.consumeMessage();\n      var instance = payload === null || payload === void 0 ? void 0 : payload.instance;\n      if (this._dragOverTarget) {\n        var oldIns = this._dragOverTarget;\n        oldIns.dispatchEvent(new events(\'dragoverend\', {\n          event: event,\n          instance: oldIns\n        }));\n        this._dragOverTarget = null;\n      }\n      var _this$_target = this._target,\n        link = _this$_target.link,\n        target = _this$_target.instance;\n      var _this$_target$cache = this._target.cache,\n        point = _this$_target$cache.point,\n        belongs = _this$_target$cache.belongs;\n      if (link) {\n        /**\n         * 丢在线上事件\n         *\n         * @event BaseLink#drop\n         * @type {object}\n         * @property {Event} event           - 原始事件 \n         * @property {Object} instance       - 拖动的对象 \n         * @property {BaseLink} link         - 目标连线 \n         * @property {JFlow} jflow           - 当前JFlow对象 \n         * @property {Group|JFlow} belongs   - 连线所在的绘图栈的对象\n         * @property {number[]} point        - 已经计算到绘图栈对应坐标系下的坐标\n         */\n        // instance.anchor = point;\n        link.dispatchEvent(new events(\'drop\', {\n          event: event,\n          instance: instance,\n          link: link,\n          jflow: this,\n          belongs: belongs,\n          point: point\n        }));\n      } else if (target) {\n        /**\n         * 丢在节点上事件\n         *\n         * @event Node#drop\n         * @type {object}\n         * @property {Event} event           - 原始事件 \n         * @property {Object} instance       - 拖动的对象 \n         * @property {JFlow} jflow           - 当前JFlow对象 \n         * @property {Node} target           - 目标节点\n         * @property {number[]} point        - 已经计算到绘图栈对应坐标系下的坐标\n         */\n        target.bubbleEvent(new events(\'drop\', {\n          event: event,\n          instance: instance,\n          jflow: this,\n          target: target,\n          point: point,\n          bubbles: true\n        }));\n      } else {\n        /**\n        * 丢在主图上事件\n        *\n        * @event JFlow#drop\n        * @type {object}\n        * @property {Event} event           - 原始事件 \n        * @property {Object} instance       - 拖动的对象 \n        * @property {JFlow} jflow           - 当前JFlow对象 \n        * @property {number[]} point        - 已经计算到绘图栈对应坐标系下的坐标\n        */\n        this.dispatchEvent(new events(\'drop\', {\n          event: event,\n          instance: instance,\n          jflow: this,\n          target: target,\n          point: point\n        }));\n      }\n      requestAnimationFrame(function () {\n        _this7.cancelDrop();\n      });\n    }\n  }, {\n    key: "cancelDrop",\n    value: function cancelDrop() {\n      this._target.instance = null;\n      this._target.link = null;\n      Object.assign(this._target.status, {\n        dragovering: false\n      });\n    }\n\n    /**\n     * 缩放操作处理函数\n     * @param {Number} offsetX - 事件对象与canvas的内填充边（padding edge）在 X 轴方向上的偏移量。\n     * @param {Number} offsetY - 事件对象与canvas的内填充边（padding edge）在 Y 轴方向上的偏移量。 \n     * @param {Number} deltaX  - 水平滚动量\n     * @param {Number} deltaY  - 垂直滚动量\n     * @param {Number} event - 原生事件\n     */\n  }, {\n    key: "zoomHandler",\n    value: function zoomHandler(offsetX, offsetY, deltaX, deltaY, event) {\n      var _this8 = this;\n      // if(!this._allowZoom) return;\n      if (this._zooming) return;\n      this._zooming = true;\n      var _this$bounding_box3 = this.bounding_box,\n        p_width = _this$bounding_box3.width,\n        p_height = _this$bounding_box3.height,\n        x = _this$bounding_box3.x,\n        y = _this$bounding_box3.y;\n      var _this$canvasMeta = this.canvasMeta,\n        cw = _this$canvasMeta.actual_width,\n        ch = _this$canvasMeta.actual_height;\n      var minZoom = this.minZoom;\n      if (this.worldMargin) {\n        var m = this.worldMargin;\n        var maxWidth = p_width + m * 2;\n        var maxHeight = p_height + m * 2;\n        minZoom = Math.max(minZoom, Math.max(cw / maxWidth, ch / maxHeight));\n      }\n      var newScale = this.scale;\n      var amount = deltaY > 0 ? 1.05 : 1 / 1.05;\n      newScale *= amount;\n      newScale = Math.min(this.maxZoom, Math.max(minZoom, newScale));\n      // console.log(newScale);\n      // if (this.maxZoom && newScale > this.maxZoom){\n      //     // could just return but then won\'t stop exactly at maxZoom\n      //     newScale = this.maxZoom;\n      // }\n\n      // if(this.minZoom && newScale < this.minZoom) {\n      //     newScale = this.minZoom;\n      // }\n\n      var deltaScale = newScale - this.scale;\n      var currentWidth = p_width * this.scale;\n      var currentHeight = p_height * this.scale;\n      var deltaWidth = p_width * deltaScale;\n      var deltaHeight = p_height * deltaScale;\n      var tX = offsetX - this.position.x;\n      var tY = offsetY - this.position.y;\n      var pX = -tX / currentWidth;\n      var pY = -tY / currentHeight;\n      this.scale = newScale;\n      this._recalculatePosition(pX * deltaWidth, pY * deltaHeight);\n\n      // this.position.x += pX * deltaWidth;\n      // this.position.y += pY * deltaHeight;\n      // this.position.offsetX = this.position.x - x * newScale;\n      // this.position.offsetY = this.position.y - y * newScale;\n      this.dispatchEvent(new events(\'zoompan\', {\n        deltaX: 0,\n        deltaY: 0\n      }));\n      // this.setAnimeClock()\n      this.scheduleRender(function () {\n        _this8._zooming = false;\n      });\n      // requestAnimationFrame((timestamp) => {\n      //     this.setAnimeClock(timestamp);\n      //     this._render();\n      //     this._zooming = false;\n      // })\n    }\n    /**\n     * 平移画布操作处理函数\n     * @param {Number} deltaX  - 水平滚动量\n     * @param {Number} deltaY  - 垂直滚动量\n     * @param {Number} event - 原生事件\n     */\n  }, {\n    key: "panHandler",\n    value: function panHandler(deltaX, deltaY, event) {\n      var _this9 = this;\n      if (this._panning) return;\n      this._panning = true;\n      var dragging = this._target.status.dragging;\n      if (dragging) {\n        var movingtarget = this._target.moving;\n        if (movingtarget) {\n          if (this.draggingbehavior.panInBorder.allowMovingTargetInPan) {\n            movingtarget.forEach(function (t) {\n              t.anchor[0] += -deltaX / _this9.scale;\n              t.anchor[1] += -deltaY / _this9.scale;\n            });\n          }\n        }\n      }\n      this._recalculatePosition(deltaX, deltaY);\n      /**\n       * 缩放平移事件\n       *\n       * @event JFlow#zoompan\n      */\n      this.dispatchEvent(new events(\'zoompan\', {\n        deltaX: deltaX,\n        deltaY: deltaY\n      }));\n      this.scheduleRender(function () {\n        _this9._panning = false;\n      });\n      // requestAnimationFrame((timestamp) => {\n      //     this.setAnimeClock(timestamp);\n      //     this._render();\n      //     this._panning = false;\n      // })\n    }\n    /**\n     * 开始按压处理函数\n     * @param {Number} offsetX - 事件对象与canvas的内填充边（padding edge）在 X 轴方向上的偏移量。\n     * @param {Number} offsetY - 事件对象与canvas的内填充边（padding edge）在 Y 轴方向上的偏移量。 \n     * @param {Number} event - 原生事件\n     */\n  }, {\n    key: "pressStartHandler",\n    value: function pressStartHandler(offsetX, offsetY, event) {\n      var _this10 = this;\n      if (this.checkScrollDragging()) {\n        return;\n      }\n      Object.assign(this._target.meta, {\n        initialX: offsetX,\n        initialY: offsetY\n      });\n      var _this$_targetLockOn = this._targetLockOn([offsetX, offsetY], \'pressStart\'),\n        link = _this$_targetLockOn.link,\n        instance = _this$_targetLockOn.instance;\n      // 后续只支持 click 动作\n      if (this.mode === JFLOW_MODE.LINKING) return;\n      Object.assign(this._target.status, {\n        dragging: true,\n        processing: false\n      });\n      if (this._target.moving) {\n        var moving = this._getMovingTarget();\n        /**\n         * 开始拖动组的事件（特指lock的顶层组）\n         *\n         * @event Node#pressStart\n         * @type {object}\n         * @property {Event} event           - 原始事件 \n         * @property {Node} instance       - 拖动的对象 \n         * @property {JFlow} jflow           - 当前JFlow对象 \n         */\n        moving.dispatchEvent(new events(\'pressStart\', {\n          event: event,\n          instance: moving,\n          jflow: this\n        }));\n      }\n      var t = this._resolveLockOnTarget(link, instance);\n      if (t) {\n        /**\n         * 开始拖动对象事件（就是目标对象的拖动事件，事件支持冒泡）\n         *\n         * @event Node#instancePressStart\n         * @type {object}\n         * @property {Event} event           - 原始事件 \n         * @property {Node} instance     - 拖动的对象 \n         * @property {JFlow} jflow           - 当前JFlow对象 \n         * @property {Boolean} bubbles       - 冒泡\n         */\n        // const t = this._target.instance;\n        t.bubbleEvent(new events(\'instancePressStart\', {\n          event: event,\n          target: t,\n          jflow: this,\n          bubbles: true,\n          preventDefault: function preventDefault() {\n            _this10._preventPressSequeence = true;\n            _this10._clearTarget();\n            document.addEventListener(\'pointerup\', function (e) {\n              e.preventDefault();\n              e.stopPropagation();\n              _this10._preventPressSequeence = false;\n            }, {\n              once: true\n            });\n          }\n        }));\n      }\n      if (!this._preventPressSequeence) {\n        this.dispatchEvent(new events(\'jflowPressStart\', {\n          event: event,\n          jflow: this\n        }));\n      }\n    }\n    /**\n     * 按压中处理函数\n     * @param {Number} offsetX - 事件对象与canvas的内填充边（padding edge）在 X 轴方向上的偏移量。\n     * @param {Number} offsetY - 事件对象与canvas的内填充边（padding edge）在 Y 轴方向上的偏移量。 \n     * @param {Number} event - 原生事件\n     */\n  }, {\n    key: "pressMoveHandler",\n    value: function pressMoveHandler(offsetX, offsetY, event) {\n      var _this11 = this;\n      if (this._preventPressSequeence) {\n        return;\n      }\n      if (this.checkScrollDragging()) {\n        return;\n      }\n      var _this$_target$status = this._target.status,\n        dragging = _this$_target$status.dragging,\n        processing = _this$_target$status.processing;\n      var _this$_target$meta = this._target.meta,\n        x = _this$_target$meta.x,\n        y = _this$_target$meta.y;\n      // this.canvas.style.cursor = \'default\';\n      if (!dragging) {\n        if (this.checkScrollBarHover(offsetX, offsetY)) {\n          return;\n        } else {\n          this.resetScrollBarHover();\n        }\n      }\n      if (!dragging && !processing) {\n        var _this$_targetLockOn2 = this._targetLockOn([offsetX, offsetY]),\n          _link = _this$_targetLockOn2.link,\n          _instance = _this$_targetLockOn2.instance;\n        var t = this._resolveLockOnTarget(_link, _instance);\n        if (t) {\n          /**\n          * instance mousemove 原生事件，仅在无拖拽时触发\n          *\n          * @event Node#instancemousemove\n          * @type {object}\n          * @property {Event} event           - 原始事件\n          * @property {Node} instance           - 原始事件\n          * @property {JFlow} jflow           - 当前JFlow对象 \n          */\n          // instance.dispatchEvent(new JFlowEvent(\'instancemousemove\', {\n          //     event,\n          //     instance,\n          //     jflow: this,\n          // }))\n          t.bubbleEvent(new events(\'instancemousemove\', {\n            event: event,\n            instance: t,\n            jflow: this,\n            bubbles: true\n          }));\n        } else {\n          this.dispatchEvent(new events(\'instancemousemove\', {\n            event: event,\n            instance: null,\n            jflow: this\n          }));\n        }\n        if (this.mode === JFLOW_MODE.LINKING) {\n          // if(instance) {\n          //     instance.bubbleEvent(new JFlowEvent(\'linking\', {\n          //         event,\n          //         target: instance,\n          //         jflow: this,\n          //         bubbles: true,\n          //         callback: (p) => {\n          //             this._currentp = p;\n          //         }\n          //     }))\n          // }\n\n          this._tempNode.anchor = this._currentp;\n          this.scheduleRender(function () {\n            _this11._target.isLinkDirty = false;\n            _this11._target.isInstanceDirty = false;\n            _this11._target.status.processing = false;\n          });\n          this._processPanInBorder();\n          // requestAnimationFrame((timestamp) => {\n          //     this.setAnimeClock(timestamp);\n          //     this._render();\n          //     this._target.isLinkDirty = false; \n          //     this._target.isInstanceDirty = false;\n          //     this._target.status.processing = false;\n          // })\n          return;\n        }\n      }\n\n      /**\n       * canvas mousemove 原生事件\n       *\n       * @event JFlow#canvasmousemove\n       * @type {object}\n       * @property {Event} event           - 原始事件\n       * @property {JFlow} jflow           - 当前JFlow对象 \n       */\n      this.dispatchEvent(new events(\'canvasmousemove\', {\n        event: event,\n        jflow: this\n      }));\n      if (!dragging) return;\n      // this.canvas.style.cursor = \'grabbing\';\n      if (processing) return;\n      var movingtarget = this._target.moving; // this._tempNode ? [this._tempNode] : this._target.moving;\n      this._target.status.movingState = true;\n      this._target.status.processing = true;\n      var deltaX = offsetX - x;\n      var deltaY = offsetY - y;\n      if (movingtarget) {\n        if (this._allowMovingTarget) {\n          movingtarget.forEach(function (t) {\n            t.anchor[0] += deltaX / _this11.scale;\n            t.anchor[1] += deltaY / _this11.scale;\n          });\n        }\n      } else {\n        this._recalculatePosition(deltaX, deltaY);\n        this.dispatchEvent(new events(\'zoompan\', {\n          deltaX: deltaX,\n          deltaY: deltaY\n        }));\n      }\n      var _this$_targetLockOn3 = this._targetLockOn([offsetX, offsetY]),\n        instance = _this$_targetLockOn3.instance,\n        link = _this$_targetLockOn3.link;\n      this._processDragOver(instance || link, event);\n      this.scheduleRender(function () {\n        _this11._target.isLinkDirty = false;\n        _this11._target.isInstanceDirty = false;\n        _this11._target.status.processing = false;\n      });\n      // requestAnimationFrame((timestamp) => {\n      //     this._render();\n      //     this._target.isLinkDirty = false; \n      //     this._target.isInstanceDirty = false;\n      //     this._target.status.processing = false;\n      // })\n    }\n    /**\n     * 按压结束处理函数\n     * @param {Boolean} isDocument - 是否为 document 触发\n     * @param {Number} event - 原生事件\n     */\n  }, {\n    key: "pressUpHanlder",\n    value: function pressUpHanlder(isDocument, event) {\n      if (this._preventPressSequeence) {\n        return;\n      }\n      if (this.__processOverAnime) {\n        this.__processOverAnime.cancel();\n      }\n      this._dragOverTarget = null;\n      this._cancelPanInBorder();\n      // this.resetScollBarStatus();\n      var meta = this._target.meta;\n      if (this.mode === JFLOW_MODE.LINKING) {\n        var t = this._target.instance;\n        var payload = this.consumeMessage();\n        // console.log(payload)\n        var _preventDefault = false;\n        var preventDefault = function preventDefault() {\n          _preventDefault = true;\n        };\n        if (t) {\n          /**\n           * canvas mousemove 原生事件\n           *\n           * @event Node#link\n           * @type {object}\n           * @property {Event} event           - 原始事件\n           * @property {Node} target           - 原始事件\n           * @property {object} payload        - 传入的消息\n           * @property {JFlow} jflow           - 当前JFlow对象       - 当前JFlow对象 \n           */\n          t.bubbleEvent(new events(\'link\', {\n            event: event,\n            target: t,\n            jflow: this,\n            payload: payload,\n            bubbles: true,\n            link: this._tempLink,\n            preventDefault: preventDefault\n          }));\n        } else {\n          var offsetX = event.offsetX,\n            offsetY = event.offsetY;\n          this.dispatchEvent(new events(\'link\', {\n            event: event,\n            jflow: this,\n            payload: payload,\n            anchor: this._calculatePointBack([offsetX, offsetY]),\n            link: this._tempLink,\n            preventDefault: preventDefault\n          }));\n        }\n        if (_preventDefault) {\n          return;\n        }\n        this._clearTarget();\n        if (!this._preventClearTemp) {\n          if (this._tempNode) {\n            this._tempNode.destroy();\n            this._tempNode = null;\n          }\n          if (this._tempLink) {\n            this._tempLink.destroy();\n            this._tempLink = null;\n          }\n        }\n        this._preventClearTemp = false;\n        this.mode = JFLOW_MODE.DEFAULT;\n        this._render();\n        return;\n      }\n      if (this._target.moving) {\n        var checkresult = false;\n        if (this._layout["static"]) {\n          checkresult = this.staticCheck(this._getMovingTarget());\n        }\n        if (!checkresult && this._target.link) {\n          var _this$_target$cache2 = this._target.cache,\n            point = _this$_target$cache2.point,\n            belongs = _this$_target$cache2.belongs;\n          var link = this._target.link;\n          var instance = this._getMovingTarget();\n          /**\n           * 拖动到线上事件\n           *\n           * @event BaseLink#drop\n           * @type {object}\n           * @property {Event} event           - 原始事件 \n           * @property {Object} instance     - 拖动的对象 \n           * @property {BaseLink} link         - 目标连线 \n           * @property {JFlow} jflow           - 当前JFlow对象 \n           * @property {Group|JFlow} belongs   - 连线所在的绘图栈的对象\n           */\n          link.dispatchEvent(new events(\'drop\', {\n            event: event,\n            instance: instance,\n            link: link,\n            jflow: this,\n            belongs: belongs\n          }));\n          this._target.link = null;\n          this._target.instance = null;\n        } else if (this._target.moving) {\n          if (this._target.instance) {\n            /**\n             * 拖动后放置到 Instance 上的事件，由被拖动到的对象触发\n             *\n             * @event Node#pressEnd\n             * @type {object}\n             * @property {Event} event           - 原始事件 \n             * @property {Node} instance         - 拖动的对象 \n             * @property {JFlow} jflow           - 当前JFlow对象 \n             * @property {Instance} target       - 拖动到的对象\n             * @property {boolean} bubbles       - 冒泡\n             */\n            //  console.log(\'pressEnd\', this._target.instance)\n            this._target.instance.bubbleEvent(new events(\'pressEnd\', {\n              event: event,\n              instance: this._getMovingTarget(),\n              jflow: this,\n              target: this._target.instance,\n              bubbles: true\n            }));\n          } else {\n            /**\n             * 拖动后放置到主图上的事件\n             *\n             * @event JFlow#pressEnd\n             * @type {object}\n             * @property {Event} event           - 原始事件 \n             * @property {Instance} instance       - 拖动的对象 \n             * @property {JFlow} jflow           - 当前JFlow对象 \n             */\n            this.dispatchEvent(new events(\'pressEnd\', {\n              event: event,\n              instance: this._getMovingTarget(),\n              jflow: this\n            }));\n          }\n        }\n        this._target.moving = null;\n        this.removeTempDraggingInstance();\n        // this._target.isMovingDirty = false;\n        this._render();\n      }\n      this._clearTarget();\n    }\n    /**\n    * 菜单弹出处理函数\n    * @param {Number} offsetX - 事件对象与canvas的内填充边（padding edge）在 X 轴方向上的偏移量。\n    * @param {Number} offsetY - 事件对象与canvas的内填充边（padding edge）在 Y 轴方向上的偏移量。 \n    * @param {Number} event - 原生事件\n    */\n  }, {\n    key: "clickHanlder",\n    value: function clickHanlder(offsetX, offsetY, event) {\n      var _this$_targetLockOn4 = this._targetLockOn([offsetX, offsetY], \'click\'),\n        link = _this$_targetLockOn4.link,\n        instance = _this$_targetLockOn4.instance,\n        meta = _this$_targetLockOn4.meta;\n      if (Math.abs(meta.initialX - meta.x) < 1 && Math.abs(meta.initialY - meta.y) < 1) {\n        if (event.target !== this.canvas) {\n          this._clearTarget();\n          Object.assign(this._target.meta, {\n            initialX: undefined,\n            initialY: undefined\n          });\n          return;\n        }\n        var topLayerPoint = this._target.cache.topLayerPoint;\n        var t = this._resolveLockOnTarget(link, instance);\n        if (t) {\n          var target = t;\n          /**\n           * 点击事件（冒泡）\n           *\n           * @event Instance#contextclick\n           * @type {object}\n           * @property {Event} event           - 原始事件 \n           * @property {Instance} target       - 右键对象 \n           * @property {JFlow} jflow           - 当前JFlow对象\n           * @property {number[]} topLayerPoint  - jflow坐标系上的位置\n           * @property {Boolean} bubbles       - 冒泡\n           */\n          target.bubbleEvent(new events(\'click\', {\n            event: event,\n            jflow: this,\n            target: target,\n            topLayerPoint: topLayerPoint,\n            bubbles: true\n          }));\n        } else {\n          /**\n           * 点击事件\n           *\n           * @event JFlow#contextclick\n           * @type {object}\n           * @property {Event} event           - 原始事件 \n           * @property {JFlow} jflow           - 当前JFlow对象\n           * @property {number[]} topLayerPoint  - jflow坐标系上的位置\n           */\n          this.dispatchEvent(new events(\'click\', {\n            event: event,\n            jflow: this,\n            topLayerPoint: topLayerPoint\n          }));\n        }\n        this._clearTarget();\n        Object.assign(this._target.meta, {\n          initialX: undefined,\n          initialY: undefined\n        });\n      }\n    }\n    /**\n     * 菜单弹出处理函数\n     * @param {Number} offsetX - 事件对象与canvas的内填充边（padding edge）在 X 轴方向上的偏移量。\n     * @param {Number} offsetY - 事件对象与canvas的内填充边（padding edge）在 Y 轴方向上的偏移量。 \n     * @param {Number} event - 原生事件\n     */\n  }, {\n    key: "contextMenuHanlder",\n    value: function contextMenuHanlder(offsetX, offsetY, event) {\n      var _this$_targetLockOn5 = this._targetLockOn([offsetX, offsetY], \'contextclick\'),\n        link = _this$_targetLockOn5.link,\n        instance = _this$_targetLockOn5.instance;\n      var topLayerPoint = this._target.cache.topLayerPoint;\n      var t = this._resolveLockOnTarget(link, instance);\n      if (t) {\n        var target = t;\n        /**\n         * 右键事件（冒泡）\n         *\n         * @event Instance#contextclick\n         * @type {object}\n         * @property {Event} event           - 原始事件 \n         * @property {Instance} target       - 右键对象 \n         * @property {JFlow} jflow           - 当前JFlow对象\n         * @property {number[]} topLayerPoint  - jflow坐标系上的位置\n         * @property {Boolean} bubbles       - 冒泡\n         */\n        target.bubbleEvent(new events(\'contextclick\', {\n          event: event,\n          jflow: this,\n          target: target,\n          topLayerPoint: topLayerPoint,\n          bubbles: true\n        }));\n      } else {\n        /**\n         * 右键事件\n         *\n         * @event JFlow#contextclick\n         * @type {object}\n         * @property {Event} event           - 原始事件 \n         * @property {JFlow} jflow           - 当前JFlow对象\n         * @property {number[]} topLayerPoint  - jflow坐标系上的位置\n         */\n        this.dispatchEvent(new events(\'contextclick\', {\n          event: event,\n          jflow: this,\n          topLayerPoint: topLayerPoint\n        }));\n      }\n    }\n  }, {\n    key: "dblclickHandler",\n    value: function dblclickHandler(offsetX, offsetY, event) {\n      var _this$_targetLockOn6 = this._targetLockOn([offsetX, offsetY], \'dblclick\'),\n        link = _this$_targetLockOn6.link,\n        instance = _this$_targetLockOn6.instance;\n      var topLayerPoint = this._target.cache.topLayerPoint;\n      var t = this._resolveLockOnTarget(link, instance);\n      if (t) {\n        var target = t;\n        /**\n         * 右键事件\n         *\n         * @event Instance#dblclick\n         * @type {object}\n         * @property {Event} event           - 原始事件 \n         * @property {Instance} target       - 右键对象 \n         * @property {JFlow} jflow           - 当前JFlow对象\n         * @property {number[]} topLayerPoint  - jflow坐标系上的位置\n         * @property {Boolean} bubbles       - 冒泡\n         */\n        target.bubbleEvent(new events(\'dblclick\', {\n          event: event,\n          jflow: this,\n          target: target,\n          topLayerPoint: topLayerPoint,\n          bubbles: true\n        }));\n      } else {\n        this.dispatchEvent(new events(\'dblclick\', {\n          event: event,\n          jflow: this,\n          topLayerPoint: topLayerPoint\n        }));\n      }\n    }\n\n    /*_onZoom(event) {\n        event.preventDefault();\n        let { offsetX, offsetY, deltaX, deltaY } = event\n        if(event.ctrlKey) { \n            deltaY = -deltaY;\n            this.zoomHandler(offsetX, offsetY, deltaX, deltaY);\n        } else {\n            this.panHandler(-deltaX, -deltaY);\n        }\n    }\n     _onPressStart(event) { \n        const { offsetX, offsetY, deltaY, button } = event\n        if(button !== 0) return;\n        this.pressStartHandler(offsetX, offsetY);\n    }\n     _onPressMove(event) {\n        const { offsetX, offsetY } = event\n        this.pressMoveHandler(offsetX, offsetY);\n    }\n     _onPressUp(event, isDocument) {\n        event.preventDefault();\n        event.stopPropagation();\n        const { button } = event\n        if(button !== 0) return;\n        this.pressUpHanlder(isDocument)\n    }\n     _onPressUpDocument(event) {\n        this._onPressUp(event, true);\n    }\n     _onContextMenu(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        const { offsetX, offsetY } = event;\n        this.contextMenuHanlder(offsetX, offsetY);\n    }*/\n  }, {\n    key: "_resolveLockOnTarget",\n    value: function _resolveLockOnTarget(link, instance) {\n      return link !== null && link !== void 0 && link.ON_TOP ? link : instance || link;\n    }\n  }, {\n    key: "_clearTarget",\n    value: function _clearTarget() {\n      Object.assign(this._target.meta, {\n        x: undefined,\n        y: undefined\n        // initialX: undefined,\n        // initialY: undefined, \n      });\n\n      Object.assign(this._target.status, {\n        dragging: false,\n        processing: false,\n        movingState: false\n      });\n      Object.assign(this._target, {\n        instance: null,\n        link: null,\n        moving: null\n      });\n    }\n  }, {\n    key: "_recalculatePosition",\n    value: function _recalculatePosition(deltaX, deltaY, scale) {\n      var _this$bounding_box4 = this.bounding_box,\n        x = _this$bounding_box4.x,\n        y = _this$bounding_box4.y,\n        width = _this$bounding_box4.width,\n        height = _this$bounding_box4.height;\n      var _this$canvasMeta2 = this.canvasMeta,\n        cw = _this$canvasMeta2.actual_width,\n        ch = _this$canvasMeta2.actual_height;\n      if (scale === undefined) {\n        scale = this.scale;\n      }\n      if (this.worldMargin) {\n        // console.log(scale)\n        var m = this.worldMargin;\n        var bx1 = (x + width + m) * scale - cw;\n        var bx2 = (x - m) * scale;\n        // console.log(bx1, bx2)\n        var sx = x * scale;\n        var px = this.position.x + deltaX;\n        var cx = px - sx;\n        this.position.offsetX = Math.min(Math.max(-bx1, cx), -bx2);\n        // console.log(this.position.offsetX)\n        // this.position.offsetX = Math.max(Math.min(-bx2, cx), -bx1);\n        this.position.x = this.position.offsetX + sx;\n        // console.log(this.position.x, deltaX)\n        // console.log(this.position.offsetX)\n\n        var by1 = (y + height + m) * scale - ch;\n        var by2 = (y - m) * scale;\n        // console.log(by1, by2)\n        var sy = y * scale;\n        var py = this.position.y + deltaY;\n        var cy = py - sy;\n        this.position.offsetY = Math.min(Math.max(-by1, cy), -by2);\n        // this.position.offsetY = Math.max(Math.min(-by2, cy), -by1);\n        this.position.y = this.position.offsetY + sy;\n      } else {\n        this.position.x += deltaX;\n        this.position.y += deltaY;\n        this.position.offsetX = this.position.x - x * scale;\n        this.position.offsetY = this.position.y - y * scale;\n      }\n    }\n  }, {\n    key: "calculateToRealWorld",\n    value: function calculateToRealWorld(p) {\n      var scale = this.scale;\n      var position = this.position;\n      return [p[0] * scale + position.offsetX, p[1] * scale + position.offsetY];\n    }\n  }, {\n    key: "_calculatePointBack",\n    value: function _calculatePointBack(p) {\n      var scale = this.scale;\n      var position = this.position;\n      return [(p[0] - position.offsetX) / scale, (p[1] - position.offsetY) / scale];\n    }\n  }, {\n    key: "_calculatePointBackWithPoint",\n    value: function _calculatePointBackWithPoint(a, b, arr, idx1, idx2) {\n      var scale = this.scale;\n      var position = this.position;\n      arr[idx1] = (a - position.offsetX) / scale;\n      arr[idx2] = (b - position.offsetY) / scale;\n    }\n  }, {\n    key: "_calculateDistance",\n    value: function _calculateDistance(l) {\n      return this.scale * l;\n    }\n  }, {\n    key: "_resetTransform",\n    value: function _resetTransform() {\n      var _this$canvasMeta3 = this.canvasMeta,\n        c_width = _this$canvasMeta3.width,\n        c_height = _this$canvasMeta3.height;\n      var position = this.position;\n      var scale = this.scale;\n      var ctx = this.ctx;\n      ctx.setTransform();\n      ctx.clearRect(0, 0, c_width, c_height);\n      ctx.scale(this.dpr, this.dpr);\n      ctx.transform(scale, 0, 0, scale, position.offsetX, position.offsetY);\n      // ctx._ctx.setTransform();\n      // ctx._ctx.clearRect(0, 0, c_width, c_height);\n      // ctx._ctx.scale(this.dpr, this.dpr);\n      // ctx.transform(scale, position.offsetX, position.offsetY);\n    }\n  }, {\n    key: "resetTransform",\n    value: function resetTransform(ctx) {\n      var position = this.position;\n      var scale = this.scale;\n      ctx.setTransform();\n      ctx.scale(this.dpr, this.dpr);\n      ctx.transform(scale, 0, 0, scale, position.offsetX, position.offsetY);\n    }\n  }, {\n    key: "_getViewBox",\n    value: function _getViewBox() {\n      // const cacheViewBox = [\n      //     ...this._calculatePointBack([0,0]),\n      //     ...this._calculatePointBack([this.canvasMeta.actual_width,this.canvasMeta.actual_height]),\n      // ];\n      var cacheViewBox = this._cacheViewBox;\n      this._calculatePointBackWithPoint(0, 0, cacheViewBox, 0, 1);\n      this._calculatePointBackWithPoint(this.canvasMeta.actual_width, this.canvasMeta.actual_height, cacheViewBox, 2, 3);\n      return cacheViewBox;\n    }\n  }, {\n    key: "setNodeToTopLayer",\n    value: function setNodeToTopLayer(node) {\n      var index = this._stack.findIndex(function (n) {\n        return n === node;\n      });\n      if (index !== -1) {\n        var _this$_stack$splice = this._stack.splice(index, 1),\n          _this$_stack$splice2 = flow_slicedToArray(_this$_stack$splice, 1),\n          renderNode = _this$_stack$splice2[0];\n        this._stack.push(renderNode);\n      }\n    }\n  }, {\n    key: "getCacheViewBox",\n    value: function getCacheViewBox() {\n      return this._cacheViewBox;\n    }\n  }, {\n    key: "_render",\n    value: function _render() {\n      this.scheduleRender();\n    }\n\n    /**\n    * 绘制画布\n    */\n  }, {\n    key: "__render",\n    value: function __render() {\n      if (!this._readyToRender) return;\n      // if(this.hasAnimeAndFrameRendered()) return;\n      this.runAnimeFrame();\n      this._resetTransform();\n      var ctx = this.ctx;\n      this.dispatchEvent(new events(\'beforeJflowRender\', {\n        ctx: ctx\n      }));\n      var br = this._getViewBox();\n      if (this.NodeRenderTop) {\n        this._linkStack.render(ctx, function (link) {\n          return !link.ON_TOP && link.isInViewBox(br);\n        });\n        this._stack.render(ctx, function (instance) {\n          var result = doOverlap(br, instance.getBoundingRect());\n          instance._isInViewBox = result;\n          return result;\n        });\n        this._linkStack.render(ctx, function (link) {\n          return link.ON_TOP && link.isInViewBox(br);\n        });\n      } else {\n        this._stack.render(ctx, function (instance) {\n          var result = doOverlap(br, instance.getBoundingRect());\n          // console.log(instance._layoutNode.type, result)\n          instance._isInViewBox = result;\n          return result;\n        });\n        this._linkStack.render(ctx, function (link) {\n          return link.isInViewBox(br);\n        });\n      }\n      // ctx.save();\n      // for(let i =0;i<2000;i++) {\n      //     ctx.beginPath();\n      //     ctx.fillStyle = `rgb(${parseInt(Math.random()*255)},${parseInt(Math.random()*255)},${parseInt(Math.random()*255)})`\n      //     ctx.fillRect(\n      //         Math.random()*250, \n      //         Math.random()*240, \n      //         Math.random()*200, \n      //         Math.random()*300)\n      // }\n\n      // ctx.restore();\n\n      if (this._tempNode) {\n        ctx.save();\n        this._tempNode.render(ctx);\n        ctx.restore();\n      }\n      if (this._tempLink) {\n        ctx.save();\n        this._tempLink.isInViewBox(br);\n        this._tempLink.render(ctx);\n        ctx.restore();\n      }\n      this.dispatchEvent(new events(\'afterJflowRender\', {\n        ctx: ctx\n      }));\n      this.renderScrollBar(ctx);\n      // this.setFrameRendered();\n    }\n  }]);\n  return JFlow;\n}( /*#__PURE__*/flow_wrapNativeSuper(EventTarget));\nObject.assign(JFlow.prototype, messageMixin);\nObject.assign(JFlow.prototype, stackMixin);\nObject.assign(JFlow.prototype, layoutMixin);\nObject.assign(JFlow.prototype, {\n  recalculateUp: function recalculateUp() {\n    if (this.__mounted__) {\n      this.reflow();\n    }\n  }\n});\nObject.assign(JFlow.prototype, NodeWeakMapMixin);\nObject.assign(JFlow.prototype, animeMixin);\nObject.assign(JFlow.prototype, minimap_mixin);\nObject.assign(JFlow.prototype, schedule);\nObject.assign(JFlow.prototype, scrollbarMixin);\n/* harmony default export */ const flow = (JFlow);\n\n\n\n\n\n\n\n\n// export { default as Group } from \'../instance/shapes/rectangle-group\';\n\n\n// export { default as CapsuleGroup } from \'../instance/shapes/capsule-group\';\n// export { default as CapsuleVerticalGroup } from \'../instance/shapes/capsule-vertical-group\';\n\n// export { default as DiamondGroup } from \'../instance/shapes/diamond-group\';\n// export { default as DiamondVerticalGroup } from \'../instance/shapes/diamond-vertical-group\';\n\n// export { default as RhombusGroup } from \'../instance/shapes/rhombus-group\';\n\n\n\n\n\n\n\n\n// export { default as TreeLayout } from \'../ler-layouta;yout/tree-layout\';\n// export { default as Lowcodelayout } from \'../layout/low-code-layout\';\n// export { default as ERLayout } from \'../layout/er-layout/er-layout\';\n// export { default as Orange } from \'../instance/nodeWrapper/orange/orange\'\n// export { default as TextEditor } from \'../instance/text-editor\';\n// export { default as TextGroup} from \'../instance/text-group\';\n\n\n// export { JFlowPath2D } from \'../utils/path-2d\';\n\n\n\n;// CONCATENATED MODULE: ./src/index.js\n\n\n/* harmony default export */ const src = (flow);\n\n// export { default as JFlowVuePlugin, JFlowLinkGroup } from \'./vue-plugin/JFlowPlugin.js\';\nflow.$jflow_version = package_namespaceObject.i8;\n// console.log(`jflow version@${packageJson.version}`)//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///406\n')}},__webpack_require__={d:(Q,U)=>{for(var B in U)__webpack_require__.o(U,B)&&!__webpack_require__.o(Q,B)&&Object.defineProperty(Q,B,{enumerable:!0,get:U[B]})},o:(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),r:Q=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})}},__webpack_exports__={};return __webpack_modules__[406](0,__webpack_exports__,__webpack_require__),__webpack_exports__})()}));