{"version":3,"sources":["core/instance/polyline-link.js"],"names":["LinkPolyline","configs","from","to","conrolNodes","controlPoint","defaultStyle","hoverStyle","start","calculateIntersectionInFourDimension","getCenter","end","status","hover","ctx","_calculateAnchorPoints","diffDIR","Math","abs","dir","p","push","mid","fillStyle","strokeStyle","getColor","beginPath","i","length","x","y","moveTo","lineTo","stroke","endP","DIRECTION","TOP","BOTTOM","RIGHT","LEFT","closePath","fill","point","sx","sy","ex","ey","lx","rx","by","ty","APPROXIMATE","max","min","Instance"],"mappings":"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","sourcesContent":["import Instance from './instance';\nimport { DIRECTION, APPROXIMATE } from '../utils/constance';\nclass LinkPolyline extends Instance {\n    constructor(configs) {\n        super(configs);\n        this.from   = configs.from; // Instance\n        this.to     = configs.to;   // Instance\n        this.conrolNodes = [];\n        this.controlPoint = [];\n        this.defaultStyle = 'black';\n        this.hoverStyle = 'cornflowerblue';\n    }\n\n\n    _calculateAnchorPoints() {\n        const start = this.from.calculateIntersectionInFourDimension(this.to.getCenter());\n        const end = this.to.calculateIntersectionInFourDimension(this.from.getCenter());\n        return {\n            start,\n            end\n        }\n    }\n\n    getColor() {\n        if(this.status.hover) {\n            return this.hoverStyle;\n        }\n        return this.defaultStyle;\n    }\n\n    render(ctx) {\n        const { start, end } = this._calculateAnchorPoints();\n        const diffDIR = Math.abs(start.dir - end.dir);\n        let controlPoint = [start.p];\n        if(diffDIR === 1 || diffDIR === 3) {\n            // 证明只需要一个控制点\n            if(start.dir % 2 === 1) {\n                controlPoint.push([end.p[0], start.p[1]]);\n            } else {\n                controlPoint.push([start.p[0], end.p[1]]);\n            }\n\n        } else {\n            if(start.dir % 2 === 1) {\n                if(start.p[1] !== end.p[1] ) {\n                    const mid = (start.p[0] - end.p[0]) /2 + end.p[0]\n                    controlPoint.push([ mid, start.p[1] ]);\n                    controlPoint.push([ mid, end.p[1] ]);\n                }\n            } else {\n                if(start.p[0] !== end.p[0] ) {\n                    const mid = (start.p[1] - end.p[1]) /2 + end.p[1]\n                    controlPoint.push([ start.p[0], mid ]);\n                    controlPoint.push([ end.p[0], mid ]);\n                }\n            }\n        }\n        controlPoint.push(end.p);\n        this.controlPoint = controlPoint;\n        ctx.fillStyle = ctx.strokeStyle = this.getColor();\n        ctx.beginPath();\n        for (let i = 0; i < controlPoint.length; i ++) {\n            const [x, y] = controlPoint[i];\n            if (i === 0) ctx.moveTo(x, y);\n            else ctx.lineTo(x, y);\n        }\n        ctx.stroke();\n        ctx.beginPath();\n        const endP = end.p;\n        ctx.moveTo(endP[0], endP[1]);\n\n        switch (end.dir) {\n            case DIRECTION.TOP:\n                ctx.lineTo(endP[0] - 5, endP[1] - 10)\n                ctx.lineTo(endP[0] + 5, endP[1] - 10)\n                break;\n            case DIRECTION.BOTTOM:\n                ctx.lineTo(endP[0] + 5, endP[1] + 10)\n                ctx.lineTo(endP[0] - 5, endP[1] + 10)\n                break;\n            case DIRECTION.RIGHT:\n                ctx.lineTo(endP[0] + 10, endP[1] + 5)\n                ctx.lineTo(endP[0] + 10, endP[1] - 5)\n                break;\n            case DIRECTION.LEFT:\n                ctx.lineTo(endP[0] - 10, endP[1] - 5)\n                ctx.lineTo(endP[0] - 10, endP[1] + 5)\n                break;\n            default:\n                break;\n        }\n        ctx.closePath();\n        ctx.fill();\n        ctx.stroke();\n    }\n\n    isHit(point) {\n        const controlPoint = this.controlPoint;\n        let [sx, sy] = controlPoint[0];\n        for (let i = 1; i < controlPoint.length; i ++) {\n\n            const [ex, ey] = controlPoint[i];\n            let lx, rx, by, ty;\n            if(sx === ex) {\n                lx = sx - APPROXIMATE;\n                rx = sx + APPROXIMATE;\n                by = Math.max(sy, ey);\n                ty = Math.min(sy, ey);\n            }\n            if(sy === ey) {\n                ty = sy - APPROXIMATE;\n                by = sy + APPROXIMATE;\n                rx = Math.max(sx, ex);\n                lx = Math.min(sx, ex);\n            }\n            if(point[0] > lx \n                && point[0] < rx \n                && point[1] > ty \n                && point[1] < by) {\n                    return true;\n                }\n            sx = ex;\n            sy = ey;\n        } \n        return false;\n    }\n\n    getBoundingRect() {\n        const { start, end } = this._calculateAnchorPoints(); \n        return [start.p, end.p]\n    }\n}\n\nexport default LinkPolyline;"],"file":"polyline-link.js"}