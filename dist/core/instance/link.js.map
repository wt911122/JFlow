{"version":3,"sources":["core/instance/link.js"],"names":["Link","configs","from","to","controlPoints","_cachePoints","defaultStyle","hoverStyle","_isTargeting","start","calculateIntersection","getCenter","end","startX","startY","endX","endY","ctx","_calculateAnchorPoints","dx","dy","len","Math","sqrt","sin","cos","a","push","i","length","x","y","fillStyle","strokeStyle","getColor","beginPath","moveTo","lineTo","fill","point","dist","APPROXIMATE","BaseLink"],"mappings":"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","sourcesContent":["import BaseLink from './base-link';\nimport { distToSegmentSquared } from '../utils/functions';\nimport { APPROXIMATE } from '../utils/constance';\nclass Link extends BaseLink {\n    constructor(configs) {\n        super(configs);\n        this.from   = configs.from; // Instance\n        this.to     = configs.to;   // Instance\n        this.controlPoints = [0, 1, -10, 1, -10, 5];\n        this._cachePoints = null;\n        this.defaultStyle = 'black';\n        this.hoverStyle = 'cornflowerblue';\n    }\n\n    getColor() {\n        if(this._isTargeting) {\n            return this.hoverStyle;\n        }\n        return this.defaultStyle;\n    }\n\n    _calculateAnchorPoints() {\n        const start = this.from.calculateIntersection(this.to.getCenter());\n        const end = this.to.calculateIntersection(this.from.getCenter());\n        this._cachePoints = [start, end];\n        return {\n            startX: start[0], \n            startY: start[1],\n            endX  : end[0],\n            endY  : end[1],\n        }\n    }\n\n    render(ctx) {\n        const { startX, startY, endX, endY } = this._calculateAnchorPoints();\n        const controlPoints = this.controlPoints;\n        var dx = endX - startX;\n        var dy = endY - startY;\n        var len = Math.sqrt(dx * dx + dy * dy);\n        var sin = dy / len;\n        var cos = dx / len;\n        var a = [];\n        a.push(0, 0);\n        for (var i = 0; i < controlPoints.length; i += 2) {\n            var x = controlPoints[i];\n            var y = controlPoints[i + 1];\n            a.push(x < 0 ? len + x : x, y);\n        }\n        a.push(len, 0);\n        for (var i = controlPoints.length; i > 0; i -= 2) {\n            var x = controlPoints[i - 2];\n            var y = controlPoints[i - 1];\n            a.push(x < 0 ? len + x : x, -y);\n        }\n        a.push(0, 0);\n        ctx.fillStyle = ctx.strokeStyle = this.getColor();\n        ctx.beginPath();\n        for (var i = 0; i < a.length; i += 2) {\n            var x = a[i] * cos - a[i + 1] * sin + startX;\n            var y = a[i] * sin + a[i + 1] * cos + startY;\n            if (i === 0) ctx.moveTo(x, y);\n            else ctx.lineTo(x, y);\n        }\n        ctx.fill();\n    }\n\n    isHit(point) {\n        if(!this._cachePoints) return false;\n        const [ start, end ] = this._cachePoints;\n        const dist = distToSegmentSquared(point, start, end)\n        return dist < APPROXIMATE;\n    }\n\n    getBoundingRect() {\n        const { startX, startY, endX, endY } = this._calculateAnchorPoints(); \n        return [[startX, startY], [endX, endY]]\n    }\n}\n\nexport default Link;"],"file":"link.js"}