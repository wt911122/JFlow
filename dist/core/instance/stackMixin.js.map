{"version":3,"sources":["core/instance/stackMixin.js"],"names":["StackMixin","instances","links","_stack","_linkStack","initStack","data","InstanceStack","forEach","i","push","_belongs","link","addToStack","instance","replaceFromStack","target","index","findIndex","splice","addToLinkStack","removeFromStack","removeFromLinkStack","emptyLink","resetChildrenPosition","anchor","addInstanceToLink","targetLink","from","to","l","_constuctor","__proto__","constructor","l1","l2","interateNodeStack","callback"],"mappings":"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","sourcesContent":["import InstanceStack from './stack';\n// import Link from './link';\nimport Link from './polyline-link';\nimport { setUniqueId, getUniqueId } from '../utils/functions';\n/**\n * 对象栈 mixin 用于方便控制节点栈和连线栈\n *\n * @mixin\n */\nconst StackMixin = {\n    instances: [],\n    links: [],\n    _stack: null,\n    _linkStack: null,\n    /**\n     * 初始化对象栈\n     * @param {JflowConfigs} configs - 配置\n     */\n    initStack({ data }) {\n        this._stack = new InstanceStack();\n        this._linkStack = new InstanceStack();\n        if(!data) return;\n        this.instances = data.instances;\n        this.links = data.links;\n        this.instances.forEach(i => { \n            this._stack.push(i);\n            i._belongs = this;\n        })\n        this.links.forEach((link) => {\n            this._linkStack.push(link);\n            link._belongs = this;\n        });\n    },\n    /**\n     * 加入节点对象\n     * @param {Node} instance - 节点对象\n     */\n    addToStack(instance) {\n        instance._belongs = this;\n        this._stack.push(instance);\n        // this.recalculate()\n    },\n    /**\n     * 替换对象\n     * @param {Instance} target - 被替换的对象\n     * @param {Instance} instance - 替换对象\n     */\n    replaceFromStack(target, instance) {\n        const index = this._stack.findIndex(i => i === target);\n        this._stack.splice(index, 1, instance);\n        target._belongs = null;\n        instance._belongs = this;\n        // this.recalculate()\n    },\n    /**\n     * 加入连线对象\n     * @param {BaseLink} instance - 连线对象\n     */\n    addToLinkStack(link) {\n        link._belongs = this;\n        this._linkStack.push(link);\n    },\n    /**\n     * 删除节点对象\n     * @param {Node} target - 节点对象\n     */\n    removeFromStack(target) {\n        // this.removeLinkOnInstance(target);\n        const index = this._stack.findIndex(i => i === target);\n        this._stack.splice(index, 1);\n        // this.recalculate()\n    },\n    /**\n     * 删除连线对象\n     * @param {Node} target - 连线对象\n     */\n    removeFromLinkStack(target) {\n        const index = this._linkStack.findIndex(i => i === target);\n        this._linkStack.splice(index, 1);\n    },\n   \n    emptyLink() {\n        this._linkStack = new InstanceStack();\n    },\n    /**\n     * 重置当前栈中对象的位置\n     */\n    resetChildrenPosition() {\n        this._stack.forEach(i => {\n            i.anchor = [0,0]\n        });\n    },\n    /* \n        还是丢给实现方去处理，这个不属于框架自带的通用逻辑\n    removeLinkOnInstance(target) {\n        const fromInstances = [];\n        const toInstances = [];\n        const removelinks = [];\n        let _constuctor;\n        this._linkStack.forEach(l => {\n            if(l.from === target){\n                toInstances.push(l.to);\n                _constuctor = l.__proto__.constructor;\n                removelinks.push(l);\n            }\n            if(l.to === target){\n                fromInstances.push(l.from);\n                _constuctor = l.__proto__.constructor;\n                removelinks.push(l);\n            }  \n        })\n        \n        removelinks.forEach(l => {\n            this.removeFromLinkStack(l);\n        });\n        // 暂且全连接吧\n        fromInstances.forEach(f => {\n            toInstances.forEach(t => {\n                this.addToLinkStack(new _constuctor({\n                    from: f, \n                    to: t\n                }))\n            });\n        });\n        return {\n            fromInstances,\n            toInstances,\n            removelinks,\n        }\n    }, */ \n\n    addInstanceToLink(targetLink, instance) {\n        this.addToStack(instance);\n        const { from, to } = targetLink;\n        const index = this._linkStack.findIndex(l => l === targetLink);\n        const _constuctor = targetLink.__proto__.constructor;\n        const l1 = new _constuctor({\n            from, \n            to: instance,\n        });\n        l1._belongs = this;\n        const l2 = new _constuctor({\n            from: instance, \n            to,\n        });\n        l2._belongs = this;\n\n        this._linkStack.splice(index, 1, l1, l2);\n    },\n    // reLayout() {\n    //     this.reflow();\n    //     this._getBoundingGroupRect();\n    //     if(this._belongs) {\n    //         this._belongs.reLayout();\n    //     }\n    // }\n    // addToTempStack(instance) {\n    //     this._tempStack.push(instance);\n    // },\n\n    // truncateTempStack() {\n    //     let temp;\n    //     if(this._tempStack) {\n    //         temp = this._tempStack.slice();\n    //     }\n    //     this._tempStack = new InstanceStack();\n    //     return temp;\n    // }\n\n    /**\n     * 循环当前栈中节点\n     * @property {stackIteratorCallback} 循环访问栈中每个节点\n     */\n    interateNodeStack(callback) {\n        this._stack.forEach(instance => {\n            callback(instance);\n        })\n    }   \n    /**\n    * 循环访问栈中每个节点\n    * @callback stackIteratorCallback\n    * @param {Node} instance 栈中节点\n    */\n}\n\nexport default StackMixin;"],"file":"stackMixin.js"}