{"version":3,"sources":["core/instance/stack.js"],"names":["InstanceStack","_currentHit","ctx","movingTarget","forEach","instance","_isMoving","visible","save","render","restore","point","condition","i","length","ignoreHit","ishit","isHit","_isHit","points","absolutePosition","splice","getBoundingRect","push","anchor","Array"],"mappings":"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","sourcesContent":["/**\n * 绘图栈\n * @extends Array\n */\nclass InstanceStack extends Array {\n    constructor() {\n        super();\n        this._currentHit = null;\n    }\n    /**\n     * 绘制当前栈\n     * @param {Context2d} ctx - canvas context2d\n     */\n    render(ctx) {\n        let movingTarget;\n        this.forEach(instance => {\n            if(instance._isMoving) {\n                movingTarget = instance;\n                return;\n            }\n            if(instance.visible) {\n                ctx.save();\n                // if(instance.reflow && !instance._reflowed) {\n                //     instance.reflow();\n                //     instance._reflowed = true;\n                // }\n                instance.render(ctx);\n                ctx.restore();\n            }\n        });\n        if(movingTarget) {\n            ctx.save();\n            // if(movingTarget.reflow && !movingTarget._reflowed) {\n            //     movingTarget.reflow();\n            //     movingTarget._reflowed = true;\n            // }\n            movingTarget.render(ctx);\n            ctx.restore();\n        }\n    }\n\n    /**\n     * 碰撞对象过滤条件\n     * @name InstanceStack~InstanceFilter\n     * @function\n     * @param {Instance} instance - 当前对象\n    */\n    /**\n     * 碰撞检测\n     * @param {number[]} point - 碰撞点\n     * @param {InstanceStack~InstanceFilter} condition - 碰撞对象过滤条件\n     * @return {Instance}\n     */\n    checkHit(point, condition){\n        let i = this.length - 1;\n        while(i >= 0) {\n            const instance = this[i];\n            \n            if(instance.visible && !instance.ignoreHit) {\n                if(condition && condition(instance)) {\n                    i--\n                    continue;\n                }\n                const ishit = instance.isHit(point, condition);\n                instance._isHit = !!ishit;\n                if(ishit) {\n                    if(this._currentHit !== instance) {\n                        if(this._currentHit) {\n                            this._currentHit._isHit = false;\n                        }\n                        this._currentHit = instance;\n                    }\n                    if(typeof ishit !== 'boolean') {\n                        return ishit;\n                    }\n                    return instance;\n                }\n                \n            }\n            i--\n        }\n        this._currentHit = null;\n        return null;\n    }\n    /**\n     * 获取当前层栈的最小外接矩形\n     * @return {number[][]} - 外接矩形坐标\n     */\n    getBoundingRectPoints() {\n        const points = [];\n        this.forEach(instance => {\n            if(instance.visible && !instance.absolutePosition) {\n                points.splice(points.length, 0, ...instance.getBoundingRect());\n            }\n        });\n        return points;\n    }\n\n    /**\n     * 获取当前层栈的锚点矩形\n     * @return {number[][]} - 锚点矩形坐标\n     */\n    getAnchorRectPoints() {\n        const points = [];\n        this.forEach(instance => {\n            if(instance.visible && !instance.absolutePosition) {\n                points.push(instance.anchor);\n            }\n        });\n        return points;\n    }\n}\n\nexport default InstanceStack;\n"],"file":"stack.js"}