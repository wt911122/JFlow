{"version":3,"sources":["core/instance/instance.js"],"names":["margin","ishitKey","Symbol","Instance","configs","Object","assign","visible","_belongs","undefined","_layoutNode","borderWidth","borderColor","backgroundColor","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","_jflow","_target","instance","link","_getMovingTarget","ishit","dispatchEvent","CustomEvent","detail","uniqueName","keys","forEach","k","ctx","point","anchor","rect","getBoundingRect","min_y","Infinity","max_y","min_x","max_x","Math","max","min","height","width","customEvent","bubbles","bubbleEvent","calculateToRealWorld","length","scale","remove","belongs","recalculateUp","EventTarget"],"mappings":"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","sourcesContent":["import { setUniqueId, getUniqueId } from '../utils/functions';\nimport { nextDirection } from '../utils/constance';\nconst margin = 5;\nconst ishitKey = Symbol('ishit');\n/**\n * @typedef Instance~Configs\n * @type {object}\n * @property {number} borderWidth      - 边的宽度 默认是 2\n * @property {string} borderColor      - 边框颜色 默认 black\n * @property {string} color            - 填充颜色 默认 white\n * @property {string} shadowColor      - 阴影颜色\n * @property {string} shadowBlur       - 阴影扩散范围\n * @property {string} shadowOffsetX    - 阴影偏移 X\n * @property {string} shadowOffsetX    - 阴影偏移 Y\n */\n\n/** \n * 图中的最小单元\n * @constructor Instance\n * @extends EventTarget\n * @param {Instance~Configs} configs - 最小单元的一些通用属性配置\n */\nclass Instance extends EventTarget{\n    constructor(configs = {}) {\n        super();\n        Object.assign(this, configs);\n        // this.anchor = configs.anchor || [0, 0];\n        // this.belongs = undefined;\n        /** \n         * @property {number} visible      - 元素可见 默认 true\n         */\n        this.visible = true;\n        // this._jflow = undefined;\n        this._belongs = undefined;\n        this[ishitKey] = false; \n\n        /** layout 抽象节点关联属性 */\n        this._layoutNode = undefined;\n\n        /**\n         * 通用样式属性\n         * @property {number} borderWidth      - 边的宽度 默认是 2\n         * @property {string} borderColor      - 边框颜色 默认 black\n         * @property {string} backgroundColor  - 填充颜色 默认 white\n         * @property {string} shadowColor      - 阴影颜色\n         * @property {string} shadowBlur       - 阴影扩散范围\n         * @property {string} shadowOffsetX    - 阴影偏移 X\n         * @property {string} shadowOffsetX    - 阴影偏移 Y\n         */\n        this.borderWidth =      configs.borderWidth || 0;\n        this.borderColor =      configs.borderColor || 'transparent';\n        // this.hoverStyle =       configs.hoverStyle || 'transparent';\n        this.backgroundColor =  configs.backgroundColor || 'transparent';\n        this.shadowColor =      configs.shadowColor;\n        this.shadowBlur  =      configs.shadowBlur || 5;\n        this.shadowOffsetX =    configs.shadowOffsetX || 0;\n        this.shadowOffsetY =    configs.shadowOffsetY || 0;\n\n    }\n    /**\n     * @property {boolean} _isTargeting - 当前单元选中状态\n     */\n    get _isTargeting() {\n        return this === (this._jflow._target.instance || this._jflow._target.link);\n    }\n    /**\n     * @property {boolean} _isMoving - 当前单元移动状态\n     */\n    get _isMoving() {\n        return this === this._jflow._getMovingTarget();\n    }\n    /**\n     * @property {boolean} _isHit  - 当前单元碰撞检测状态\n     */\n    get _isHit() {\n        return this[ishitKey];\n    }\n    /**\n     * @property {JFlow} _jflow -     * canvas上 jflow 实体\n     */\n    get _jflow() {\n        return this._belongs.uniqueName === 'jflow' ? this._belongs : this._belongs._jflow;\n    }\n\n    set _isHit(ishit) {\n        if(this[ishitKey] !== ishit) {\n            /**\n             * 鼠标移入事件\n             *\n             * @event Instance#mouseenter\n             * @type {object}\n             * @property {Instance} instance      - 移入的对象 \n             */\n            /**\n             * 鼠标移出事件\n             *\n             * @event Instance#mouseleave\n             * @type {object}\n             * @property {Instance} instance      - 移入的对象 \n             */\n            this.dispatchEvent(new CustomEvent(ishit ? 'mouseenter': 'mouseleave' , {\n                detail: {\n                    instance: this,\n                }\n            }));\n        }\n        this[ishitKey] = ishit; // validation could be checked here such as only allowing non numerical values\n    }\n\n    /**\n     * 改变当前配置\n     * @param {Configs} configs - The string containing two comma-separated numbers.\n     */\n    setConfig(configs) {\n        Object.keys(configs).forEach(k => {\n            if(configs[k] !== undefined && configs[k] !== null) {\n                this[k] = configs[k]\n            }\n        })\n    }\n    /**\n     * 绘制单元\n     * @param {Context2d} ctx \n     */\n    render(ctx) {\n        throw 'require render implement'\n    }\n    /**\n     * 判断当前单元是否被命中\n     * @param {number[]} point \n     * @return {Boolean}\n     */\n    isHit(point) {\n        throw 'require isHit implement'\n    }\n    /**\n     * 计算当前的最大外接矩形的\n     * @return {number[][]} [lefttop: [number,number], rightbottom: [number, number]]\n     */\n    getBoundingRect() {\n        throw 'require getBoundingRect implement'\n    }\n    calculateIntersection() {\n        throw 'require calculateIntersection implement'\n    }\n    /**\n     * 计算当前连线接入点的位置\n     * @return {Object} intersection 交叉点\n     * @return {number} intersection[DIRECTION.TOP] 上\n     * @return {number} intersection[DIRECTION.BOTTOM] 下\n     * @return {number} intersection[DIRECTION.LEFT] 上\n     * @return {number} intersection[DIRECTION.RIGHT] 右\n     */\n    getIntersectionsInFourDimension() {\n        throw 'require getIntersectionsInFourDimension implement'\n    }\n\n\n    /**\n     * 获取当前所在层级的坐标\n     * @return {Number[]} 坐标\n     */\n    getCenter() {\n        return this.anchor;\n    }\n    /**\n     * 获取宽高\n     * @return {Object} demension 宽高\n     * @return {number} demension.width 宽\n     * @return {number} demension.height 高\n     */\n    getBoundingDimension() {\n        const rect = instance.getBoundingRect();\n        let min_y = Infinity;\n        let max_y = -Infinity;\n        let min_x = Infinity;\n        let max_x = -Infinity;\n        rect.forEach(point => {\n            max_y = Math.max(max_y, point[1]);\n            min_y = Math.min(min_y, point[1]);\n            max_x = Math.max(max_x, point[0]);\n            min_x = Math.min(min_x, point[0]);\n        });\n        return {\n            height: max_y - min_y,\n            width: max_x - min_x,\n        }\n    }\n    /**\n     * 冒泡事件\n     * @param {JFlowEvent} customEvent 自定义事件\n     */\n    bubbleEvent(customEvent){\n        this.dispatchEvent(customEvent);\n        if(customEvent.detail.bubbles){\n            if(this._belongs.bubbleEvent) {\n                this._belongs.bubbleEvent(customEvent);\n            } else {\n                this._belongs.dispatchEvent(customEvent); \n            }\n            \n        }\n    }\n    /**\n     * 反算回页面的像素坐标\n     * @param {Number[]} point\n     * @return {Number[]} 世界坐标\n     */\n    calculateToRealWorld(point) {\n        if(this._belongs && this._belongs.calculateToRealWorld) {\n            return this._belongs.calculateToRealWorld(point);\n        } else {\n            return point;\n        }\n    }\n\n    calculateToRealWorldWithScalar(length){\n        return this._jflow.scale * length;\n    }\n\n    /**\n     * 从当前布局中删除虚拟布局节点\n     */\n    removeFromLayoutSource() {\n        if(this._layoutNode) {\n            this._layoutNode.remove();\n        }\n    }\n\n    recalculateUp() {\n        if(this.belongs) {\n            this.belongs.recalculateUp();\n        }\n    }\n}\n\nexport default Instance;"],"file":"instance.js"}