{"version":3,"sources":["core/instance/text.js"],"names":["createInputElement","input","document","createElement","setAttribute","TEXT_ALIGN","CENTER","LEFT","RIGHT","Text","configs","type","content","fontFamily","fontSize","textColor","textAlign","textBaseline","lineHeight","indent","backgroundColor","editable","acceptPatten","minWidth","editStatus","editting","ctx","renderShadowText","_makeEditable","addEventListener","event","x","hw","width","anchor","p","height","exec","calculateToRealWorld","offsetX","offsetY","inputElement","wrapper","_jflow","DOMwrapper","oldVal","style","transform","calculateToRealWorldWithScalar","scale","textIndent","value","color","_render","outline","blurHandler","val","dispatchEvent","JFlowEvent","target","removeEventListener","removeChild","keyUpHandler","e","key","keyCode","preventDefault","append","focus","beginPath","font","fillStyle","measureText","actualBoundingBoxLeft","actualBoundingBoxRight","fontBoundingBoxAscent","fontBoundingBoxDescent","_textWidth","Math","abs","max","Object","keys","forEach","k","undefined","_rawConfigs","save","_isMoving","globalAlpha","fillText","fill","restore","Rectangle"],"mappings":"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","sourcesContent":["import Rectangle from './shapes/rectangle';\nimport { DIRECTION } from '../utils/constance';\nimport { requestCacheCanvas } from '../utils/canvas';\nimport JFlowEvent from '../events';\nfunction createInputElement() {\n    const input = document.createElement('input');\n    input.setAttribute('style',`\n        position: absolute;\n        left: 0;\n        top: 0;\n        border:none;\n        background-image:none;\n        background-color:transparent;\n        -webkit-box-shadow: none;\n        -moz-box-shadow: none;\n        box-shadow: none;`);\n    return input;\n}\n/**\n * 文字对齐方式\n * @readonly\n * @enum {string}\n */\nconst TEXT_ALIGN = {\n    CENTER: 'center',\n    LEFT: 'left',\n    RIGHT: 'right',    \n};\n/**\n * 文字单元 配置\n * @typedef {Rectangle~RectangleConfigs} Text~TextConfigs\n * @property {String} fontFamily    - 字体\n * @property {Number} fontSize      - 字号\n * @property {String} content       - 内容\n * @property {String} textColor     - 字体颜色\n * @property {TEXT_ALIGN} textAlign     - 文字对齐方式\n * @property {String} backgroundColor     - 背景颜色\n * @property {number} lineHeight    - 行高\n * @property {number} indent        - 缩进\n * @property {number} editable      - 是否可编辑\n * @property {number} minWidth      - 最小宽度\n */\n/**\n * 文字对象\n * @description 可以绘制文字\n * @constructor Text\n * @extends Rectangle\n * @param {Text~TextConfigs} configs - 配置\n */\nclass Text extends Rectangle {\n    constructor(configs) {\n        super(configs);\n        this.type =             'Text';\n        this.content =          configs.content || '';\n        this.fontFamily =       configs.fontFamily || '-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Helvetica,Tahoma,Arial,Noto Sans,PingFang SC,Microsoft YaHei,Hiragino Sans GB,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji'\n        this.fontSize =         configs.fontSize || '28px';\n        this.textColor =        configs.textColor || 'white';\n        this.textAlign =        configs.textAlign || TEXT_ALIGN.CENTER;\n        this.textBaseline =     configs.textBaseline || 'middle';\n        this.lineHeight =       configs.lineHeight ;\n        this.indent =           configs.indent || 0;\n        this.backgroundColor =  configs.backgroundColor;\n        this.editable =         configs.editable;\n        this.acceptPatten =     configs.acceptPatten;\n        this.minWidth =         configs.minWidth || 0;\n        this.editStatus = {\n            editting: false,\n        }\n        requestCacheCanvas((ctx) => {\n            this.renderShadowText(ctx);\n        });\n        this._makeEditable();\n    }\n\n\n    _makeEditable() {\n        if(this.editable) {\n            this.addEventListener('click', (event) => {\n                let x;\n                const hw = this.width / 2;\n                if(this.textAlign === TEXT_ALIGN.LEFT){\n                    x = this.anchor[0] - hw + this.indent / 2;\n                } else if(this.textAlign === TEXT_ALIGN.RIGHT) {\n                    x = this.anchor[0] + hw;\n                } else {\n                    x = this.anchor[0] + this.indent / 2;\n                }\n                const p = [ x, -this.height/2 ];\n                const fontSize = +/(\\d+)/.exec(this.fontSize)[1];\n                const [offsetX, offsetY] = this.calculateToRealWorld(p);\n                let inputElement = createInputElement();\n                const wrapper = this._jflow.DOMwrapper;\n                const oldVal = this.content;\n                inputElement.style.transform =`translate(${offsetX}px, ${offsetY}px)`;\n                inputElement.style.width = this.calculateToRealWorldWithScalar(this.width) + 'px';\n                inputElement.style.height = this.calculateToRealWorldWithScalar(this.height) + 'px';\n                inputElement.style.fontFamily = this.fontFamily;\n                wrapper.style.fontSize = `${fontSize * this._jflow.scale}px`;\n                inputElement.style.fontSize = `${fontSize * this._jflow.scale}px`;\n                inputElement.style.lineHeight = `${this.lineHeight * this._jflow.scale}px`;\n                inputElement.style.textIndent = `${this.indent * this._jflow.scale}px`;\n                inputElement.value = this.content;\n                inputElement.style.color = this.textColor;\n                inputElement.addEventListener(\"focus\",  () => {\n                    this.content = '';\n                    this._jflow._render();\n                    inputElement.style.outline = \"none\";  \n                });\n                let blurHandler = () => {\n                    if(this.acceptPatten){\n                        \n                    } else {\n                        const val = inputElement.value;\n                        /**\n                         * 文字改变事件\n                         * @event Text#change\n                         * @type {object}\n                         * @property {Text} target           - 当前文字对象 \n                         * @property {String} oldVal         - 原始文字 \n                         * @property {String} val            - 当前文字 \n                         */\n                        this.dispatchEvent(new JFlowEvent('change', {\n                            target: this,\n                            oldVal,\n                            val,\n                        }))\n                        this.content = oldVal;\n                        inputElement.removeEventListener('blur', blurHandler)\n                        wrapper.removeChild(inputElement);\n                        inputElement = null;\n                        blurHandler = null;\n                    }\n                };\n                inputElement.addEventListener('blur', blurHandler);\n                const keyUpHandler = (e) => {\n                    if (e.key === 'Enter' || e.keyCode === 13) {\n                        e.preventDefault();\n                        inputElement.removeEventListener('keypress', keyUpHandler)\n                        blurHandler();\n                    }\n                };\n                inputElement.addEventListener('keypress', keyUpHandler)\n                wrapper.append(inputElement);\n                inputElement.focus();\n            })\n        }\n    }\n\n    renderShadowText(ctx) {\n        ctx.beginPath();\n        ctx.font = `${this.fontSize} ${this.fontFamily}`;\n        ctx.textAlign = this.textAlign;\n        ctx.textBaseline = this.textBaseline;\n        ctx.fillStyle = this.textColor;\n        const {\n            actualBoundingBoxLeft,\n            actualBoundingBoxRight,\n            fontBoundingBoxAscent,\n            fontBoundingBoxDescent\n        } = ctx.measureText(this.content);\n        this._textWidth = this.indent + Math.abs(actualBoundingBoxLeft) + Math.abs(actualBoundingBoxRight);\n\n        this.width = Math.max(this.minWidth, this._textWidth);\n        const height = Math.abs(fontBoundingBoxAscent) + Math.abs(fontBoundingBoxDescent);\n        if(this.lineHeight) {\n            this.height = this.lineHeight;\n        } else {\n            this.height = height;\n        }\n        \n    }\n\n    setConfig(configs) {\n        Object.keys(configs).forEach(k => {\n            if(configs[k] !== undefined && configs[k] !== null) {\n                this[k] = configs[k];\n                this._rawConfigs[k] = configs[k];\n            }\n        });\n        requestCacheCanvas((ctx) => {\n            this.renderShadowText(ctx);\n        });\n    }\n\n    render(ctx) {\n        ctx.save();\n        if(this._isMoving){\n            ctx.globalAlpha = 0.5;\n        }\n        // this.renderShadowText(ctx);\n\n\n        // const {\n        //     borderRadius: radius, anchor, width, height\n        // } = this;\n        // if(this.backgroundColor || this.borderColor){\n        //     ctx.save();\n        //     ctx.beginPath();\n        //     if(this.borderRadius) {\n        //         const x = this.anchor[0] - this.width / 2;\n        //         const y = this.anchor[1] - this.height / 2;\n        //         ctx.moveTo(x + radius, y);\n        //         ctx.lineTo(x + width - radius, y);\n        //         ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n        //         ctx.lineTo(x + width, y + height - radius);\n        //         ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n        //         ctx.lineTo(x + radius, y + height);\n        //         ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n        //         ctx.lineTo(x, y + radius);\n        //         ctx.quadraticCurveTo(x, y, x + radius, y);\n        //         ctx.closePath();\n        //     } else {\n        //         ctx.rect(this.anchor[0] - this.width / 2, this.anchor[1] - this.height / 2, this.width, this.height);\n        //     }\n        //     if (this.backgroundColor){\n        //         ctx.fillStyle = this.backgroundColor;\n        //         ctx.fill();\n        //     }\n        //     if(this.borderColor) {\n        //         ctx.strokeStyle = this.borderColor;\n        //         ctx.stroke();\n        //     }\n        //     ctx.restore();\n        // }\n\n        ctx.beginPath();\n        ctx.font = `${this.fontSize} ${this.fontFamily}`;\n        ctx.textAlign = this.textAlign;\n        ctx.textBaseline = this.textBaseline;\n        ctx.fillStyle = this.textColor;\n        if(this.textAlign === TEXT_ALIGN.LEFT){\n            const hw = this.width / 2;\n            ctx.fillText(this.content, this.anchor[0] - hw + this.indent / 2, this.anchor[1]);\n        } else if(this.textAlign === TEXT_ALIGN.RIGHT) {\n            const hw = this.width / 2;\n            ctx.fillText(this.content, this.anchor[0] + hw, this.anchor[1]);\n        } else {\n            ctx.fillText(this.content, this.anchor[0] + this.indent / 2, this.anchor[1]);\n        }\n        // ctx.rect(this.anchor[0] - this.width / 2, this.anchor[1] - this.height / 2, this.width, this.height);\n        // ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';\n        ctx.fill();\n        ctx.restore();\n    }\n}\n\nexport default Text;"],"file":"text.js"}