{"version":3,"sources":["core/instance/shapes/rectangle.js"],"names":["Rectangle","configs","type","width","height","borderRadius","_setBorder","border","top","color","borderColor","borderWidth","enable","right","bottom","left","Object","keys","forEach","k","undefined","_rawConfigs","ctx","save","_isMoving","globalAlpha","radius","anchor","x","y","xt","yt","beginPath","moveTo","lineTo","quadraticCurveTo","closePath","lineWidth","strokeStyle","stroke","rect","fillStyle","backgroundColor","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","fill","clip","restore","point","w","h","ltx","lty","rbx","rby","x1","y1","x2","y2","vecx","vecy","theta1","theta2","Math","abs","dirx","diry","p2","_belongs","calculateToCoordination","DIRECTION","RIGHT","LEFT","BOTTOM","TOP","end","allIntersections","interDir","p","dir","Node"],"mappings":"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","sourcesContent":["import Node from '../node';\nimport { DIRECTION, oppositeDirection } from '../../utils/constance';\n/**\n * 矩形单元 配置\n * @typedef {Node~Configs} Rectangle~RectangleConfigs\n * @property {number} width - 宽\n * @property {number} height - 高\n * @property {number} borderRadius - 圆角矩形半径\n * @property {string} borderColor - 边框颜色, 默认 transparent\n * @property {string} borderWidth - 边框宽度, 默认 0\n * @property {Object} border      - 边框设置\n * @property {Object} border.top      - 上边框设置\n * @property {string} border.top.borderColor - 边框颜色, 默认 transparent\n * @property {number} border.top.borderWidth - 边框宽度, 默认 0\n * @property {Object} border.right    - 右边框设置\n * @property {string} border.right.borderColor - 边框颜色, 默认 transparent\n * @property {number} border.right.borderWidth - 边框宽度, 默认 0\n * @property {Object} border.bottom   - 下边框设置\n * @property {string} border.bottom.borderColor - 边框颜色, 默认 transparent\n * @property {number} border.bottom.borderWidth - 边框宽度, 默认 0\n * @property {Object} border.left     - 左边框设置\n * @property {string} border.left.borderColor - 边框颜色, 默认 transparent\n * @property {number} border.left.borderWidth - 边框宽度, 默认 0\n */\n/**\n * 矩形单元\n * @constructor Rectangle\n * @extends Node\n * @param {Rectangle~RectangleConfigs} configs\n */\nclass Rectangle extends Node {\n    constructor(configs = {}) {\n        super(configs);\n        this.type =             'Rectangle';\n        this.width =            configs.width || 10;\n        this.height =           configs.height || 10;\n        this.borderRadius =     configs.borderRadius || 0;\n        this._setBorder(configs);\n    }\n\n    _setBorder(configs){\n        this.border = {\n            top: {\n                color: configs.border?.top?.borderColor || configs.borderColor || 'transparent',\n                width: configs.border?.top?.borderWidth || configs.borderWidth || 0,\n                enable: configs.border?.top?.borderWidth,\n            },\n            right: {\n                color: configs.border?.right?.borderColor || configs.borderColor || 'transparent',\n                width: configs.border?.right?.borderWidth || configs.borderWidth || 0,\n                enable: configs.border?.right?.borderWidth,\n            },\n            bottom: {\n                color: configs.border?.bottom?.borderColor || configs.borderColor || 'transparent',\n                width: configs.border?.bottom?.borderWidth || configs.borderWidth || 0,\n                enable: configs.border?.bottom?.borderWidth,\n            },\n            left: {\n                color: configs.border?.left?.borderColor || configs.borderColor || 'transparent',\n                width: configs.border?.left?.borderWidth || configs.borderWidth || 0,\n                enable: configs.border?.left?.borderWidth,\n            }\n        };\n        this.borderColor = configs.borderColor || 'transparent';\n        this.borderWidth = configs.borderWidth || 0;\n    }\n\n    setConfig(configs) {\n        Object.keys(configs).forEach(k => {\n            if(configs[k] !== undefined && configs[k] !== null) {\n                this[k] = configs[k];\n                this._rawConfigs[k] = configs[k];\n            }\n        });\n        this._setBorder(configs);\n    }\n\n    render(ctx) {\n        ctx.save();\n        if(this._isMoving){\n            ctx.globalAlpha = 0.5;\n        }\n       \n        const {\n            borderRadius: radius, anchor, width, height\n        } = this;\n        const x = this.anchor[0] - this.width / 2;\n        const y = this.anchor[1] - this.height / 2;\n        const xt = this.anchor[0] + this.width / 2;\n        const yt = this.anchor[1] + this.height / 2;\n        if(this.borderRadius) {\n            ctx.beginPath();\n            ctx.moveTo(x + radius, y);\n            ctx.lineTo(x + width - radius, y);\n            ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n            ctx.lineTo(x + width, y + height - radius);\n            ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);\n            ctx.lineTo(x + radius, y + height);\n            ctx.quadraticCurveTo(x, y + height, x, y + height - radius);\n            ctx.lineTo(x, y + radius);\n            ctx.quadraticCurveTo(x, y, x + radius, y);\n            ctx.closePath();\n            if(this.borderWidth) {\n                ctx.lineWidth = this.borderWidth;\n                ctx.strokeStyle = this.borderColor;\n                ctx.stroke();\n            }\n        } else {\n            ctx.beginPath();\n            ctx.rect(this.anchor[0] - this.width / 2, this.anchor[1] - this.height / 2, this.width, this.height);\n        }\n        ctx.fillStyle = this.backgroundColor;\n        if(this.shadowColor) {\n            ctx.shadowColor = this.shadowColor;\n            ctx.shadowBlur = this.shadowBlur;\n            ctx.shadowOffsetX = this.shadowOffsetX;\n            ctx.shadowOffsetY = this.shadowOffsetY;\n        }\n        ctx.fill(); \n        if(this.borderRadius) {\n            if(this.border.top.enable) {\n                ctx.save();\n                ctx.beginPath();\n                ctx.moveTo(x, y + radius);\n                ctx.quadraticCurveTo(x, y, x + radius, y);\n                ctx.lineTo(x + width - radius, y);\n                ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\n                ctx.closePath();\n                \n                // ctx.fill();\n                ctx.clip();\n                \n                ctx.beginPath();\n                ctx.rect(x, y, this.width, this.border.top.width);\n                ctx.fillStyle = this.border.top.color;\n                ctx.fill();\n                ctx.restore();\n            }\n\n            // if(this.border.right.enable) {\n            //     ctx.beginPath();\n            //     ctx.moveTo(x + width, y + radius);\n            //     ctx.lineTo(x + width, y + height - radius);\n            //     ctx.strokeStyle = this.border.right.color;\n            //     ctx.lineWidth = this.border.right.width;\n            //     ctx.stroke();\n            // }\n\n            // if(this.border.bottom.enable) {\n            //     ctx.beginPath();\n            //     ctx.moveTo(x + width - radius, y + height);\n            //     ctx.lineTo(x + radius, y + height);\n            //     ctx.strokeStyle = this.border.bottom.color;\n            //     ctx.lineWidth = this.border.bottom.width;\n            //     ctx.stroke();\n            // }\n\n            // if(this.border.left.enable) {\n            //     ctx.beginPath();\n            //     ctx.moveTo(x, y + height - radius);\n            //     ctx.lineTo(x, y + radius);\n            //     ctx.strokeStyle = this.border.left.color;\n            //     ctx.lineWidth = this.border.left.width;\n            //     ctx.stroke();\n            // }\n        } else {\n            if(this.border.top.width) {\n                ctx.beginPath();\n                ctx.moveTo(x, y);\n                ctx.lineTo(xt, y);\n                ctx.strokeStyle = this.border.top.color;\n                ctx.lineWidth = this.border.top.width;\n                ctx.stroke();\n            }\n\n            if(this.border.right.width) {\n                ctx.beginPath();\n                ctx.moveTo(xt, y);\n                ctx.lineTo(xt, yt);\n                ctx.strokeStyle = this.border.right.color;\n                ctx.lineWidth = this.border.right.width;\n                ctx.stroke();\n            }\n\n            if(this.border.bottom.width) {\n                ctx.beginPath();\n                ctx.moveTo(xt, yt);\n                ctx.lineTo(x, yt);\n                ctx.strokeStyle = this.border.bottom.color;\n                ctx.lineWidth = this.border.bottom.width;\n                ctx.stroke();\n            }\n\n            if(this.border.left.width) {\n                ctx.beginPath();\n                ctx.moveTo(x, yt);\n                ctx.lineTo(x, y);\n                ctx.strokeStyle = this.border.left.color;\n                ctx.lineWidth = this.border.left.width;\n                ctx.stroke();\n            }\n        }\n        ctx.restore();\n    }\n\n    isHit(point) {\n        const anchor = this.anchor;\n        const w = this.width /2;\n        const h = this.height/2;\n        return point[0] > anchor[0] - w \n            && point[0] < anchor[0] + w \n            && point[1] > anchor[1] - h \n            && point[1] < anchor[1] + h;\n    }\n\n    getBoundingRect() {\n        const anchor = this.anchor;\n        const w = this.width /2;\n        const h = this.height/2;\n        const ltx = anchor[0] - w;\n        const lty = anchor[1] - h;\n        const rbx = anchor[0] + w;\n        const rby = anchor[1] + h;\n        return [\n            [ltx, lty],\n            [rbx, lty],\n            [rbx, rby],\n            [ltx, rby],\n        ]\n    }\n\n    getBoundingDimension() {\n        return {\n            height: this.height,\n            width: this.width,\n        }\n    }\n\n    calculateIntersection(point) {\n        const [x1, y1] = point;\n        const [x2, y2] = this.anchor;\n        const w = this.width/2;\n        const h = this.height/2;\n        const vecx = x2 - x1;\n        const vecy = y2 - y1;\n        const theta1 = h/w;\n        const theta2 = Math.abs(vecy/vecx);\n        const dirx = x1 > x2;\n        const diry = y1 > y2;\n        let x, y;\n        if(theta2 < theta1) {\n            x = x2 + (dirx?w:-w);\n            y = w * (diry?theta2:-theta2) + y2;\n        } else {\n            y = y2 + (diry?h:-h);\n            x = h / (dirx?theta2:-theta2) + x2;\n        }\n        return [x, y];\n    }\n\n    getIntersectionsInFourDimension() {\n        let p2 = this.anchor;\n        if(this._belongs && this._belongs.calculateToCoordination) {\n            p2 = this._belongs.calculateToCoordination(p2);\n        }\n        \n        const [x2, y2] = p2;\n        const w = this.width/2;\n        const h = this.height/2;\n        return {\n            [DIRECTION.RIGHT]:  [x2+w, y2],\n            [DIRECTION.LEFT]:   [x2-w, y2],\n            [DIRECTION.BOTTOM]: [x2, y2+h],\n            [DIRECTION.TOP]:    [x2, y2-h],\n        }\n    }\n  \n    calculateIntersectionInFourDimension(point, end) {\n        const [x1, y1] = point;\n        let p2 = this.anchor;\n        if(this._belongs && this._belongs.calculateToCoordination) {\n            p2 = this._belongs.calculateToCoordination(p2);\n        }\n        \n        const [x2, y2] = p2;\n        const w = this.width/2;\n        const h = this.height/2;\n        const allIntersections = {\n            [DIRECTION.RIGHT]:  [x2+w, y2],\n            [DIRECTION.LEFT]:   [x2-w, y2],\n            [DIRECTION.BOTTOM]: [x2, y2+h],\n            [DIRECTION.TOP]:    [x2, y2-h],\n        }\n        const vecx = x2 - x1;\n        const vecy = y2 - y1;\n        const theta1 = h/w;\n        const theta2 = Math.abs(vecy/vecx);\n        const dirx = x1 > x2;\n        const diry = y1 > y2;\n        let interDir = (theta2 > theta1 \n            ? (diry ? DIRECTION.BOTTOM : DIRECTION.TOP) \n            : (dirx ? DIRECTION.RIGHT : DIRECTION.LEFT));\n\n        // if(this._belongs && this._belongs.calculateToCoordination) {\n        //     console.log(JSON.stringify(this._intersections));\n        //     console.log(interDir)\n        // }\n        // interDir = this.checkLinked(interDir, end);\n        // if(this._belongs && this._belongs.calculateToCoordination) {\n        //     console.log(interDir)\n        // }\n        \n        // if(!interDir) {\n        //     debugger\n        // }\n        // let endDir = interDir;\n        // if(end === 'to') {\n        //     endDir = oppositeDirection(endDir)\n        // }\n        return {\n            p: allIntersections[interDir],\n            dir: interDir,\n        }\n    }\n}\n\nexport default Rectangle;"],"file":"rectangle.js"}