{"version":3,"sources":["core/instance/shapes/diamond.js"],"names":["Diamond","configs","type","width","height","side","_cacheSide","Object","keys","forEach","k","undefined","_rawConfigs","sinSIDE","Math","sin","PI","cosSIDE","cos","ctx","save","_isMoving","globalAlpha","beginPath","anchor","x","y","hw","hh","xx","leftCenter","rightCenter","right","left","top","bottom","moveTo","lineTo","quadraticCurveTo","closePath","fillStyle","backgroundColor","fill","borderWidth","lineWidth","strokeStyle","borderColor","stroke","restore","_cachePoints","point","polygon","odd","i","j","length","w","h","ltx","lty","rbx","rby","p2","_belongs","calculateToCoordination","x2","y2","DIRECTION","RIGHT","LEFT","BOTTOM","TOP","Node"],"mappings":"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","sourcesContent":["import Node from '../node';\nimport { DIRECTION, oppositeDirection } from '../../utils/constance';\nimport { makeBezierPoints } from '../../utils/functions';\n/**\n * 钻石形单元 配置\n * @typedef {Node~Configs} Diamond~DiamondConfigs\n * @property {number} width  - 内部矩形宽\n * @property {number} height - 内部矩形高\n * @property {number} side   - 两侧三角形的宽\n */\n/**\n * 钻石形单元\n * @constructor Diamond\n * @param {Diamond~DiamondConfigs} configs - 配置\n * @extends Node\n */\nclass Diamond extends Node {\n    constructor(configs = {}) {\n        super(configs);\n        this.type =             'Diamond';\n        this.width =            configs.width || 20;\n        this.height =           configs.height || 10;\n        this.side =             configs.side || 6;\n        this._cacheSide();\n    }\n\n    setConfig(configs) {\n        Object.keys(configs).forEach(k => {\n            if(configs[k] !== undefined && configs[k] !== null) {\n                this[k] = configs[k];\n                this._rawConfigs[k] = configs[k];\n            }\n        });\n        this._cacheSide();\n    }\n\n    _cacheSide() {\n        this.sinSIDE = Math.sin(Math.PI/3) * this.side;\n        this.cosSIDE = Math.cos(Math.PI/3) * this.side;\n        // console.log(this.sinSIDE, this.cosSIDE);\n    }\n\n    render(ctx) {\n        ctx.save();\n        if(this._isMoving){\n            ctx.globalAlpha = 0.6\n        }\n        ctx.beginPath();\n        const [x, y] = this.anchor;\n        const hw = this.width/2;\n        const hh = this.height/2;\n        const xx = hh / 1.732\n        const leftCenter = x - hw + xx;\n        const rightCenter = x + hw - xx;\n        const right = x + hw;\n        const left = x - hw;\n        const top = y - hh;\n        const bottom = y + hh;\n        // const angle = Math.PI / 6;\n        // const radius = 6;\n        const {\n            side, sinSIDE, cosSIDE\n        } = this;\n        ctx.moveTo(x, top);\n        ctx.lineTo(rightCenter - side, top);\n        ctx.quadraticCurveTo(rightCenter, top, rightCenter + cosSIDE, top + sinSIDE);\n        ctx.lineTo(right - cosSIDE, y - sinSIDE);\n        ctx.quadraticCurveTo(right, y, right - cosSIDE, y + sinSIDE);\n        ctx.lineTo(rightCenter + cosSIDE, bottom - sinSIDE);\n        ctx.quadraticCurveTo(rightCenter, bottom, rightCenter - side, bottom);\n\n        ctx.lineTo(leftCenter + side, bottom);\n        ctx.quadraticCurveTo(leftCenter, bottom, leftCenter - cosSIDE, bottom - sinSIDE);\n        ctx.lineTo(left + cosSIDE, y + sinSIDE);\n        ctx.quadraticCurveTo(left, y, left + cosSIDE, y - sinSIDE);\n        ctx.lineTo(leftCenter - cosSIDE, top + sinSIDE);\n        ctx.quadraticCurveTo(leftCenter, top, leftCenter + side, top);\n\n        ctx.closePath();\n\n        ctx.fillStyle = this.backgroundColor;\n        ctx.fill();\n        if(this.borderWidth) {\n            ctx.lineWidth = this.borderWidth;\n            ctx.strokeStyle = this.borderColor;\n            ctx.stroke();\n        }\n\n        // if(this._isTargeting) {\n        //     this.renderFocus(ctx);\n        // }\n        // ctx.fillStyle = 'rgba(0,0,0,0.3)';\n        // ctx.fillRect(x-hw, y-hh, this.width, this.height)\n\n        ctx.restore();\n\n        this._cachePoints = [\n            [rightCenter, top],\n            [right, y],\n            [rightCenter, bottom],\n            [leftCenter, bottom],\n            [left, y],\n            [leftCenter, top]\n        ];\n    }\n\n    isHit(point) {\n        const polygon = this._cachePoints;\n        let odd = false;\n        // For each edge (In this case for each point of the polygon and the previous one)\n        for (let i = 0, j = polygon.length - 1; i < polygon.length; i++) {\n            // If a line from the point into infinity crosses this edge\n            if (((polygon[i][1] > point[1]) !== (polygon[j][1] > point[1])) // One point needs to be above, one below our y coordinate\n                // ...and the edge doesn't cross our Y corrdinate before our x coordinate (but between our x coordinate and infinity)\n                && (point[0] < ((polygon[j][0] - polygon[i][0]) * (point[1] - polygon[i][1]) / (polygon[j][1] - polygon[i][1]) + polygon[i][0]))) {\n                // Invert odd\n                odd = !odd;\n            }\n            j = i;\n\n        }\n        return odd;\n    }\n\n    getBoundingRect() {\n        const anchor = this.anchor;\n        const w = this.width /2;\n        const h = this.height/2;\n        const ltx = anchor[0] - w;\n        const lty = anchor[1] - h;\n        const rbx = anchor[0] + w;\n        const rby = anchor[1] + h;\n        return [\n            [ltx, lty],\n            [rbx, lty],\n            [rbx, rby],\n            [ltx, rby],\n        ]\n    }\n\n    getBoundingDimension() {\n        return {\n            height: this.height,\n            width: this.width,\n        }\n    }\n\n    getIntersectionsInFourDimension() {\n        let p2 = this.anchor;\n        if(this._belongs && this._belongs.calculateToCoordination) {\n            p2 = this._belongs.calculateToCoordination(p2);\n        }\n\n        const [x2, y2] = p2;\n        const w = this.width/2;\n        const h = this.height/2;\n        return {\n            [DIRECTION.RIGHT]:  [x2+w, y2],\n            [DIRECTION.LEFT]:   [x2-w, y2],\n            [DIRECTION.BOTTOM]: [x2, y2+h],\n            [DIRECTION.TOP]:    [x2, y2-h],\n        }\n    }\n}\n\nexport default Diamond;"],"file":"diamond.js"}