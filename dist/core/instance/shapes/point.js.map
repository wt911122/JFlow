{"version":3,"sources":["core/instance/shapes/point.js"],"names":["Point","configs","type","radius","radiusExpo2","ctx","save","_isMoving","globalAlpha","beginPath","arc","anchor","Math","PI","fillStyle","backgroundColor","fill","borderWidth","lineWidth","strokeStyle","borderColor","stroke","restore","point","pow","r","ltx","lty","rbx","rby","x1","y1","x2","y2","vecx","vecy","dist","sqrt","ratio","DIRECTION","RIGHT","LEFT","BOTTOM","TOP","end","allIntersections","interDir","abs","p","dir","width","height","Node"],"mappings":"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","sourcesContent":["import Node from '../node';\nimport { DIRECTION } from '../../utils/constance';\n/**\n * 圆形单元 配置\n * @typedef {Node~Configs} Point~PointConfigs\n * @property {number} radius  - 半径\n */\n/**\n * 圆形节点\n * @constructor Point\n * @extends Node\n * @param {Point~PointConfigs} configs - 配置\n */\nclass Point extends Node {\n    constructor(configs) {\n        super(configs);\n        this.type =             'Point';\n        this.radius =           configs.radius || 10;\n        this.radiusExpo2 =      this.radius * this.radius;\n    }\n\n    render(ctx) {\n        ctx.save();\n        if(this._isMoving){\n            ctx.globalAlpha = 0.5;\n        }\n        ctx.beginPath();\n        ctx.arc(this.anchor[0], this.anchor[1], this.radius, 0, 2 * Math.PI);\n        ctx.fillStyle = this.backgroundColor;\n        ctx.fill();   \n        if(this.borderWidth) {\n            ctx.lineWidth = this.borderWidth;\n            ctx.strokeStyle = this.borderColor;\n            ctx.stroke();\n        }\n        // if(this._isTargeting) {\n        //     this.renderFocus(ctx);\n        // }\n        ctx.restore();\n    }\n\n    isHit(point) {\n        const anchor = this.anchor;\n        return Math.pow(point[0] - anchor[0], 2) + Math.pow(point[1] - anchor[1], 2) < this.radiusExpo2\n    }\n\n    getBoundingRect() {\n        const anchor = this.anchor;\n        const r = this.radius;\n        const ltx = anchor[0] - r;\n        const lty = anchor[1] - r;\n        const rbx = anchor[0] + r;\n        const rby = anchor[1] + r;\n        return [\n            [ltx, lty],\n            [rbx, lty],\n            [rbx, rby],\n            [ltx, rby],\n        ]\n    }\n\n    calculateIntersection(point) {\n        const [x1, y1] = point;\n        const [x2, y2] = this.anchor;\n        const vecx = x2 - x1;\n        const vecy = y2 - y1;\n        const dist = Math.sqrt(vecx * vecx + vecy * vecy);\n\n        const ratio = this.radius / dist;\n        return [x2 - ratio * vecx, y2 - ratio * vecy];\n    }\n\n    getIntersectionsInFourDimension() {\n        const [x2, y2] = this.anchor;\n        const r = this.radius;\n        return {\n            [DIRECTION.RIGHT]:  [x2 + r, y2],\n            [DIRECTION.LEFT]:   [x2 - r, y2],\n            [DIRECTION.BOTTOM]: [x2, y2+r],\n            [DIRECTION.TOP]:    [x2, y2-r],\n        }\n    }\n\n    calculateIntersectionInFourDimension(point, end) {\n        const [x1, y1] = point;\n        const [x2, y2] = this.anchor;\n        const r = this.radius;\n        const vecx = x2 - x1;\n        const vecy = y2 - y1;\n        const allIntersections = {\n            [DIRECTION.RIGHT]:  [x2 + r, y2],\n            [DIRECTION.LEFT]:   [x2 - r, y2],\n            [DIRECTION.BOTTOM]: [x2, y2+r],\n            [DIRECTION.TOP]:    [x2, y2-r],\n        }\n        // console.log(Math.abs(vecx) > Math.abs(vecy), vecx, r)\n        // if() {\n        //     return {\n        //         p: [x2 + (vecx<0?r:-r), y2],\n        //         dir: vecx<0 ? DIRECTION.RIGHT : DIRECTION.LEFT,\n        //     }\n        // } else {\n        //     return {\n        //         p: [x2, y2+(vecy<0?r:-r)],\n        //         dir: vecy<0 ? DIRECTION.BOTTOM : DIRECTION.TOP,\n        //     }\n        // }\n        let interDir = (Math.abs(vecy) > Math.abs(vecx)\n            ? (vecy < 0 ? DIRECTION.BOTTOM : DIRECTION.TOP) \n            : (vecx < 0 ? DIRECTION.RIGHT : DIRECTION.LEFT));\n\n        // interDir = this.checkLinked(interDir, end);\n        return {\n            p: allIntersections[interDir],\n            dir: interDir,\n        }\n    }\n\n    getBoundingDimension() {\n        return {\n            width: this.radius * 2,\n            height: this.radius * 2,\n        }\n    }\n    \n}\n\nexport default Point;"],"file":"point.js"}