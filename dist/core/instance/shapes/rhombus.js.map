{"version":3,"sources":["core/instance/shapes/rhombus.js"],"names":["Rhombus","configs","type","height","diagonalsV","width","diagonalsH","ctx","save","_isMoving","globalAlpha","w","h","center","anchor","translate","beginPath","moveTo","lineTo","closePath","borderWidth","lineWidth","strokeStyle","borderColor","stroke","fillStyle","backgroundColor","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","fill","restore","point","v","x","Math","abs","y","ltx","lty","rbx","rby","p2","_belongs","calculateToCoordination","x2","y2","DIRECTION","RIGHT","LEFT","BOTTOM","TOP","SELF","Node"],"mappings":"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","sourcesContent":["import Node from '../node';\nimport { DIRECTION } from '../../utils/constance';\n/**\n * 菱形单元 配置\n * @typedef {Node~Configs} Rhombus~RhombusConfigs\n * @property {number} diagonalsV  - 内十字高度\n * @property {number} diagonalsH  - 内十字宽度\n */\n/**\n * 菱形单元\n * @constructor Rhombus\n * @param {Rhombus~RhombusConfigs} configs - 配置\n * @extends Node\n */\nclass Rhombus extends Node {\n    constructor(configs = {}) {\n        super(configs);\n        this.type =             'Rhombus';\n        this.height =           configs.diagonalsV || 10;\n        this.width =            configs.diagonalsH || 20;\n    }\n\n    render(ctx) {\n        ctx.save();\n        if(this._isMoving){\n            ctx.globalAlpha = 0.6\n        }\n        const w = this.width / 2;\n        const h = this.height / 2;\n        const center = this.anchor;\n        ctx.translate(center[0], center[1])\n        ctx.beginPath();\n        ctx.moveTo(0, -h);\n        ctx.lineTo(w, 0);\n        ctx.lineTo(0, h);\n        ctx.lineTo(-w, 0);\n        ctx.closePath();\n        if(this.borderWidth) {\n            ctx.lineWidth = this.borderWidth;\n            ctx.strokeStyle = this.borderColor;\n            ctx.stroke();\n        }\n\n        ctx.fillStyle = this.backgroundColor;\n        if(this.shadowColor) {\n            ctx.shadowColor = this.shadowColor;\n            ctx.shadowBlur = this.shadowBlur;\n            ctx.shadowOffsetX = this.shadowOffsetX;\n            ctx.shadowOffsetY = this.shadowOffsetY;\n        }\n        ctx.fill();\n        ctx.translate(-center[0], -center[1])\n        ctx.restore();\n    }\n\n    isHit(point) {\n        const v = this.height / 2;\n        const h = this.width / 2;\n        const anchor = this.anchor;\n        const x = Math.abs(point[0] - anchor[0]);\n        const y = Math.abs(point[1] - anchor[1]);\n        return (x / h + y / v) <= 1;\n    }\n\n    getBoundingRect() {\n        const anchor = this.anchor;\n        const w = this.width /2;\n        const h = this.height /2;\n        const ltx = anchor[0] - w;\n        const lty = anchor[1] - h;\n        const rbx = anchor[0] + w;\n        const rby = anchor[1] + h;\n        return [\n            [ltx, lty],\n            [rbx, lty],\n            [rbx, rby],\n            [ltx, rby],\n        ]\n    }\n\n    getBoundingDimension() {\n        return {\n            height: this.height,\n            width: this.width,\n        }\n    }\n\n    getIntersectionsInFourDimension() {\n        let p2 = this.anchor;\n        if(this._belongs && this._belongs.calculateToCoordination) {\n            p2 = this._belongs.calculateToCoordination(p2);\n        }\n\n        const [x2, y2] = p2;\n        const w = this.width/2;\n        const h = this.height/2;\n\n        return {\n            [DIRECTION.RIGHT]:  [x2+w, y2],\n            [DIRECTION.LEFT]:   [x2-w, y2],\n            [DIRECTION.BOTTOM]: [x2, y2+h],\n            [DIRECTION.TOP]:    [x2, y2-h],\n            [DIRECTION.SELF]:   [x2+w*0.618, y2+h*0.618]\n        }\n    }\n}\n\nexport default Rhombus;\n"],"file":"rhombus.js"}