{"version":3,"sources":["core/instance/poly-link.js"],"names":["PIINRATIO","Math","PI","PolyLink","configs","approximate","APPROXIMATE","radius","minSpanX","minSpanY","lineDash","doubleLink","fontFamily","fontSize","content","isSelf","dmsfrom","from","getIntersectionsInFourDimension","dmsto","to","points","fromDir","DIRECTION","SELF","BOTTOM","_cachePoints","_cacheAngle","undefined","toDir","meta","console","log","fromP","toP","ctx","_calculateAnchorPoints","p","pEnd","length","angleEnd","fillStyle","strokeStyle","backgroundColor","beginAngle","beginPath","translate","rotate","moveTo","lineTo","fill","slice","forEach","idx","pLast","pNext","p1","p2","quadraticCurveTo","save","setLineDash","stroke","restore","point","lastP","remainPoints","currentP","shift","dist","BaseLink"],"mappings":"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","sourcesContent":["import BaseLink from './base-link';\nimport { polylinePoints, distToSegmentSquared, makeRadiusFromVector, minIntersectionBetweenNodes } from '../utils/functions';\nimport { APPROXIMATE, DIRECTION } from '../utils/constance';\n// import { dist2, bezierPoint } from '../utils/functions';\nconst PIINRATIO = Math.PI / 180\n/**\n * @typedef {BaseLink~Configs} PolyLink~Configs\n * @property {Number} approximate   - 点击响应范围\n * @property {Number} radius        - 拐角弧度\n * @property {Number} minSpanX      - 起点终点在 x 方向最小的跨度\n * @property {Number} minSpanY      - 起点终点在 y 方向最小的跨度\n * @property {number[]} lineDash    - 虚线数组\n * @property {Boolean} doubleLink   - 双向箭头\n * @property {String} fontFamily    - 连线上的文字字体\n * @property {Number} fontSize      - 连线上的文字大小\n * @property {String} content       - 连线上的文字\n * @property {String} isSelf        - 是否为自连接\n */\n/**\n * 方形折线\n * @constructor PolyLink\n * @extends BaseLink\n * @param {PolyLink~Configs} configs - 配置\n */\nclass PolyLink extends BaseLink {\n     /**\n     * 创建方形折线\n     * @param {PolyLink~Configs} configs - 配置\n     **/\n    constructor(configs) {\n        super(configs);\n        this.approximate   = configs.approximate || APPROXIMATE;\n        this.radius        = configs.radius || 0;\n        this.minSpanX      = configs.minSpanX || 10;\n        this.minSpanY      = configs.minSpanY || 10;\n        this.lineDash      = configs.lineDash;\n        this.doubleLink    = configs.doubleLink;\n        this.fontFamily    = configs.fontFamily = '-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica Neue,Helvetica,Tahoma,Arial,Noto Sans,PingFang SC,Microsoft YaHei,Hiragino Sans GB,sans-serif,Apple Color Emoji,Segoe UI Emoji,Segoe UI Symbol,Noto Color Emoji'\n        this.fontSize      = configs.fontSize || '12px';\n        this.content       = configs.content || '';\n        this.isSelf        = !!configs.isSelf\n    }\n\n    _calculateAnchorPoints() {\n        const dmsfrom = this.from.getIntersectionsInFourDimension();\n        const dmsto = this.to.getIntersectionsInFourDimension();\n        if(this.isSelf){\n            const points = polylinePoints(\n                dmsfrom[this.fromDir],\n                dmsto[DIRECTION.SELF],\n                this.fromDir,\n                DIRECTION.BOTTOM, \n                this.minSpanX, \n                this.minSpanY,\n                true);\n\n            this._cachePoints = points\n            this._cacheAngle = [this.fromDir, DIRECTION.BOTTOM]\n            // const points = polylinePoints(\n            //     dmsfrom[this.fromDir],\n            //     dmsto[this.toDir],\n            //     this.fromDir,\n            //     this.toDir, this.minSpanX , this.minSpanY);\n            // this._cachePoints = points\n            // this._cacheAngle = [this.fromDir, this.toDir]\n        } else if(this.fromDir !== undefined && this.toDir !== undefined) {\n            const points = polylinePoints(\n                dmsfrom[this.fromDir],\n                dmsto[this.toDir],\n                this.fromDir,\n                this.toDir, this.minSpanX , this.minSpanY);\n            this._cachePoints = points\n            this._cacheAngle = [this.fromDir, this.toDir]\n        } else {\n            const meta = minIntersectionBetweenNodes(dmsfrom, dmsto);\n            console.log(meta)\n            const points = polylinePoints(\n                meta.fromP,\n                meta.toP,\n                meta.fromDir,\n                meta.toDir,\n                this.minSpanX , this.minSpanY);\n            this._cachePoints = points\n            this._cacheAngle = [meta.fromDir, meta.toDir]\n        }\n    }\n    render(ctx) {\n        this._calculateAnchorPoints();\n        const radius = this.radius;\n        const points = this._cachePoints;\n        const p = points[0];\n        const pEnd = points[points.length - 1];\n        const angleEnd = ((this._cacheAngle[1] + 2) % 4) * 90 * PIINRATIO;\n        ctx.fillStyle = ctx.strokeStyle = this.backgroundColor;\n        if(this.doubleLink) {\n            const beginAngle = ((this._cacheAngle[0] + 2) % 4) * 90 * PIINRATIO;\n            ctx.beginPath();\n            ctx.translate(p[0], p[1]);\n            ctx.rotate(beginAngle);\n            ctx.moveTo(5, 0);\n            ctx.lineTo(0, -4);\n            ctx.lineTo(0, 4);\n            ctx.lineTo(5, 0);\n            ctx.fill();\n            ctx.rotate(-beginAngle);\n            ctx.translate(-p[0], -p[1]);\n        }\n        ctx.beginPath();\n        ctx.moveTo(p[0], p[1]);\n        points.slice(1, points.length - 1).forEach((p, idx) => {\n            if(this.radius) {\n                const pLast = points[idx];\n                const pNext = points[idx+2];\n                const { p1, p2 } = makeRadiusFromVector(pLast, p, pNext, radius);\n                if(p1 && p2){\n                    ctx.lineTo(p1[0], p1[1]);\n                    ctx.quadraticCurveTo(p[0], p[1], p2[0], p2[1]);\n                } else {\n                    ctx.lineTo(p[0], p[1]);\n                }  \n            } else {\n                ctx.lineTo(p[0], p[1]);\n            }\n        });\n        ctx.lineTo(pEnd[0], pEnd[1]);\n\n        if(this.lineDash) {\n            ctx.save();\n            ctx.setLineDash(this.lineDash);\n        }\n        ctx.stroke();\n        if(this.lineDash) {\n            ctx.restore();\n        }\n\n        ctx.beginPath();\n        ctx.translate(pEnd[0], pEnd[1]);\n        ctx.rotate(angleEnd);\n        ctx.moveTo(0, 0);\n        ctx.lineTo(-5, -4);\n        ctx.lineTo(-5, 4);\n        ctx.lineTo(0, 0);\n        ctx.fill();\n        ctx.rotate(-angleEnd);\n        ctx.translate(-pEnd[0], -pEnd[1]);\n\n    }\n\n    isHit(point) {\n        const points = this._cachePoints;\n        let lastP = points[0];\n        const remainPoints = points.slice(1)\n        do {\n            const currentP = remainPoints.shift();\n            if(currentP) {\n                const dist = distToSegmentSquared(point, lastP, currentP);\n                if(dist < this.approximate){\n                    return true;\n                }\n            }\n            lastP = currentP;\n        } while(lastP)\n\n        return false\n    }\n}\n\nexport default PolyLink;"],"file":"poly-link.js"}