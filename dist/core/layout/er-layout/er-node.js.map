{"version":3,"sources":["core/layout/er-layout/er-node.js"],"names":["getRelationShip","p1","p2","type","ERProperty","source","node","isNavigation","ref","association","id","name","_selfLink","parentPropertyRef","undefined","getJflowInstance","doubleRef","ERNode","isDraggable","propertyList","map","p","navigationPropertyList","idProperty","find","nodeMap","forEach","property","idRef","isParentRef","parentRef","objectRef","targetProperty","n","callback","toProperty","from","to","part","fromDir","DIRECTION","LEFT","toDir","content","minSpanX","meta","TOP","lineDash","doubleLink","minSpanY","isObjectRef","makeER","nodes","s","_traverseProperty"],"mappings":"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","sourcesContent":["import { DIRECTION } from '../../utils/constance';\nfunction getRelationShip(p1, p2) {\n    if(p1.type === 'Array' && p2.type !== 'Array') {\n        return '多对一'\n    }\n    if(p2.type === 'Array' && p1.type !== 'Array') {\n        return '一对多'\n    }\n    if(p1.type === 'Array' && p2.type === 'Array') {\n        return '多对多'\n    }\n    if(p1.type !== 'Array' && p2.type !== 'Array') {\n        return '一对一'\n    }\n}\nclass ERProperty {\n    constructor(source, node, isNavigation) {\n        this.type = 'ERProperty';\n        this.source = source;\n        this.node = node;\n        this.ref = source.ref;\n        this.type = source.type;\n        this.association = source.association;\n        this.id = isNavigation ? `${node.id}-${source.name}-navigation` : `${node.id}-${source.name}`\n        this._selfLink = false;\n        this.parentPropertyRef = undefined;\n        this.getJflowInstance = undefined;\n\n        this.doubleRef = undefined;\n    }\n}\n\nclass ERNode { \n    constructor(source) {\n        this.type = 'ERNode';\n        this.source = source;\n        this.id = source.name;\n        this.isDraggable = true;\n        this.getJflowInstance = undefined;\n        // this.adjacencyList = []\n        this.propertyList = source.propertyList.map(p => new ERProperty(p, this));\n        this.navigationPropertyList = source.navigationPropertyList.map(p => new ERProperty(p, this, true))\n        this.idProperty = this.propertyList.find(p => p.source.name === 'id');\n        // this.VertexNameProperty = this.propertyList.find(p => p.source.type === 'VertexName');\n    }\n\n    _traverseProperty(nodeMap) {\n        this.propertyList.forEach(property => {\n            const idRef = property.source.idRef; // 决定链接的对象\n            const isParentRef = property.source.isParentRef; // 决定连接的性质\n            if(idRef && property.source.type !== 'Array' && nodeMap[idRef]) {\n                const parentRef = nodeMap[idRef];\n                if (property.source.isParentRef) {\n                    this.parentRef = parentRef;\n                }\n                if (parentRef === this) {\n                    property._selfLink = true;\n                }\n                property.parentPropertyRef = parentRef.idProperty;\n            }\n        });\n        this.navigationPropertyList.forEach(property => {\n            const objectRef = property.source.objectRef;\n            if(objectRef && nodeMap[objectRef]) {\n                const node = nodeMap[objectRef];\n                const targetProperty = node.navigationPropertyList.find(n => n.source.objectRef === this.id)\n                if (node === this) {\n                    property._selfLink = true;\n                }\n                property.doubleRef = targetProperty;\n            }\n        })\n        \n    }\n\n    traverse(callback) {\n        callback(this);\n        this.propertyList.forEach(property => {\n            if(property.ref instanceof ERNode) {\n                callback(property);\n            }\n        })\n    }\n\n    makeLink(callback) {\n        this.propertyList.forEach(property => {\n            if(property.parentPropertyRef instanceof ERProperty) {\n                const toProperty = property.parentPropertyRef;\n                if(property._selfLink) {\n                    callback({\n                        from: property.id,\n                        to: toProperty.id,\n                        part: 'property',\n                        fromDir: DIRECTION.LEFT,\n                        toDir: DIRECTION.LEFT,\n                        content: property.association,\n                        minSpanX: 80,\n                        meta: {\n                            from: property,\n                            to: toProperty,\n                        }\n                    });\n                } else {\n                    callback({\n                        from: property.id,\n                        to: toProperty.id,\n                        part: 'property',\n                        content: property.association,\n                        meta: {\n                            from: property,\n                            to: toProperty,\n                        }\n                    });\n                }\n            }\n        });\n\n        \n        this.navigationPropertyList.forEach(property => {\n            if(property.doubleRef instanceof ERProperty) {\n                const toProperty = property.doubleRef;\n                if(property._selfLink) {\n                    callback({\n                        from: property.id,\n                        to: toProperty.id,\n                        part: 'property',\n                        fromDir: DIRECTION.LEFT,\n                        toDir: DIRECTION.TOP,\n                        lineDash: [10, 5],\n                        doubleLink: true,\n                        content: property.association,\n                        minSpanX: 80,\n                        minSpanY: 80,\n                        meta: {\n                            from: property,\n                            to: toProperty,\n                        }\n                    });\n                } else {\n                    callback({\n                        from: property.id,\n                        to: toProperty.id,\n                        part: 'property',\n                        lineDash: [10, 5],\n                        doubleLink: true,\n                        content: property.association,\n                        meta: {\n                            from: property,\n                            to: toProperty,\n                            isObjectRef: true,\n                        }\n                    });\n                }\n            }\n        })\n    }\n}\n\nfunction makeER(source) {\n    const nodeMap = {};\n    const nodes = source.map(s => {\n        const node = new ERNode(s);\n        nodeMap[s.name] = node\n        return node;\n    });\n    nodes.forEach(node => {\n        node._traverseProperty(nodeMap);\n    });\n    return nodes;\n}\nexport { \n    makeER,\n}"],"file":"er-node.js"}