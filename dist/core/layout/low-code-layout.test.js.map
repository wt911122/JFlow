{"version":3,"sources":["core/layout/low-code-layout.test.js"],"names":["layoutAST","ast","mapping","addMapping","level","index","node","name","AstNode","source","type","body","map","n","consequent","alternate","Endpoint","prototype","getNodeBoundingBox","sequence","spanX","spanY","length","forEach","b","idx","sx","sy","Math","max","c_spanX","c_spanY","a_spanX","a_spanY","c","nextSequeence","a","console","log","toString","makeLink","linkStack","content","root"],"mappings":"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","sourcesContent":["    function layoutAST(ast) {\n    // let x = 0;\n    // let y = 0;\n    const mapping = {};\n    function addMapping(level, index, node) {\n        if(!mapping[level]){\n            mapping[level] = {};\n        }\n        mapping[level][index] = node.name;\n    }\n\n   \n\n\n\n\n\n//     getNodeBoundingBox(node) {\n//         let xspan = 1;\n//         let yspan = 1;\n\n//         if(node.consequent && Array.isArray(node.consequent)) {\n//             node.consequent.forEach(n => {\n//                 const { xspan, yspan } = getNodeBoundingBox(n);\n//             })\n//         }\n\n//         if(node.alternate && Array.isArray(node.alternate)) {\n//             node.alternate.forEach(n => {\n//                 addMapping(x, y, n);\n//             });\n//         }\n\n\n//         return { xspan, yspan }\n//     }\n\n//     function itAst(node) {\n//         let y = 0;\n//         let x = 0;\n//         node.body.forEach(n => {\n//             addMapping(x, y, n);\n//             const { yspan } = getNodeBoundingBox(n);\n//             y += yspan;\n//         });\n//     }\n//     // let yleft = 0;\n//     // let yright = 0;\n//     let x = 0;\n//     function iterateAst(node, yleft = 0, yright = 0, fromIterate = 'body') {\n//         if(node.consequent && Array.isArray(node.consequent)) {\n//             if(fromIterate === 'alternate') {\n//                 yleft += 1;\n//             }\n//             node.consequent.forEach(n => {\n//                 yleft += 1\n//                 addMapping(x, yleft, n);\n//                 const p = iterateAst(n, yleft, yright, 'consequent');\n//                 // yleft = p.\n//             })\n//         }\n\n//         if(node.alternate && Array.isArray(node.alternate)) {\n//             x += 1;\n//             node.alternate.forEach(n => {\n//                 yright += 1\n//                 addMapping(x, yright, n);\n//                 const p = iterateAst(n, yleft, yright, 'alternate');\n//                 yright = p.yleft;\n//             });\n//             x -= 1;\n//         } \n\n//         if(node.body && Array.isArray(node.body)) {\n//             node.body.forEach(n => {\n//                 const y = Math.max(yleft, yright) + 1;\n//                 yleft = yright = y;\n//                 addMapping(x, y, n);\n//                 const p = iterateAst(n, yleft, yright, 'body');\n//                 yleft = p.yleft;\n//                 yright = p.yright;\n//             })\n//         }\n//         return {\n//             yleft,\n//             yright\n//         }\n//     }\n\n//     iterateAst(ast)\n//     console.log(mapping)\n}\n\n\n    function AstNode(source) {\n        this.name = source.name;\n        this.type = source.type;\n        this.body = (source.body || []).map(n => new AstNode(n));\n        this.consequent = (source.consequent || []).map(n => new AstNode(n));\n        this.alternate = (source.alternate || []).map(n => new AstNode(n));\n        if(source.consequent || source.alternate) {\n            this.Endpoint = new AstNode({\n                type: 'endpoint',\n                name: `${this.name}-endpoint`\n            });\n        }\n    }\n\n    AstNode.prototype.getNodeBoundingBox = function(level = 0, sequence = 0) {\n        let spanX = 1;\n        let spanY = 1;\n        this.level = level;\n        this.sequence = sequence;\n\n        if(this.body.length) {\n            this.body.forEach((b, idx) => {\n                const { spanX: sx, spanY: sy } = b.getNodeBoundingBox(level + 1, sequence);\n                spanX = Math.max(sx, spanX);\n                spanY += sy;\n                level += sy;\n            });\n        } else {\n            let c_spanX = 0;\n            let c_spanY = 0;\n            let a_spanX = 0;\n            let a_spanY = 0;\n            this.consequent.forEach((c, idx) => {\n                const { spanX: sx, spanY: sy } = c.getNodeBoundingBox(level + 1, sequence);\n                c_spanX = Math.max(c_spanX, sx);\n                c_spanY += sy;\n                level += sy;\n            });\n            const nextSequeence = sequence + c_spanX;\n            level = this.level;\n            this.alternate.forEach((a, idx) => {\n                const { spanX: sx, spanY: sy } = a.getNodeBoundingBox(level + 1, nextSequeence);\n                a_spanX = Math.max(a_spanX, sx);\n                a_spanY += sy;\n                level += sy;\n            });\n            spanX = Math.max(1, c_spanX + a_spanX);\n            spanY += Math.max(c_spanY, a_spanY);\n\n            if(this.Endpoint) {\n                const { spanY: sy } = this.Endpoint.getNodeBoundingBox(level + 1, nextSequeence);\n                spanY += sy;\n            }\n        }\n\n        this.spanX = spanX;\n        this.spanY = spanY;\n        console.log(this.name, this.spanX, this.spanY)\n\n        return {\n            spanX, spanY, level, sequence\n        }\n    }\n\n    AstNode.prototype.toString = function() {\n        console.log(`${this.sequence}, ${this.level}, ${this.name}`);\n        if(this.body.length) {\n            this.body.forEach(b => {\n                b.toString();\n            });\n        } else {\n            this.consequent.forEach(c => {\n                c.toString();\n            });\n            this.alternate.forEach(a => {\n                a.toString();\n            });\n            if(this.Endpoint) {\n                this.Endpoint.toString();\n            }\n        }\n    }\n\n    AstNode.prototype.makeLink = function(linkStack) {\n        if(this.body.length) {\n            this.body.forEach(b => {\n                b.toString();\n            });\n        } else {\n            this.consequent.forEach(c => {\n                c.toString();\n            });\n            this.alternate.forEach(a => {\n                a.toString();\n            });\n            if(this.Endpoint) {\n                this.Endpoint.toString();\n            }\n        }\n    }\nconst ast = {\n    name: 'root',\n    body: [\n        {\n            type: 'start',\n            name: 'start',\n        },\n        {\n            type: 'variable',\n            content: 'aaaa',\n            name: 'logic1',\n            consequent: [\n                {\n                    type: 'variable',\n                    content: 'vvvvvvv',\n                    name: 'logic5',\n                },\n                {\n                    type: 'variable',\n                    content: 'vvvvvvv',\n                    name: 'logic6',\n                    consequent: [\n                        {\n                            type: 'variable',\n                            content: 'vvvvvvv',\n                            name: 'logic6554',\n                        },\n                    ], \n                    alternate: [\n                        {\n                            type: 'variable',\n                            content: 'ggggggg',\n                            name: 'logic89757',\n                        },\n                        {\n                            type: 'variable',\n                            content: 'vvvvvvv',\n                            name: 'logic8675',\n                        },\n                    ]\n                },\n            ], \n            alternate: [\n                {\n                    type: 'variable',\n                    content: 'ggggggg',\n                    name: 'logic55474',\n                    consequent: [\n                        {\n                            type: 'variable',\n                            content: 'vvvvvvv',\n                            name: 'logic77',\n                        },\n                    ], \n                    alternate: [\n                        {\n                            type: 'variable',\n                            content: 'ggggggg',\n                            name: 'logic88',\n                        },\n                        {\n                            type: 'variable',\n                            content: 'vvvvvvv',\n                            name: 'logic99',\n                        },\n                    ]\n                },\n                {\n                    type: 'variable',\n                    content: 'ggggggg',\n                    name: 'logic34455',\n                }\n            ]\n        },\n        {\n            type: 'variable',\n            content: 'ddddggg',\n            name: 'logic3',\n        },\n        {\n            type: 'assignment',\n            name: 'logic2',\n        },\n        {\n            type: 'end',\n            name: 'end',\n        },\n    ]\n};\n// layoutAST(ast)\n    const root = new AstNode(ast);\n    root.getNodeBoundingBox();\n    root.toString();"],"file":"low-code-layout.test.js"}