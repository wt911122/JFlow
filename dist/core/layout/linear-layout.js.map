{"version":3,"sources":["core/layout/linear-layout.js"],"names":["LinearLayout","configs","direction","gap","alignment","justify","_rawConfigs","group","stack","_stack","filter","instance","visible","absolutePosition","absoluteStack","groupWidth","width","padding","left","right","reduceHeight","lastInstanceHeight","maxWidth","allHeight","forEach","idx","getBoundingDimension","height","Math","max","anchor","reduceWidth","lastInstanceWidth","maxHeight","allWidth","allPureWidth","withdraw","length","gapAverage","_getBoundingGroupRect","WIDTH","HEIGHT","_resolveAbsoluteAnchor","config","w","h","top","bottom","hw","hh","y","x"],"mappings":"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","sourcesContent":["/**\n    线性布局\n\n    排列方向\n    direction:\n        + vertical 从上至下排布\n        + horizontal 从左至右排布\n    \n    不重叠，中线对齐\n    只针对当前的 group\n\n    对齐方式\n    alignment: \n        + start 主轴左侧对齐\n        + center 主轴对齐\n        + end   主轴右侧对齐\n    justify: \n        + start 开始时对齐\n        + center 居中对齐\n        + end   末尾对齐\n        + space-between 平均分配空间对齐\n\n * @implements {Layout}\n */\n\nclass LinearLayout {\n    constructor(configs = {}) {\n        /**\n         * 通用样式属性\n         * @property {string} direction     - 排列方向 默认 vertical\n         * @property {number} gap           - 边距, 默认是 5\n         * @property {string} alignment     - 垂直排列方向对齐方式 默认 center\n         * @property {string} justify       - 排列方向对齐方式 默认 center\n         */\n        this.direction =     configs.direction || 'vertical';\n        this.gap =           configs.gap ?? 5;\n        this.alignment =     configs.alignment || 'center';\n        this.justify =       configs.justify || 'center';\n        // this.widthSetByParent =  configs.width === '100%'\n        this._rawConfigs = configs;\n    }\n\n\n    reflow(group) {\n        const stack = group._stack.filter(instance => instance.visible && !instance.absolutePosition);\n        const absoluteStack = group._stack.filter(instance => instance.visible && instance.absolutePosition)\n        const groupWidth = group.width - group.padding.left - group.padding.right;\n        // console.log(groupWidth, group.height, group)\n        if(this.direction === 'vertical') {\n            let reduceHeight = 0;\n            let lastInstanceHeight = 0;\n            let maxWidth = 0;\n            let allHeight = 0;\n            stack.forEach((instance, idx) =>  {\n                const { width, height } = instance.getBoundingDimension();\n                // console.log(height, instance.type);\n                const gap = (idx > 0 ? this.gap : 0);\n                maxWidth = Math.max(width, maxWidth);\n                allHeight += (height + gap);\n                reduceHeight += (height/2 + gap + lastInstanceHeight)\n                lastInstanceHeight = height / 2;\n                instance.anchor = [0, reduceHeight];\n            });\n            maxWidth = Math.max(groupWidth, maxWidth);\n            \n            allHeight = allHeight/2;\n            if(this.alignment === 'start') {\n                stack.forEach((instance, idx) =>  {\n                    const { width } = instance.getBoundingDimension();\n                    instance.anchor[0] = -(maxWidth - width) / 2;\n                    instance.anchor[1] -= allHeight;\n                    // console.log(maxWidth, width, instance.anchor[0])\n                })\n            }\n            if(this.alignment === 'end') {\n                stack.forEach((instance, idx) =>  {\n                    const { width } = instance.getBoundingDimension();\n                    instance.anchor[0] = (maxWidth - width) / 2;\n                    instance.anchor[1] -= allHeight;\n                })\n            }\n            if(this.alignment === 'center') {\n                stack.forEach((instance, idx) =>  {\n                    const { width } = instance.getBoundingDimension();\n                    instance.anchor[1] -= allHeight;\n                })\n            }\n        } \n        if(this.direction === 'horizontal') {\n            let reduceWidth = 0;\n            let lastInstanceWidth = 0;\n            let maxHeight = 0;\n            let allWidth = 0;\n            let allPureWidth = 0;\n            \n            stack.forEach((instance, idx) =>  {\n                const { width, height } = instance.getBoundingDimension();\n                const gap = (idx > 0 ? this.gap : 0);\n                maxHeight = Math.max(height, maxHeight);\n                allWidth += (width+gap);\n                allPureWidth += width;\n                reduceWidth += (width/2 + gap + lastInstanceWidth)\n                lastInstanceWidth = width / 2;\n                instance.anchor = [reduceWidth, 0]\n            });\n            if(this.justify === 'start') {\n                const withdraw = groupWidth/2;\n                stack.forEach((instance, idx) => {\n                    instance.anchor[0] -= withdraw;\n                });  \n            }\n            if(this.justify === 'end') {\n                const withdraw = groupWidth/2 - allWidth;\n                stack.forEach((instance, idx) => {\n                    instance.anchor[0] += withdraw;\n                });  \n            }\n            if(this.justify === 'center') { \n                const withdraw = allWidth / 2;\n                stack.forEach((instance, idx) => {\n                    instance.anchor[0] -= withdraw;\n                })                \n            }\n            if(this.justify === 'space-between' && stack.length > 1) {\n                const width = Math.max(groupWidth, allWidth);\n                const gapAverage = (width - allWidth) / (stack.length - 1);\n                const withdraw = width/2;\n                stack.forEach((instance, idx) => {\n                    instance.anchor[0] += ((gapAverage * idx) - withdraw);\n                });  \n            }\n            if(this.alignment === 'start') {\n                stack.forEach((instance, idx) => {\n                    const { height } = instance.getBoundingDimension();\n                    instance.anchor[1] = -(maxHeight - height) / 2;\n                })\n            }\n            if(this.alignment === 'end') {\n                stack.forEach((instance, idx) => {\n                    const { height } = instance.getBoundingDimension();\n                    instance.anchor[1] = (maxHeight - height) / 2;\n                })\n            }\n        }\n\n        if(absoluteStack.length) {\n            group._getBoundingGroupRect();\n            const WIDTH = group.width /2;\n            const HEIGHT = group.height /2;\n            absoluteStack.forEach(instance => {\n                instance.anchor = this._resolveAbsoluteAnchor(instance.absolutePosition, instance, WIDTH, HEIGHT);\n            })\n        }\n    }\n\n    _resolveAbsoluteAnchor(config, instance, w, h){\n        const { top, right, bottom, left } = config;\n        const { width, height } = instance.getBoundingDimension();\n        const hw = width / 2;\n        const hh = height / 2;\n        let y = 0;\n        let x = 0;\n        if(top) {\n            y = top + hh - h;\n        }\n        if(right) {\n            x = w - right - hw;\n        }\n        if(bottom) {\n            y = h - bottom - hh;\n        }\n        if(left) {\n            x = left + hw - w;\n        }\n        return [x, y]\n    }\n\n    clone() {\n        return new LinearLayout(this._rawConfigs);\n    }\n}\n\nexport default LinearLayout;"],"file":"linear-layout.js"}