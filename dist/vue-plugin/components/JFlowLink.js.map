{"version":3,"sources":["vue-plugin/components/JFlowLink.js"],"names":["nameNode","isLink","inject","props","configs","type","Object","from","String","to","watch","resetLink","val","oldVal","backgroundColor","_jflowInstance","render","createElement","created","fromInstance","getInstanceByJFlowId","toInstance","key","$vnode","JFlowInstance","bindListeners","addToLinkStack","methods","keys","$listeners","map","event","func","addEventListener","destroyed","removeFromLinkStack"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;AAEe,mBAAUA,QAAV,EAAoBC,MAApB,EAA4B;AACvC,SAAO;AACHC,IAAAA,MAAM,EAAE,CAAE,gBAAF,EAAoB,qBAApB,EAA2C,sBAA3C,CADL;AAEHC,IAAAA,KAAK,EAAE;AACHC,MAAAA,OAAO,EAAE;AACLC,QAAAA,IAAI,EAAEC,MADD;AAEL,mBAAS,oBAAY;AACjB,iBAAO,EAAP;AACH;AAJI,OADN;AAOHC,MAAAA,IAAI,EAAEC,MAPH;AAQHC,MAAAA,EAAE,EAAED;AARD,KAFJ;AAYHE,IAAAA,KAAK,EAAE;AACHH,MAAAA,IADG,kBACG;AACF,aAAKI,SAAL;AACH,OAHE;AAIHF,MAAAA,EAJG,gBAIE;AACD,aAAKE,SAAL;AACH,OANE;AAOHP,MAAAA,OAPG,mBAOKQ,GAPL,EAOUC,MAPV,EAOkB;AACjB,YAAGD,GAAG,CAACE,eAAJ,KAAwBD,MAAM,CAACC,eAAlC,EAAmD;AAC/C,eAAKC,cAAL,CAAoBD,eAApB,GAAsCF,GAAG,CAACE,eAA1C;AACH;AACJ;AAXE,KAZJ;AAyBHE,IAAAA,MAAM,EAAE,gBAAUC,aAAV,EAAyB;AAC7B,aAAO,IAAP;AACH,KA3BE;AA4BHC,IAAAA,OA5BG,qBA4BO;AACN,UAAMC,YAAY,GAAG,KAAKC,oBAAL,CAA0B,KAAKb,IAA/B,CAArB;AACA,UAAMc,UAAU,GAAG,KAAKD,oBAAL,CAA0B,KAAKX,EAA/B,CAAnB;AACA,UAAMa,GAAG,GAAG,KAAKC,MAAL,CAAYD,GAAxB;;AACA,UAAGH,YAAY,IAAIE,UAAnB,EAA+B;AAC3B,aAAKN,cAAL,GAAuB,IAAIS,aAAa,CAACxB,QAAD,CAAjB,iCAChB,KAAKI,OADW;AAEnBkB,UAAAA,GAAG,EAAHA,GAFmB;AAGnBf,UAAAA,IAAI,EAAEY,YAHa;AAInBV,UAAAA,EAAE,EAAEY;AAJe,WAAvB;AAMA,aAAKI,aAAL;AACA,aAAKC,cAAL,CAAoB,KAAKX,cAAzB;AAEH;AACJ,KA3CE;AA4CHY,IAAAA,OAAO,EAAE;AACLhB,MAAAA,SADK,uBACO;AACR,YAAMQ,YAAY,GAAG,KAAKC,oBAAL,CAA0B,KAAKb,IAA/B,CAArB;AACA,YAAMc,UAAU,GAAG,KAAKD,oBAAL,CAA0B,KAAKX,EAA/B,CAAnB;AACA,aAAKM,cAAL,CAAoBR,IAApB,GAA2BY,YAA3B;AACA,aAAKJ,cAAL,CAAoBN,EAApB,GAAyBY,UAAzB;AACH,OANI;AAOLI,MAAAA,aAPK,2BAOW;AAAA;;AACZnB,QAAAA,MAAM,CAACsB,IAAP,CAAY,KAAKC,UAAjB,EAA6BC,GAA7B,CAAiC,UAAAC,KAAK,EAAI;AACtC,cAAMC,IAAI,GAAG,KAAI,CAACH,UAAL,CAAgBE,KAAhB,CAAb;;AACA,UAAA,KAAI,CAAChB,cAAL,CAAoBkB,gBAApB,CAAqCF,KAArC,EAA4CC,IAA5C;AACH,SAHD;AAIH;AAZI,KA5CN;AA0DHE,IAAAA,SA1DG,uBA0DS;AACR,UAAG,KAAKnB,cAAR,EAAwB;AACpB,aAAKoB,mBAAL,CAAyB,KAAKpB,cAA9B;AACH;AACJ;AA9DE,GAAP;AAgEH","sourcesContent":["import * as JFlowInstance from '../../core/flow';\n\nexport default function (nameNode, isLink) {\n    return {\n        inject: [ 'addToLinkStack', 'removeFromLinkStack', 'getInstanceByJFlowId' ],\n        props: {\n            configs: {\n                type: Object,\n                default: function () {\n                    return {};\n                },\n            },\n            from: String,\n            to: String,\n        },\n        watch: {\n            from(){\n                this.resetLink();\n            },\n            to() {\n                this.resetLink();\n            },\n            configs(val, oldVal) {\n                if(val.backgroundColor !== oldVal.backgroundColor) {\n                    this._jflowInstance.backgroundColor = val.backgroundColor;\n                }\n            },\n        },\n        render: function (createElement) {\n            return null;\n        },\n        created() {\n            const fromInstance = this.getInstanceByJFlowId(this.from);\n            const toInstance = this.getInstanceByJFlowId(this.to);\n            const key = this.$vnode.key;\n            if(fromInstance && toInstance) {\n                this._jflowInstance =  new JFlowInstance[nameNode]({\n                    ...this.configs,\n                    key,\n                    from: fromInstance,\n                    to: toInstance,\n                });\n                this.bindListeners();\n                this.addToLinkStack(this._jflowInstance);\n               \n            }\n        },\n        methods: {\n            resetLink() {\n                const fromInstance = this.getInstanceByJFlowId(this.from);\n                const toInstance = this.getInstanceByJFlowId(this.to);\n                this._jflowInstance.from = fromInstance;\n                this._jflowInstance.to = toInstance;\n            },\n            bindListeners() {\n                Object.keys(this.$listeners).map(event => {\n                    const func = this.$listeners[event];\n                    this._jflowInstance.addEventListener(event, func);\n                })\n            }\n        },\n        destroyed() {\n            if(this._jflowInstance) {\n                this.removeFromLinkStack(this._jflowInstance);\n            }\n        }\n    }\n}"],"file":"JFlowLink.js"}