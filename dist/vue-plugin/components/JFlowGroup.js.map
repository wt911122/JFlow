{"version":3,"sources":["vue-plugin/components/JFlowGroup.js"],"names":["nameNode","bulder","JFlowInstance","mixins","StackMixin","inject","addToBelongStack","from","removeFromBelongStack","renderJFlow","addNameToRootStack","render","createElement","$slots","props","configs","type","Object","visible","Boolean","jflowId","String","watch","val","oldVal","JSON","stringify","_jflowInstance","setConfig","news","deletes","vnew","keys","map","e","event","handler","vold","forEach","v","hnew","find","q","push","hold","addEventListener","removeEventListener","created","$listeners","func","bind","mounted","recalculate","updated","recalculateUp","destroyed"],"mappings":"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","sourcesContent":["import * as JFlowInstance from '../../core/flow';\nimport StackMixin from './StackMixin';\nexport default function (nameNode) {\n    const bulder =  typeof nameNode === 'string' \n        ? JFlowInstance[nameNode] \n        : nameNode;\n    return {\n        mixins: [StackMixin],\n        inject: {\n            addToBelongStack: {\n                from: 'addToStack',\n            },\n            removeFromBelongStack: {\n                from: 'removeFromStack',\n            },\n            renderJFlow: {\n                from: 'renderJFlow',\n            },\n            addNameToRootStack: {\n                from: 'addNameToRootStack',\n            }\n        },\n        render: function (createElement) {\n            return createElement('template', this.$slots.default);\n        },\n        props: {\n            configs: {\n                type: Object,\n                default: function () {\n                    return {};\n                },\n            },\n            visible: {\n                type: Boolean,\n                default: true,\n            },\n            jflowId: {\n                type: String,\n            }\n        },\n        watch: {\n            configs(val, oldVal) {\n                if(JSON.stringify(val) === JSON.stringify(oldVal)){\n                    return;\n                }\n                this._jflowInstance.setConfig(val);\n                // this._jflowInstance._jflow._render();\n            },\n            '$listeners' (val, oldVal) {\n                let news = [];\n                let deletes = [];\n                const vnew = Object.keys(val).map(e => ({ event: e, handler: val[e] }));\n                const vold = Object.keys(oldVal).map(e => ({ event: e, handler: oldVal[e] }));\n                vnew.forEach((v) => {\n                    const hnew = v.handler;\n                    if(!vold.find((q) => q.handler === hnew)) {\n                        news.push(v);\n                    }\n                });\n                vold.forEach((v) => {\n                    const hold = v.handler;\n                    if(!vnew.find((q) => q.handler === hold)) {\n                        deletes.push(v);\n                    }\n                });\n\n                news.forEach((v) => {\n                    this._jflowInstance.addEventListener(v.event, v.handler);\n                });\n                deletes.forEach((v) => {\n                    this._jflowInstance.removeEventListener(v.event, v.handler);\n                });\n            },\n            visible(val) {\n                this._jflowInstance.visible = val;\n                // this._jflowInstance._belongs.recalculateUp();\n                // this._jflowInstance._jflow._render();\n            },\n        },\n        created() {\n            this._jflowInstance =  new bulder(this.configs);\n            this._jflowInstance.visible = this.visible;\n            Object.keys(this.$listeners).map(event => {\n                const func = this.$listeners[event].bind(this);\n                this._jflowInstance.addEventListener(event, func);\n            })\n            // console.log(this.name, this.)\n            this.addToBelongStack(this._jflowInstance, this.jflowId);\n            this.addNameToRootStack(this._jflowInstance, this.jflowId);\n        },\n        mounted(){\n            this._jflowInstance.recalculate();\n        },\n        updated() {\n            this._jflowInstance.recalculateUp();\n        },\n        destroyed() {\n            this.removeFromBelongStack(this._jflowInstance);\n        },\n    }\n}"],"file":"JFlowGroup.js"}